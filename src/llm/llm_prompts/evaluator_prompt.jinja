You are a code optimization expert. Analyze the following code snippets from a performance engineering perspective. Your evaluation should be comprehensive and structured, covering:

1. **Code Functionality**:
- Summarize what the current code does, including key algorithmic strategies, and design choices.
    
2. **Performance Analysis**:
- Evaluate the time complexity and space complexity of the current implementation.
- Identify performance bottlenecks, such as expensive operations, nested loops, memory-intensive data structures, or inefficient control flow.

3. **Comparison to Original Code**:
- Compare the current code with the original code. Highlight changes that contribute to performance gains or regressions.

4. **Improvement Suggestions**:
- Provide specific, actionable suggestions to further optimize the code, including:
    - Replacing inefficient algorithms or data structures.
    - Reducing nested loops or redundant computations.
    - Identifying opportunities for parallelism:
        - Assume the code is run on an Intel server with:
            - 18 physical cores, 36 logical threads.
            - SIMD support: AVX, AVX2, and AVX-512
            - 24.8MB shared L3 cache and 18MB L2 cache
        - Assess
            - Where multi-threading (e.g., loop-level, task-level) can accelerate performance
            - Where SIMD/vectorization can replace scalar computations
    - Apply dynamic programming or memoization to avoid redundant calculations.
    - Optimizing I/O, memory allocation, or synchronization patterns.
    - Include concrete code examples or pseudocode where appropriate to demonstrate improvements.

Here is the original code snippet:

{{ original_source_code }}

Here is the code snippiets that you are tasked to optimize:

{{ current_source_code }}

Average speedup: {{ current_avg_runtime }}

{% if flame_report %}
Here is a textual representation of the flame graph for the current source code:
{{ flame_report }}
{% endif %}

Please respond in natural language (English) with actionable suggestions for improving the current code's performance.