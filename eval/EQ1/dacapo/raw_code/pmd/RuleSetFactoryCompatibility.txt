{
    "0": [
        "\n\npackage net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.util.IOUtil;\n\n\n@InternalApi\n@Deprecated\npublic class RuleSetFactoryCompatibility {\n    private static final Logger LOG = Logger.getLogger(RuleSetFactoryCompatibility.class.getName());\n\n    private List<RuleSetFilter> filters = new LinkedList<>();\n\n    \n    public RuleSetFactoryCompatibility() {\n        \n        addFilterRuleRenamed(\"java\", \"design\", \"UncommentedEmptyMethod\", \"UncommentedEmptyMethodBody\");\n        addFilterRuleRemoved(\"java\", \"controversial\", \"BooleanInversion\");\n\n        \n        addFilterRuleRenamed(\"java\", \"design\", \"UseSingleton\", \"UseUtilityClass\");\n\n        \n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyCatchBlock\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyIfStatement\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyWhileStmt\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyTryBlock\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyFinallyBlock\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptySwitchStatements\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptySynchronizedBlock\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyStatementNotInLoop\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyInitializer\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyStatementBlock\");\n        addFilterRuleMoved(\"java\", \"basic\", \"empty\", \"EmptyStaticInitializer\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UnnecessaryConversionTemporary\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UnnecessaryReturn\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UnnecessaryFinalModifier\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UselessOverridingMethod\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UselessOperationOnImmutable\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UnusedNullCheckInEquals\");\n        addFilterRuleMoved(\"java\", \"basic\", \"unnecessary\", \"UselessParentheses\");\n\n        \n        addFilterRuleRenamed(\"java\", \"design\", \"AvoidConstantsInterface\", \"ConstantsInInterface\");\n        \n        addFilterRuleMovedAndRenamed(\"java\", \"unusedcode\", \"UnusedModifier\", \"unnecessary\", \"UnnecessaryModifier\");\n\n        \n        addFilterRuleMoved(\"java\", \"controversial\", \"unnecessary\", \"UnnecessaryParentheses\");\n        addFilterRuleRenamed(\"java\", \"unnecessary\", \"UnnecessaryParentheses\", \"UselessParentheses\");\n        addFilterRuleMoved(\"java\", \"typeresolution\", \"coupling\", \"LooseCoupling\");\n        addFilterRuleMoved(\"java\", \"typeresolution\", \"clone\", \"CloneMethodMustImplementCloneable\");\n        addFilterRuleMoved(\"java\", \"typeresolution\", \"imports\", \"UnusedImports\");\n        addFilterRuleMoved(\"java\", \"typeresolution\", \"strictexception\", \"SignatureDeclareThrowsException\");\n        addFilterRuleRenamed(\"java\", \"naming\", \"MisleadingVariableName\", \"MIsLeadingVariableName\");\n        addFilterRuleRenamed(\"java\", \"unnecessary\", \"UnnecessaryFinalModifier\", \"UnnecessaryModifier\");\n        addFilterRuleRenamed(\"java\", \"empty\", \"EmptyStaticInitializer\", \"EmptyInitializer\");\n        \n        addFilterRuleMovedAndRenamed(\"java\", \"logging-java\", \"GuardLogStatementJavaUtil\", \"logging-jakarta-commons\", \"GuardLogStatement\");\n        addFilterRuleRenamed(\"java\", \"logging-jakarta-commons\", \"GuardDebugLogging\", \"GuardLogStatement\");\n    }\n\n    void addFilterRuleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName) {\n        filters.add(RuleSetFilter.ruleMoved(language, oldRuleset, newRuleset, oldName));\n        filters.add(RuleSetFilter.ruleRenamedMoved(language, newRuleset, oldName, newName));\n    }\n\n    void addFilterRuleRenamed(String language, String ruleset, String oldName, String newName) {\n        filters.add(RuleSetFilter.ruleRenamed(language, ruleset, oldName, newName));\n    }\n\n    void addFilterRuleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n        filters.add(RuleSetFilter.ruleMoved(language, oldRuleset, newRuleset, ruleName));\n    }\n\n    void addFilterRuleRemoved(String language, String ruleset, String name) {\n        filters.add(RuleSetFilter.ruleRemoved(language, ruleset, name));\n    }\n\n    \n    public Reader filterRuleSetFile(InputStream stream) throws IOException {\n        byte[] bytes = IOUtil.toByteArray(stream);\n        String encoding = determineEncoding(bytes);\n        String ruleset = new String(bytes, encoding);\n\n        ruleset = applyAllFilters(ruleset);\n\n        return new StringReader(ruleset);\n    }\n\n    private String applyAllFilters(String ruleset) {\n        String result = ruleset;\n        for (RuleSetFilter filter : filters) {\n            result = filter.apply(result);\n        }\n        return result;\n    }\n\n    private static final Pattern ENCODING_PATTERN = Pattern.compile(\"encoding=\\\"([^\\\"]+)\\\"\");\n\n    \n    String determineEncoding(byte[] bytes) {\n        String firstBytes = new String(bytes, 0, bytes.length > 1024 ? 1024 : bytes.length,\n                StandardCharsets.ISO_8859_1);\n        Matcher matcher = ENCODING_PATTERN.matcher(firstBytes);\n        String encoding = StandardCharsets.UTF_8.name();\n        if (matcher.find()) {\n            encoding = matcher.group(1);\n        }\n        return encoding;\n    }\n\n    private static class RuleSetFilter {\n        private final Pattern refPattern;\n        private final String replacement;\n        private Pattern exclusionPattern;\n        private String exclusionReplacement;\n        private final String logMessage;\n\n        private RuleSetFilter(String refPattern, String replacement, String logMessage) {\n            this.logMessage = logMessage;\n            if (replacement != null) {\n                this.refPattern = Pattern.compile(\"ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\");\n                this.replacement = \"ref=\\\"\" + replacement + \"\\\"\";\n            } else {\n                this.refPattern = Pattern.compile(\"<rule\\\\s+ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\\\\s*/>\");\n                this.replacement = \"\";\n            }\n        }\n\n        private void setExclusionPattern(String oldName, String newName) {\n            exclusionPattern = Pattern.compile(\"<exclude\\\\s+name=[\\\"']\" + Pattern.quote(oldName) + \"[\\\"']\\\\s*/>\");\n            if (newName != null) {\n                exclusionReplacement = \"<exclude name=\\\"\" + newName + \"\\\" />\";\n            } else {\n                exclusionReplacement = \"\";\n            }\n        }\n\n        public static RuleSetFilter ruleRenamed(String language, String ruleset, String oldName, String newName) {\n            RuleSetFilter filter = ruleRenamedMoved(language, ruleset, oldName, newName);\n            filter.setExclusionPattern(oldName, newName);\n            return filter;\n        }\n\n        public static RuleSetFilter ruleRenamedMoved(String language, String ruleset, String oldName, String newName) {\n            String base = \"rulesets/\" + language + \"/\" + ruleset + \".xml/\";\n            return new RuleSetFilter(base + oldName, base + newName, \"The rule \\\"\" + oldName\n                    + \"\\\" has been renamed to \\\"\" + newName + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n            String base = \"rulesets/\" + language + \"/\";\n            return new RuleSetFilter(base + oldRuleset + \".xml/\" + ruleName, base + newRuleset + \".xml/\" + ruleName,\n                    \"The rule \\\"\" + ruleName + \"\\\" has been moved from ruleset \\\"\" + oldRuleset + \"\\\" to \\\"\"\n                            + newRuleset + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleRemoved(String language, String ruleset, String name) {\n            RuleSetFilter filter = new RuleSetFilter(\"rulesets/\" + language + \"/\" + ruleset + \".xml/\" + name, null,\n                    \"The rule \\\"\" + name + \"\\\" in ruleset \\\"\" + ruleset\n                            + \"\\\" has been removed from PMD and no longer exists. Please change your ruleset!\");\n            filter.setExclusionPattern(name, null);\n            return filter;\n        }\n\n        String apply(String ruleset) {\n            String result = ruleset;\n            Matcher matcher = refPattern.matcher(ruleset);\n\n            if (matcher.find()) {\n                result = matcher.replaceAll(replacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter: \" + logMessage);\n                }\n            }\n\n            if (exclusionPattern == null) {\n                return result;\n            }\n\n            Matcher exclusions = exclusionPattern.matcher(result);\n            if (exclusions.find()) {\n                result = exclusions.replaceAll(exclusionReplacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter for exclusions: \" + logMessage);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n"
    ],
    "1": [
        "\npackage net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.util.IOUtil;\n\n@InternalApi\n@Deprecated\npublic class RuleSetFactoryCompatibility {\n    private static final Logger LOG = Logger.getLogger(RuleSetFactoryCompatibility.class.getName());\n\n    private List<RuleSetFilter> filters = new ArrayList<>();\n\n    public RuleSetFactoryCompatibility() {\n        setupFilters();\n    }\n\n    private void setupFilters() {\n        \n        addBatchFilterRule(new String[][] {\n            {\"java\", \"design\", \"UncommentedEmptyMethod\", \"UncommentedEmptyMethodBody\"},\n            {\"java\", \"controversial\", \"BooleanInversion\", null},\n            {\"java\", \"design\", \"UseSingleton\", \"UseUtilityClass\"},\n            {\"java\", \"design\", \"AvoidConstantsInterface\", \"ConstantsInInterface\"},\n            {\"java\", \"controversial\", \"unnecessary\", \"UnnecessaryParentheses\"},\n            {\"java\", \"unnecessary\", \"UnnecessaryParentheses\", \"UselessParentheses\"},\n            {\"java\", \"naming\", \"MisleadingVariableName\", \"MIsLeadingVariableName\"},\n            {\"java\", \"unnecessary\", \"UnnecessaryFinalModifier\", \"UnnecessaryModifier\"},\n            {\"java\", \"empty\", \"EmptyStaticInitializer\", \"EmptyInitializer\"}\n        });\n\n        addMovementFilters(new String[][] {\n            {\"java\", \"basic\", \"empty\", \"EmptyCatchBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyIfStatement\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyWhileStmt\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyTryBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyFinallyBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptySwitchStatements\"},\n            {\"java\", \"basic\", \"empty\", \"EmptySynchronizedBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStatementNotInLoop\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyInitializer\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStatementBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStaticInitializer\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryConversionTemporary\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryReturn\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryFinalModifier\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessOverridingMethod\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessOperationOnImmutable\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnusedNullCheckInEquals\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessParentheses\"},\n            {\"java\", \"typeresolution\", \"coupling\", \"LooseCoupling\"},\n            {\"java\", \"typeresolution\", \"clone\", \"CloneMethodMustImplementCloneable\"},\n            {\"java\", \"typeresolution\", \"imports\", \"UnusedImports\"},\n            {\"java\", \"typeresolution\", \"strictexception\", \"SignatureDeclareThrowsException\"},\n            {\"java\", \"logging-java\", \"GuardLogStatementJavaUtil\", \"logging-jakarta-commons\", \"GuardLogStatement\"},\n            {\"java\", \"unusedcode\", \"UnusedModifier\", \"unnecessary\", \"UnnecessaryModifier\"}\n        });\n    }\n\n    private void addBatchFilterRule(String[][] rules) {\n        for (String[] rule : rules) {\n            if (rule.length == 4 && rule[3] != null) {\n                filters.add(RuleSetFilter.ruleRenamed(rule[0], rule[1], rule[2], rule[3]));\n            } else {\n                filters.add(RuleSetFilter.ruleRemoved(rule[0], rule[1], rule[2]));\n            }\n        }\n    }\n\n    private void addMovementFilters(String[][] rules) {\n        for (String[] rule : rules) {\n            if (rule.length == 5) {\n                filters.add(RuleSetFilter.ruleMovedAndRenamed(rule[0], rule[1], rule[2], rule[3], rule[4]));\n            } else {\n                filters.add(RuleSetFilter.ruleMoved(rule[0], rule[1], rule[2], rule[3]));\n            }\n        }\n    }\n\n    \n    public void addFilterRuleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n        filters.add(RuleSetFilter.ruleMoved(language, oldRuleset, newRuleset, ruleName));\n    }\n\n    public void addFilterRuleRenamed(String language, String ruleset, String oldName, String newName) {\n        filters.add(RuleSetFilter.ruleRenamed(language, ruleset, oldName, newName));\n    }\n\n    public void addFilterRuleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName) {\n        filters.add(RuleSetFilter.ruleMovedAndRenamed(language, oldRuleset, oldName, newRuleset, newName));\n    }\n\n    public void addFilterRuleRemoved(String language, String ruleset, String name) {\n        filters.add(RuleSetFilter.ruleRemoved(language, ruleset, name));\n    }\n\n    public Reader filterRuleSetFile(InputStream stream) throws IOException {\n        byte[] bytes = IOUtil.toByteArray(stream);\n        String encoding = determineEncoding(bytes);\n        StringBuilder rulesetBuilder = new StringBuilder(new String(bytes, encoding));\n\n        applyAllFilters(rulesetBuilder);\n\n        return new StringReader(rulesetBuilder.toString());\n    }\n\n    private void applyAllFilters(StringBuilder rulesetBuilder) {\n        for (RuleSetFilter filter : filters) {\n            filter.apply(rulesetBuilder);\n        }\n    }\n\n    private static final Pattern ENCODING_PATTERN = Pattern.compile(\"encoding=\\\"([^\\\"]+)\\\"\");\n\n    String determineEncoding(byte[] bytes) {\n        String firstBytes = new String(bytes, 0, Math.min(bytes.length, 1024), StandardCharsets.ISO_8859_1);\n        Matcher matcher = ENCODING_PATTERN.matcher(firstBytes);\n        return matcher.find() ? matcher.group(1) : StandardCharsets.UTF_8.name();\n    }\n\n    private static class RuleSetFilter {\n        private final Pattern refPattern;\n        private final String replacement;\n        private Pattern exclusionPattern;\n        private String exclusionReplacement;\n        private final String logMessage;\n\n        private RuleSetFilter(String refPattern, String replacement, String logMessage) {\n            this.logMessage = logMessage;\n            if (replacement != null) {\n                this.refPattern = Pattern.compile(\"ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\");\n                this.replacement = \"ref=\\\"\" + replacement + \"\\\"\";\n            } else {\n                this.refPattern = Pattern.compile(\"<rule\\\\s+ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\\\\s*/>\");\n                this.replacement = \"\";\n            }\n        }\n\n        private void setExclusionPattern(String oldName, String newName) {\n            exclusionPattern = Pattern.compile(\"<exclude\\\\s+name=[\\\"']\" + Pattern.quote(oldName) + \"[\\\"']\\\\s*/>\");\n            exclusionReplacement = newName != null ? \"<exclude name=\\\"\" + newName + \"\\\" />\" : \"\";\n        }\n\n        public static RuleSetFilter ruleRenamed(String language, String ruleset, String oldName, String newName) {\n            RuleSetFilter filter = ruleRenamedMoved(language, ruleset, oldName, newName);\n            filter.setExclusionPattern(oldName, newName);\n            return filter;\n        }\n\n        public static RuleSetFilter ruleRenamedMoved(String language, String ruleset, String oldName, String newName) {\n            String base = \"rulesets/\" + language + \"/\" + ruleset + \".xml/\";\n            return new RuleSetFilter(base + oldName, base + newName, \"The rule \\\"\" + oldName + \"\\\" has been renamed to \\\"\" + newName + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n            String base = \"rulesets/\" + language + \"/\";\n            return new RuleSetFilter(base + oldRuleset + \".xml/\" + ruleName, base + newRuleset + \".xml/\" + ruleName,\n                    \"The rule \\\"\" + ruleName + \"\\\" has been moved from ruleset \\\"\" + oldRuleset + \"\\\" to \\\"\" + newRuleset + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName) {\n            RuleSetFilter movedFilter = ruleMoved(language, oldRuleset, newRuleset, oldName);\n            RuleSetFilter renamedFilter = ruleRenamedMoved(language, newRuleset, oldName, newName);\n            return new RuleSetFilter(movedFilter.refPattern.pattern(), renamedFilter.replacement, \n                \"The rule \\\"\" + oldName + \"\\\" has been moved and renamed from \\\"\" + oldRuleset + \"\\\" to \\\"\" + newRuleset + \"/\" + newName + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleRemoved(String language, String ruleset, String name) {\n            RuleSetFilter filter = new RuleSetFilter(\"rulesets/\" + language + \"/\" + ruleset + \".xml/\" + name, null,\n                    \"The rule \\\"\" + name + \"\\\" in ruleset \\\"\" + ruleset + \"\\\" has been removed from PMD and no longer exists. Please change your ruleset!\");\n            filter.setExclusionPattern(name, null);\n            return filter;\n        }\n\n        void apply(StringBuilder rulesetBuilder) {\n            Matcher matcher = refPattern.matcher(rulesetBuilder);\n            if (matcher.find()) {\n                int start = matcher.start();\n                int end = matcher.end();\n                rulesetBuilder.replace(start, end, replacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter: \" + logMessage);\n                }\n            }\n\n            if (exclusionPattern == null) {\n                return;\n            }\n\n            Matcher exclusions = exclusionPattern.matcher(rulesetBuilder);\n            if (exclusions.find()) {\n                int start = exclusions.start();\n                int end = exclusions.end();\n                rulesetBuilder.replace(start, end, exclusionReplacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter for exclusions: \" + logMessage);\n                }\n            }\n        }\n    }\n}\n"
    ],
    "2": [
        "\npackage net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.util.IOUtil;\n\n@InternalApi\n@Deprecated\npublic class RuleSetFactoryCompatibility {\n    private static final Logger LOG = Logger.getLogger(RuleSetFactoryCompatibility.class.getName());\n\n    private List<RuleSetFilter> filters = new ArrayList<>();\n\n    public RuleSetFactoryCompatibility() {\n        setupFilters();\n    }\n\n    private void setupFilters() {\n        addBatchFilterRule(new String[][] {\n            {\"java\", \"design\", \"UncommentedEmptyMethod\", \"UncommentedEmptyMethodBody\"},\n            {\"java\", \"controversial\", \"BooleanInversion\", null},\n            {\"java\", \"design\", \"UseSingleton\", \"UseUtilityClass\"},\n            {\"java\", \"design\", \"AvoidConstantsInterface\", \"ConstantsInInterface\"},\n            {\"java\", \"controversial\", \"unnecessary\", \"UnnecessaryParentheses\"},\n            {\"java\", \"unnecessary\", \"UnnecessaryParentheses\", \"UselessParentheses\"},\n            {\"java\", \"naming\", \"MisleadingVariableName\", \"MIsLeadingVariableName\"},\n            {\"java\", \"unnecessary\", \"UnnecessaryFinalModifier\", \"UnnecessaryModifier\"},\n            {\"java\", \"empty\", \"EmptyStaticInitializer\", \"EmptyInitializer\"}\n        });\n\n        addMovementFilters(new String[][] {\n            {\"java\", \"basic\", \"empty\", \"EmptyCatchBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyIfStatement\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyWhileStmt\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyTryBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyFinallyBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptySwitchStatements\"},\n            {\"java\", \"basic\", \"empty\", \"EmptySynchronizedBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStatementNotInLoop\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyInitializer\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStatementBlock\"},\n            {\"java\", \"basic\", \"empty\", \"EmptyStaticInitializer\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryConversionTemporary\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryReturn\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnnecessaryFinalModifier\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessOverridingMethod\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessOperationOnImmutable\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UnusedNullCheckInEquals\"},\n            {\"java\", \"basic\", \"unnecessary\", \"UselessParentheses\"},\n            {\"java\", \"typeresolution\", \"coupling\", \"LooseCoupling\"},\n            {\"java\", \"typeresolution\", \"clone\", \"CloneMethodMustImplementCloneable\"},\n            {\"java\", \"typeresolution\", \"imports\", \"UnusedImports\"},\n            {\"java\", \"typeresolution\", \"strictexception\", \"SignatureDeclareThrowsException\"},\n            {\"java\", \"logging-java\", \"GuardLogStatementJavaUtil\", \"logging-jakarta-commons\", \"GuardLogStatement\"},\n            {\"java\", \"unusedcode\", \"UnusedModifier\", \"unnecessary\", \"UnnecessaryModifier\"}\n        });\n    }\n\n    private void addBatchFilterRule(String[][] rules) {\n        for (String[] rule : rules) {\n            if (rule.length == 4 && rule[3] != null) {\n                filters.add(RuleSetFilter.ruleRenamed(rule[0], rule[1], rule[2], rule[3]));\n            } else {\n                filters.add(RuleSetFilter.ruleRemoved(rule[0], rule[1], rule[2]));\n            }\n        }\n    }\n\n    private void addMovementFilters(String[][] rules) {\n        for (String[] rule : rules) {\n            if (rule.length == 5) {\n                filters.add(RuleSetFilter.ruleMovedAndRenamed(rule[0], rule[1], rule[2], rule[3], rule[4]));\n            } else {\n                filters.add(RuleSetFilter.ruleMoved(rule[0], rule[1], rule[2], rule[3]));\n            }\n        }\n    }\n\n    public void addFilterRuleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n        filters.add(RuleSetFilter.ruleMoved(language, oldRuleset, newRuleset, ruleName));\n    }\n\n    public void addFilterRuleRenamed(String language, String ruleset, String oldName, String newName) {\n        filters.add(RuleSetFilter.ruleRenamed(language, ruleset, oldName, newName));\n    }\n\n    public void addFilterRuleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName) {\n        filters.add(RuleSetFilter.ruleMovedAndRenamed(language, oldRuleset, oldName, newRuleset, newName));\n    }\n\n    public void addFilterRuleRemoved(String language, String ruleset, String name) {\n        filters.add(RuleSetFilter.ruleRemoved(language, ruleset, name));\n    }\n\n    public Reader filterRuleSetFile(InputStream stream) throws IOException {\n        byte[] bytes = IOUtil.toByteArray(stream);\n        String encoding = determineEncoding(bytes);\n        StringBuilder rulesetBuilder = new StringBuilder(new String(bytes, encoding));\n\n        applyAllFilters(rulesetBuilder);\n\n        return new StringReader(rulesetBuilder.toString());\n    }\n\n    private void applyAllFilters(StringBuilder rulesetBuilder) {\n        for (RuleSetFilter filter : filters) {\n            filter.apply(rulesetBuilder);\n        }\n    }\n\n    private static final Pattern ENCODING_PATTERN = Pattern.compile(\"encoding=\\\"([^\\\"]+)\\\"\");\n\n    String determineEncoding(byte[] bytes) {\n        String firstBytes = new String(bytes, 0, Math.min(bytes.length, 1024), StandardCharsets.ISO_8859_1);\n        Matcher matcher = ENCODING_PATTERN.matcher(firstBytes);\n        return matcher.find() ? matcher.group(1) : StandardCharsets.UTF_8.name();\n    }\n\n    private static class RuleSetFilter {\n        private final Pattern refPattern;\n        private final String replacement;\n        private final String logMessage;\n        private Pattern exclusionPattern;\n        private String exclusionReplacement;\n\n        private RuleSetFilter(String refPattern, String replacement, String logMessage) {\n            this.logMessage = logMessage;\n            if (replacement != null) {\n                this.refPattern = Pattern.compile(\"ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\");\n                this.replacement = \"ref=\\\"\" + replacement + \"\\\"\";\n            } else {\n                this.refPattern = Pattern.compile(\"<rule\\\\s+ref=\\\"\" + Pattern.quote(refPattern) + \"\\\"\\\\s*/>\");\n                this.replacement = \"\";\n            }\n        }\n\n        public static RuleSetFilter ruleRenamed(String language, String ruleset, String oldName, String newName) {\n            RuleSetFilter filter = ruleRenamedMoved(language, ruleset, oldName, newName);\n            filter.setExclusionPattern(oldName, newName);\n            return filter;\n        }\n\n        public static RuleSetFilter ruleRenamedMoved(String language, String ruleset, String oldName, String newName) {\n            String base = \"rulesets/\" + language + \"/\" + ruleset + \".xml/\";\n            return new RuleSetFilter(base + oldName, base + newName, \"The rule \\\"\" + oldName + \"\\\" has been renamed to \\\"\" + newName + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleMoved(String language, String oldRuleset, String newRuleset, String ruleName) {\n            String base = \"rulesets/\" + language + \"/\";\n            return new RuleSetFilter(base + oldRuleset + \".xml/\" + ruleName, base + newRuleset + \".xml/\" + ruleName,\n                    \"The rule \\\"\" + ruleName + \"\\\" has been moved from ruleset \\\"\" + oldRuleset + \"\\\" to \\\"\" + newRuleset + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleMovedAndRenamed(String language, String oldRuleset, String oldName, String newRuleset, String newName) {\n            RuleSetFilter movedFilter = ruleMoved(language, oldRuleset, newRuleset, oldName);\n            RuleSetFilter renamedFilter = ruleRenamedMoved(language, newRuleset, oldName, newName);\n            return new RuleSetFilter(movedFilter.refPattern.pattern(), renamedFilter.replacement,\n                    \"The rule \\\"\" + oldName + \"\\\" has been moved and renamed from \\\"\" + oldRuleset + \"\\\" to \\\"\" + newRuleset + \"/\" + newName + \"\\\". Please change your ruleset!\");\n        }\n\n        public static RuleSetFilter ruleRemoved(String language, String ruleset, String name) {\n            RuleSetFilter filter = new RuleSetFilter(\"rulesets/\" + language + \"/\" + ruleset + \".xml/\" + name, null,\n                    \"The rule \\\"\" + name + \"\\\" in ruleset \\\"\" + ruleset + \"\\\" has been removed from PMD and no longer exists. Please change your ruleset!\");\n            filter.setExclusionPattern(name, null);\n            return filter;\n        }\n\n        private void setExclusionPattern(String oldName, String newName) {\n            exclusionPattern = Pattern.compile(\"<exclude\\\\s+name=[\\\"']\" + Pattern.quote(oldName) + \"[\\\"']\\\\s*/>\");\n            exclusionReplacement = newName != null ? \"<exclude name=\\\"\" + newName + \"\\\" />\" : \"\";\n        }\n\n        void apply(StringBuilder rulesetBuilder) {\n            Matcher matcher = refPattern.matcher(rulesetBuilder);\n            if (matcher.find()) {\n                int start = matcher.start();\n                int end = matcher.end();\n                rulesetBuilder.replace(start, end, replacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter: \" + logMessage);\n                }\n            }\n\n            if (exclusionPattern == null) {\n                return;\n            }\n\n            Matcher exclusions = exclusionPattern.matcher(rulesetBuilder);\n            if (exclusions.find()) {\n                int start = exclusions.start();\n                int end = exclusions.end();\n                rulesetBuilder.replace(start, end, exclusionReplacement);\n\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Applying rule set filter for exclusions: \" + logMessage);\n                }\n            }\n        }\n    }\n}\n"
    ]
}