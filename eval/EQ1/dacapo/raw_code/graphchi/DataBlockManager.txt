{
    "0": [
        "package edu.cmu.graphchi.datablocks;\n\nimport java.util.ArrayList;\n\n\n\n\npublic class DataBlockManager {\n\n    private ArrayList<byte[]> blocks = new ArrayList<byte[]>(32678);\n\n    public DataBlockManager() {\n\n    }\n\n    public int allocateBlock(int numBytes) {\n        byte[] dataBlock = new byte[numBytes];\n\n        synchronized(blocks) {\n            int blockId = blocks.size();\n            blocks.add(blockId, dataBlock);\n            return blockId;\n        }\n    }\n\n    public byte[] getRawBlock(int blockId) {\n        byte[] bb = blocks.get(blockId);    \n        if (bb == null) {\n            throw new IllegalStateException(\"Null-reference!\");\n        }\n\n        return bb;\n    }\n\n\n    \n    public void reset() {\n        for(int i=0; i<blocks.size(); i++) {\n            if (blocks.get(i) != null) {\n                throw new RuntimeException(\"Tried to reset block manager, but it was non-empty at index: \" + i);\n            }\n        }\n        blocks.clear();\n    }\n\n    public boolean empty() {\n        for(int i=0; i<blocks.size(); i++) {\n            if (blocks.get(i) != null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public void release(int blockId) {\n        blocks.set(blockId, null);\n    }\n\n    public <T> T dereference(ChiPointer ptr, BytesToValueConverter<T> conv) {\n        byte[] arr = new byte[conv.sizeOf()];\n\n        if (ptr == null) {\n            throw new IllegalStateException(\"Tried to dereference a null pointer!\");\n        }\n\n        System.arraycopy(getRawBlock(ptr.blockId), ptr.offset, arr, 0, arr.length);\n        return conv.getValue(arr);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, BytesToValueConverter<T> conv, T value) {\n        byte[] arr = new byte[conv.sizeOf()];\n        conv.setValue(arr, value);\n        System.arraycopy(arr, 0, getRawBlock(ptr.blockId), ptr.offset, arr.length);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, byte[] data) {\n        System.arraycopy(data, 0, getRawBlock(ptr.blockId), ptr.offset, data.length);\n    }\n}\n"
    ],
    "1": [
        "package edu.cmu.graphchi.datablocks;\n\nimport java.util.ArrayList;\n\npublic class DataBlockManager {\n\n    private ArrayList<byte[]> blocks = new ArrayList<byte[]>(32678);\n\n    \n    private static final ThreadLocal<byte[]> threadLocalBuffer = new ThreadLocal<byte[]>();\n\n    public DataBlockManager() {\n    }\n\n    public int allocateBlock(int numBytes) {\n        byte[] dataBlock = new byte[numBytes];\n        synchronized(blocks) {\n            int blockId = blocks.size();\n            blocks.add(blockId, dataBlock);\n            return blockId;\n        }\n    }\n\n    public byte[] getRawBlock(int blockId) {\n        byte[] bb = blocks.get(blockId);    \n        if (bb == null) {\n            throw new IllegalStateException(\"Null-reference!\");\n        }\n        return bb;\n    }\n\n    public void reset() {\n        for(int i=0; i<blocks.size(); i++) {\n            if (blocks.get(i) != null) {\n                throw new RuntimeException(\"Tried to reset block manager, but it was non-empty at index: \" + i);\n            }\n        }\n        blocks.clear();\n    }\n\n    public boolean empty() {\n        for(int i=0; i<blocks.size(); i++) {\n            if (blocks.get(i) != null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public void release(int blockId) {\n        blocks.set(blockId, null);\n    }\n\n    \n    private byte[] getThreadLocalBuffer(int size) {\n        byte[] buffer = threadLocalBuffer.get();\n        if (buffer == null || buffer.length < size) {\n            buffer = new byte[size];\n            threadLocalBuffer.set(buffer);\n        }\n        return buffer;\n    }\n\n    public <T> T dereference(ChiPointer ptr, BytesToValueConverter<T> conv) {\n        if (ptr == null) {\n            throw new IllegalStateException(\"Tried to dereference a null pointer!\");\n        }\n        int size = conv.sizeOf();\n        byte[] arr = getThreadLocalBuffer(size);\n        System.arraycopy(getRawBlock(ptr.blockId), ptr.offset, arr, 0, size);\n        return conv.getValue(arr);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, BytesToValueConverter<T> conv, T value) {\n        int size = conv.sizeOf();\n        byte[] arr = getThreadLocalBuffer(size);\n        conv.setValue(arr, value);\n        System.arraycopy(arr, 0, getRawBlock(ptr.blockId), ptr.offset, size);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, byte[] data) {\n        System.arraycopy(data, 0, getRawBlock(ptr.blockId), ptr.offset, data.length);\n    }\n}\n"
    ],
    "2": [
        "package edu.cmu.graphchi.datablocks;\n\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicReferenceArray;\n\npublic class DataBlockManager {\n\n    private static final int INITIAL_CAPACITY = 32678;\n    private final AtomicReferenceArray<byte[]> blocks = new AtomicReferenceArray<byte[]>(INITIAL_CAPACITY);\n    private final AtomicInteger nextBlockId = new AtomicInteger(0);\n\n    private static final ThreadLocal<byte[]> threadLocalBuffer = new ThreadLocal<byte[]>();\n\n    public DataBlockManager() {\n    }\n\n    public int allocateBlock(int numBytes) {\n        int blockId = nextBlockId.getAndIncrement();\n        if (blockId >= blocks.length()) {\n            throw new RuntimeException(\"Exceeded maximum number of blocks: \" + blocks.length());\n        }\n        byte[] dataBlock = new byte[numBytes];\n        blocks.set(blockId, dataBlock);\n        return blockId;\n    }\n\n    public byte[] getRawBlock(int blockId) {\n        byte[] bb = blocks.get(blockId);\n        if (bb == null) {\n            throw new IllegalStateException(\"Null-reference!\");\n        }\n        return bb;\n    }\n\n    public void reset() {\n        for (int i = 0; i < nextBlockId.get(); i++) {\n            if (blocks.get(i) != null) {\n                throw new RuntimeException(\"Tried to reset block manager, but it was non-empty at index: \" + i);\n            }\n        }\n        \n        nextBlockId.set(0);\n        \n    }\n\n    public boolean empty() {\n        for (int i = 0; i < nextBlockId.get(); i++) {\n            if (blocks.get(i) != null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public void release(int blockId) {\n        blocks.set(blockId, null);\n    }\n\n    private byte[] getThreadLocalBuffer(int size) {\n        byte[] buffer = threadLocalBuffer.get();\n        if (buffer == null || buffer.length < size) {\n            buffer = new byte[size];\n            threadLocalBuffer.set(buffer);\n        }\n        return buffer;\n    }\n\n    public <T> T dereference(ChiPointer ptr, BytesToValueConverter<T> conv) {\n        if (ptr == null) {\n            throw new IllegalStateException(\"Tried to dereference a null pointer!\");\n        }\n        int size = conv.sizeOf();\n        byte[] arr = getThreadLocalBuffer(size);\n        System.arraycopy(getRawBlock(ptr.blockId), ptr.offset, arr, 0, size);\n        return conv.getValue(arr);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, BytesToValueConverter<T> conv, T value) {\n        int size = conv.sizeOf();\n        byte[] arr = getThreadLocalBuffer(size);\n        conv.setValue(arr, value);\n        System.arraycopy(arr, 0, getRawBlock(ptr.blockId), ptr.offset, size);\n    }\n\n    public <T> void writeValue(ChiPointer ptr, byte[] data) {\n        System.arraycopy(data, 0, getRawBlock(ptr.blockId), ptr.offset, data.length);\n    }\n}\n"
    ]
}