{
    "0": [
        "\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DataSource;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence.AnnotationType;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\n\n\npublic class GenericFastaHeaderParser<S extends AbstractSequence<C>, C extends Compound> implements SequenceHeaderParserInterface<S,C> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenericFastaHeaderParser.class);\n\n\t\n\tprivate String[] getHeaderValues(String header) {\n\t\tString[] data = new String[0];\n\t\tArrayList<String> values = new ArrayList<String>();\n\t\tStringBuffer sb = new StringBuffer();\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t if (!header.startsWith(\"PDB:\")) {\n\t\t\tfor (int i = 0; i < header.length(); i++) {\n\t\t\t\tif (header.charAt(i) == '|') {\n\t\t\t\t\tvalues.add(sb.toString());\n\t\t\t\t\tsb.setLength(0);\n\t\t\t\t} else if (i == header.length() - 1) {\n\t\t\t\t\tsb.append(header.charAt(i));\n\t\t\t\t\tvalues.add(sb.toString());\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(header.charAt(i));\n\t\t\t\t}\n\n\t\t\t\tdata = new String[values.size()];\n\t\t\t\tvalues.toArray(data);\n\t\t\t}\n\t\t} else {\n\t\t\tdata = header.split(\" \");\n\t\t}\n\t\treturn data;\n\t}\n\n\t\n\t@Override\n\tpublic void parseHeader(String header, S sequence) {\n\t\t\n\t\t\n\t\tsequence.setOriginalHeader(header);\n\t\tString[] data = getHeaderValues(header);\n\n\t\tif (data.length == 1) {\n\t\t\tsequence.setAccession(new AccessionID(data[0]));\n\t\t} else  if (\"sp\".equalsIgnoreCase(data[0]) || \"tr\".equalsIgnoreCase(data[0])) {\n\t\t\tif (\"sp\".equalsIgnoreCase(data[0])) {\n\t\t\t\tsequence.setAnnotationType(AnnotationType.CURATED);\n\t\t\t} else {\n\t\t\t\tsequence.setAnnotationType(AnnotationType.PREDICTED);\n\t\t\t}\n\n\t\t\tsequence.setAccession(new AccessionID(data[1], DataSource.UNIPROT));\n\t\t\tif (data.length > 2) {\n\t\t\t\tsequence.setDescription(data[2]);\n\t\t\t}\n\n\t\t} else if (\"gi\".equalsIgnoreCase(data[0])) {\n\t\t\tDataSource giSource = DataSource.UNKNOWN;\n\t\t\tif (data.length >= 3) {\n\t\t\t\tif (\"gb\".equalsIgnoreCase(data[2])) {\n\t\t\t\t\tgiSource = DataSource.GENBANK;\n\t\t\t\t} else if (\"emb\".equalsIgnoreCase(data[2])) {\n\t\t\t\t\tgiSource = DataSource.ENA;\n\t\t\t\t} else if (\"dbj\".equalsIgnoreCase(data[2])) {\n\t\t\t\t\tgiSource = DataSource.DDBJ;\n\t\t\t\t}\n\t\t\t\tsequence.setAccession(new AccessionID(data[3], giSource));\n\t\t\t} else {\n\t\t\t\tsequence.setAccession(new AccessionID(header, giSource));\n\t\t\t}\n\t\t} else if (\"pir\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[2], DataSource.NBRF));\n\t\t} else if (\"prf\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[2], DataSource.PRF));\n\t\t} else if (\"pdb\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[1] + \":\" + data[2], DataSource.PDB1));\n\t\t} else if (data[0].startsWith(\"PDB\")) {\n\t\t\tString[] pdbe = data[0].split(\" \");\n\t\t\tString[] pdbaccession = pdbe[0].split(\":\");\n\t\t\tsequence.setAccession(new AccessionID(pdbaccession[1], DataSource.PDBe));\n\t\t} else if (data[0].indexOf(\":\") != -1 && data.length > 1 && \"PDBID\".equals(data[1])) {\n\t\t\tsequence.setAccession(new AccessionID(data[0], DataSource.PDB2));\n\t\t} else if (\"pat\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[2], DataSource.PATENTS));\n\t\t} else if (\"bbs\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[1], DataSource.GENINFO));\n\t\t} else if (\"gnl\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[2], DataSource.GENERAL));\n\t\t} else if (\"ref\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[1], DataSource.NCBI));\n\t\t} else if (\"lcl\".equalsIgnoreCase(data[0])) {\n\t\t\tsequence.setAccession(new AccessionID(data[1], DataSource.LOCAL));\n\t\t} else {\n\t\t\tsequence.setAccession(new AccessionID(data[0])); \n\t\t}\n\n\n\t}\n\n\t\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DataSource;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence.AnnotationType;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GenericFastaHeaderParser<S extends AbstractSequence<C>, C extends Compound> implements SequenceHeaderParserInterface<S,C> {\n\n    private final static Logger logger = LoggerFactory.getLogger(GenericFastaHeaderParser.class);\n\n    private String[] getHeaderValues(String header) {\n        if (!header.startsWith(\"PDB:\")) {\n            return header.split(\"\\\\|\");\n        } else {\n            return header.split(\" \");\n        }\n    }\n\n    @Override\n    public void parseHeader(String header, S sequence) {\n        sequence.setOriginalHeader(header);\n        String[] data = getHeaderValues(header);\n\n        if (data.length == 1) {\n            sequence.setAccession(new AccessionID(data[0]));\n        } else  if (\"sp\".equalsIgnoreCase(data[0]) || \"tr\".equalsIgnoreCase(data[0])) {\n            if (\"sp\".equalsIgnoreCase(data[0])) {\n                sequence.setAnnotationType(AnnotationType.CURATED);\n            } else {\n                sequence.setAnnotationType(AnnotationType.PREDICTED);\n            }\n            sequence.setAccession(new AccessionID(data[1], DataSource.UNIPROT));\n            if (data.length > 2) {\n                sequence.setDescription(data[2]);\n            }\n        } else if (\"gi\".equalsIgnoreCase(data[0])) {\n            DataSource giSource = DataSource.UNKNOWN;\n            if (data.length >= 3) {\n                if (\"gb\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.GENBANK;\n                } else if (\"emb\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.ENA;\n                } else if (\"dbj\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.DDBJ;\n                }\n                sequence.setAccession(new AccessionID(data[3], giSource));\n            } else {\n                sequence.setAccession(new AccessionID(header, giSource));\n            }\n        } else if (\"pir\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.NBRF));\n        } else if (\"prf\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.PRF));\n        } else if (\"pdb\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1] + \":\" + data[2], DataSource.PDB1));\n        } else if (data[0].startsWith(\"PDB\")) {\n            String[] pdbe = data[0].split(\" \");\n            String[] pdbaccession = pdbe[0].split(\":\");\n            sequence.setAccession(new AccessionID(pdbaccession[1], DataSource.PDBe));\n        } else if (data[0].indexOf(\":\") != -1 && data.length > 1 && \"PDBID\".equals(data[1])) {\n            sequence.setAccession(new AccessionID(data[0], DataSource.PDB2));\n        } else if (\"pat\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.PATENTS));\n        } else if (\"bbs\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.GENINFO));\n        } else if (\"gnl\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.GENERAL));\n        } else if (\"ref\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.NCBI));\n        } else if (\"lcl\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.LOCAL));\n        } else {\n            sequence.setAccession(new AccessionID(data[0]));\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DataSource;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence.AnnotationType;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GenericFastaHeaderParser<S extends AbstractSequence<C>, C extends Compound> implements SequenceHeaderParserInterface<S,C> {\n\n    private static final Logger logger = LoggerFactory.getLogger(GenericFastaHeaderParser.class);\n    private static final String PDB_PREFIX = \"PDB:\";\n    private static final String PIPE = \"|\";\n    private static final String SPACE = \" \";\n\n    \n    private static String[] fastSplit(String str, char delimiter) {\n        List<String> tokens = new ArrayList<>();\n        int start = 0;\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            if (str.charAt(i) == delimiter) {\n                tokens.add(str.substring(start, i));\n                start = i + 1;\n            }\n        }\n        if (start <= len - 1) tokens.add(str.substring(start));\n        return tokens.toArray(new String[tokens.size()]);\n    }\n\n    private static String[] fastSpaceSplit(String str) {\n        \n        List<String> tokens = new ArrayList<>();\n        int start = 0;\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            if (str.charAt(i) == ' ') {\n                tokens.add(str.substring(start, i));\n                start = i + 1;\n            }\n        }\n        if (start <= len - 1) tokens.add(str.substring(start));\n        return tokens.toArray(new String[tokens.size()]);\n    }\n\n    private static String[] getHeaderValues(String header) {\n        if (!header.startsWith(PDB_PREFIX)) {\n            return fastSplit(header, '|');\n        } else {\n            return fastSpaceSplit(header);\n        }\n    }\n\n    @Override\n    public void parseHeader(String header, S sequence) {\n        sequence.setOriginalHeader(header);\n        String[] data = getHeaderValues(header);\n\n        if (data.length == 1) {\n            sequence.setAccession(new AccessionID(data[0]));\n        } else if (\"sp\".equalsIgnoreCase(data[0]) || \"tr\".equalsIgnoreCase(data[0])) {\n            if (\"sp\".equalsIgnoreCase(data[0])) {\n                sequence.setAnnotationType(AnnotationType.CURATED);\n            } else {\n                sequence.setAnnotationType(AnnotationType.PREDICTED);\n            }\n            sequence.setAccession(new AccessionID(data[1], DataSource.UNIPROT));\n            if (data.length > 2) {\n                sequence.setDescription(data[2]);\n            }\n        } else if (\"gi\".equalsIgnoreCase(data[0])) {\n            DataSource giSource = DataSource.UNKNOWN;\n            if (data.length >= 3) {\n                if (\"gb\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.GENBANK;\n                } else if (\"emb\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.ENA;\n                } else if (\"dbj\".equalsIgnoreCase(data[2])) {\n                    giSource = DataSource.DDBJ;\n                }\n                sequence.setAccession(new AccessionID(data[3], giSource));\n            } else {\n                sequence.setAccession(new AccessionID(header, giSource));\n            }\n        } else if (\"pir\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.NBRF));\n        } else if (\"prf\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.PRF));\n        } else if (\"pdb\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1] + \":\" + data[2], DataSource.PDB1));\n        } else if (data[0].startsWith(\"PDB\")) {\n            \n            int colonIdx = data[0].indexOf(':');\n            if (colonIdx != -1 && colonIdx + 1 < data[0].length()) {\n                String accession = data[0].substring(colonIdx + 1);\n                sequence.setAccession(new AccessionID(accession, DataSource.PDBe));\n            } else {\n                sequence.setAccession(new AccessionID(data[0], DataSource.PDBe));\n            }\n        } else if (data[0].indexOf(\":\") != -1 && data.length > 1 && \"PDBID\".equals(data[1])) {\n            sequence.setAccession(new AccessionID(data[0], DataSource.PDB2));\n        } else if (\"pat\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.PATENTS));\n        } else if (\"bbs\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.GENINFO));\n        } else if (\"gnl\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[2], DataSource.GENERAL));\n        } else if (\"ref\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.NCBI));\n        } else if (\"lcl\".equalsIgnoreCase(data[0])) {\n            sequence.setAccession(new AccessionID(data[1], DataSource.LOCAL));\n        } else {\n            sequence.setAccession(new AccessionID(data[0]));\n        }\n    }\n}\n"
    ]
}