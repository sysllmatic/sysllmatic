{
    "0": [
        "\npackage org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.nio.CharBuffer;\nimport java.util.HashSet;\nimport java.util.Set;\n\n\npublic class Utils {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(Utils.class);\n\n\t\n\tpublic final static double roundToDecimals(double d, int c) {\n\t\tif(c < 0) return d;\n\t\tdouble p = Math.pow(10,c);\n\t\td = d * p;\n\t\tdouble tmp = Math.round(d);\n\t\treturn tmp/p;\n\t}\n\n\t\n\tpublic final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet){\n\t\t\t\tfor(char c:sequence.toCharArray()){\n\t\t\t\t\tif(!cSet.contains(c)) return true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t}\n\n\t\n\tpublic final static int getNumberOfInvalidChar(String sequence,  Set<Character> cSet, boolean ignoreCase){\n\t\tchar[] cArray = ignoreCase ? sequence.toUpperCase().toCharArray(): sequence.toCharArray();\n\t\tfinal Set<Character> characterSet = cSet == null ?PeptideProperties.standardAASet: cSet ; \n\t\tint total = (int)CharBuffer.wrap(cArray).chars().filter(character -> !characterSet.contains((char)character)).count();\n\t\treturn total;\n\t}\n\n\t\n\tpublic final static String cleanSequence(String sequence, Set<Character> cSet){\n\t\tSet<Character> invalidCharSet = new HashSet<Character>();\n\t\tStringBuilder cleanSeq = new StringBuilder();\n\t\tif(cSet == null) cSet = PeptideProperties.standardAASet;\n\t\tfor(char c:sequence.toCharArray()){\n\t\t\tif(!cSet.contains(c)){\n\t\t\t\tcleanSeq.append(\"-\");\n\t\t\t\tinvalidCharSet.add(c);\n\t\t\t}else{\n\t\t\t\tcleanSeq.append(c);\n\t\t\t}\n\t\t}\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\treturn cleanSeq.toString();\n\t}\n\n\t\n\tpublic static final String checkSequence(String sequence){\n\t\treturn checkSequence(sequence, null);\n\t}\n\n\t\n\tpublic static final String checkSequence(String sequence, Set<Character> cSet){\n\t\tboolean containInvalid = false;\n\t\tif(cSet != null){\n\t\t\tcontainInvalid = sequence != null && doesSequenceContainInvalidChar(sequence, cSet);\n\t\t}else{\n\t\t\tcontainInvalid = sequence != null && doesSequenceContainInvalidChar(sequence, PeptideProperties.standardAASet);\n\t\t}\n\t\tif(containInvalid){\n\t\t\tString cSeq = cleanSequence(sequence, cSet);\n\t\t\t\n\t\t\t\n\t\t\treturn cSeq;\n\t\t}\n\t\telse{\n\t\t\treturn sequence;\n\t\t}\n\t}\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Set;\n\npublic class Utils {\n\n    private final static Logger logger = LoggerFactory.getLogger(Utils.class);\n\n    \n    private static final double[] POWERS_OF_TEN = {\n        1d, 10d, 100d, 1000d, 10000d, 100000d, 1000000d, 10000000d, 100000000d, 1000000000d,\n        10000000000d, 100000000000d, 1000000000000d, 10000000000000d, 100000000000000d, 1000000000000000d\n    };\n\n    public final static double roundToDecimals(double d, int c) {\n        if (c < 0) return d;\n        double p = (c < POWERS_OF_TEN.length) ? POWERS_OF_TEN[c] : Math.pow(10, c);\n        return Math.round(d * p) / p;\n    }\n\n    public final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet) {\n        if (sequence == null || cSet == null) return false;\n        int len = sequence.length();\n        for (int i = 0; i < len; i++) {\n            if (!cSet.contains(sequence.charAt(i))) return true;\n        }\n        return false;\n    }\n\n    public final static int getNumberOfInvalidChar(String sequence, Set<Character> cSet, boolean ignoreCase) {\n        if (sequence == null) return 0;\n        final Set<Character> characterSet = (cSet == null) ? PeptideProperties.standardAASet : cSet;\n        int count = 0;\n        int len = sequence.length();\n        for (int i = 0; i < len; i++) {\n            char c = sequence.charAt(i);\n            if (ignoreCase) c = Character.toUpperCase(c);\n            if (!characterSet.contains(c)) count++;\n        }\n        return count;\n    }\n\n    public final static String cleanSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        if (cSet == null) cSet = PeptideProperties.standardAASet;\n        int len = sequence.length();\n        StringBuilder cleanSeq = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            char c = sequence.charAt(i);\n            if (!cSet.contains(c)) {\n                cleanSeq.append('-');\n            } else {\n                cleanSeq.append(c);\n            }\n        }\n        return cleanSeq.toString();\n    }\n\n    public static final String checkSequence(String sequence) {\n        return checkSequence(sequence, null);\n    }\n\n    public static final String checkSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        Set<Character> setToUse = (cSet != null) ? cSet : PeptideProperties.standardAASet;\n        boolean containInvalid = doesSequenceContainInvalidChar(sequence, setToUse);\n        if (containInvalid) {\n            return cleanSequence(sequence, setToUse);\n        } else {\n            return sequence;\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.IntStream;\n\npublic class Utils {\n\n    private final static Logger logger = LoggerFactory.getLogger(Utils.class);\n\n    private static final double[] POWERS_OF_TEN = {\n        1d, 10d, 100d, 1000d, 10000d, 100000d, 1000000d, 10000000d, 100000000d, 1000000000d,\n        10000000000d, 100000000000d, 1000000000000d, 10000000000000d, 100000000000000d, 1000000000000000d\n    };\n    private static final int PARALLEL_THRESHOLD = 100_000;\n\n    private static Set<Character> ensureHashSet(Set<Character> cSet) {\n        if (cSet == null) return PeptideProperties.standardAASet;\n        \n        if (cSet instanceof HashSet) return cSet;\n        \n        return new HashSet<>(cSet);\n    }\n\n    public final static double roundToDecimals(double d, int c) {\n        if (c < 0) return d;\n        double p = (c < POWERS_OF_TEN.length) ? POWERS_OF_TEN[c] : Math.pow(10, c);\n        return Math.round(d * p) / p;\n    }\n\n    public final static boolean doesSequenceContainInvalidChar(String sequence, Set<Character> cSet) {\n        if (sequence == null) return false;\n        Set<Character> setToUse = ensureHashSet(cSet);\n        int len = sequence.length();\n        for (int i = 0; i < len; i++) {\n            if (!setToUse.contains(sequence.charAt(i))) return true;\n        }\n        return false;\n    }\n\n    public final static int getNumberOfInvalidChar(String sequence, Set<Character> cSet, boolean ignoreCase) {\n        if (sequence == null) return 0;\n        Set<Character> characterSet = ensureHashSet(cSet);\n        int len = sequence.length();\n        if (len > PARALLEL_THRESHOLD) {\n            \n            return (int) IntStream.range(0, len).parallel().map(i -> {\n                char c = sequence.charAt(i);\n                if (ignoreCase) c = Character.toUpperCase(c);\n                return characterSet.contains(c) ? 0 : 1;\n            }).sum();\n        } else {\n            int count = 0;\n            for (int i = 0; i < len; i++) {\n                char c = sequence.charAt(i);\n                if (ignoreCase) c = Character.toUpperCase(c);\n                if (!characterSet.contains(c)) count++;\n            }\n            return count;\n        }\n    }\n\n    public final static String cleanSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        Set<Character> setToUse = ensureHashSet(cSet);\n        int len = sequence.length();\n        if (len > PARALLEL_THRESHOLD) {\n            \n            char[] chars = sequence.toCharArray();\n            IntStream.range(0, len).parallel().forEach(i -> {\n                if (!setToUse.contains(chars[i])) {\n                    chars[i] = '-';\n                }\n            });\n            return new String(chars);\n        } else {\n            StringBuilder cleanSeq = new StringBuilder(len);\n            for (int i = 0; i < len; i++) {\n                char c = sequence.charAt(i);\n                if (!setToUse.contains(c)) {\n                    cleanSeq.append('-');\n                } else {\n                    cleanSeq.append(c);\n                }\n            }\n            return cleanSeq.toString();\n        }\n    }\n\n    public static final String checkSequence(String sequence) {\n        return checkSequence(sequence, null);\n    }\n\n    public static final String checkSequence(String sequence, Set<Character> cSet) {\n        if (sequence == null) return null;\n        Set<Character> setToUse = ensureHashSet(cSet);\n        boolean containInvalid = doesSequenceContainInvalidChar(sequence, setToUse);\n        if (containInvalid) {\n            return cleanSequence(sequence, setToUse);\n        } else {\n            return sequence;\n        }\n    }\n}\n"
    ]
}