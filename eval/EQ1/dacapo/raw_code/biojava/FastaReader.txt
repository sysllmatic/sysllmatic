{
    "0": [
        "\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n\tSequenceCreatorInterface<C> sequenceCreator;\n\tSequenceHeaderParserInterface<S,C> headerParser;\n\tBufferedReaderBytesRead br;\n\tInputStreamReader isr;\n\tFileInputStream fi = null;\n\tlong fileIndex = 0;\n\tlong sequenceIndex = 0;\n\tString line = \"\";\n\tString header= \"\";\n\n\t\n\tpublic FastaReader(InputStream is, SequenceHeaderParserInterface<S,C> headerParser,\n\t\t\t\t\t   SequenceCreatorInterface<C> sequenceCreator) {\n\t\tthis.headerParser = headerParser;\n\t\tisr = new InputStreamReader(is);\n\t\tthis.br = new BufferedReaderBytesRead(isr);\n\t\tthis.sequenceCreator = sequenceCreator;\n\t}\n\n\t\n\tpublic FastaReader(File file, SequenceHeaderParserInterface<S,C> headerParser,\n\t\t\t\t\t   SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n\t\tthis.headerParser = headerParser;\n\t\tfi = new FileInputStream(file);\n\t\tisr = new InputStreamReader(fi);\n\t\tthis.br = new BufferedReaderBytesRead(isr);\n\t\tthis.sequenceCreator = sequenceCreator;\n\t}\n\n\t\n\tpublic LinkedHashMap<String,S> process() throws IOException {\n\t\tLinkedHashMap<String,S> sequences = process(-1);\n\t\tclose();\n\n\t\treturn sequences;\n\t}\n\n\t\n\tpublic LinkedHashMap<String,S> process(int max) throws IOException {\n\n\n\t\tString line = \"\";\n\t\tif(this.line != null && this.line.length() > 0){\n\t\t\tline=this.line;\n\t\t}\n\t\tString header = \"\";\n\t\tif(this.header != null && this.header.length() > 0){\n\t\t\theader=this.header;\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint processedSequences=0;\n\t\tboolean keepGoing = true;\n\n\n\t\tLinkedHashMap<String,S> sequences = new LinkedHashMap<String,S>();\n\n\t\tdo {\n\t\t\tline = line.trim(); \n\t\t\tif (line.length() != 0) {\n\t\t\t\tif (line.startsWith(\">\")) {\n\n\t\t\t\t\tif (sb.length() > 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\tS sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n\t\t\t\t\t\t\theaderParser.parseHeader(header, sequence);\n\t\t\t\t\t\t\tsequences.put(sequence.getAccession().getID(),sequence);\n\t\t\t\t\t\t\tprocessedSequences++;\n\n\t\t\t\t\t\t} catch (CompoundNotFoundException e) {\n\t\t\t\t\t\t\tlogger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n\t\t\t\t\t\t\t\t\theader, e.getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsb.setLength(0); \n\t\t\t\t\t}\n\t\t\t\t\theader = line.substring(1);\n\t\t\t\t} else if (line.startsWith(\";\")) {\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tif(sb.length() == 0){\n\t\t\t\t\t\tsequenceIndex = fileIndex;\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(line);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfileIndex = br.getBytesRead();\n\n\t\t\tline = br.readLine();\n\n\t\t\tif (line == null) {\n\t\t\t\t\n\t\t\t\tif ( sb.length() == 0 && header.length() != 0 ) {\n\t\t\t\t\tlogger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n\t\t\t\t\tlogger.warn(\"header: {}\", header);\n\t\t\t\t\theader = null;\n\t\t\t\t} else if ( sb.length() > 0 ) {\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tS sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n\t\t\t\t\t\theaderParser.parseHeader(header, sequence);\n\t\t\t\t\t\tsequences.put(sequence.getAccession().getID(),sequence);\n\t\t\t\t\t\tprocessedSequences++;\n\t\t\t\t\t\theader = null;\n\t\t\t\t\t} catch (CompoundNotFoundException e) {\n\t\t\t\t\t\tlogger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n\t\t\t\t\t\t\t\theader, e.getMessage());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tkeepGoing = false;\n\t\t\t}\n\t\t\tif (max > -1 && processedSequences>=max) {\n\t\t\t\tkeepGoing=false;\n\t\t\t}\n\t\t} while (keepGoing);\n\n\t\tthis.line  = line;\n\t\tthis.header= header;\n\n\t\treturn max > -1 && sequences.isEmpty() ? null :  sequences;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tbr.close();\n\t\tisr.close();\n\t\t\n\t\tif (fi != null) {\n\t\t\tfi.close();\n\t\t}\n\t\tthis.line=this.header = null;\n\t}\n\t\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.LinkedHashMap;\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n\n    private final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    SequenceHeaderParserInterface<S, C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n    long fileIndex = 0;\n    long sequenceIndex = 0;\n    String line = \"\";\n    String header = \"\";\n\n    public FastaReader(InputStream is, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n        this.headerParser = headerParser;\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public LinkedHashMap<String, S> process() throws IOException {\n        LinkedHashMap<String, S> sequences = process(-1);\n        close();\n        return sequences;\n    }\n\n    public LinkedHashMap<String, S> process(int max) throws IOException {\n        \n        if (this.line != null && this.line.length() > 0) {\n            \n        } else {\n            this.line = \"\";\n        }\n        if (this.header != null && this.header.length() > 0) {\n            \n        } else {\n            this.header = \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        int processedSequences = 0;\n        boolean keepGoing = true;\n\n        LinkedHashMap<String, S> sequences = new LinkedHashMap<String, S>();\n\n        do {\n            \n            String currLine = this.line;\n            int currLineLen = currLine.length();\n            if (currLineLen != 0) {\n                \n                char firstChar = currLine.charAt(0);\n                if (Character.isWhitespace(firstChar)) {\n                    currLine = currLine.trim();\n                    currLineLen = currLine.length();\n                }\n\n                if (currLineLen != 0) {\n                    if (currLine.charAt(0) == '>') {\n                        if (sb.length() > 0) {\n                            try {\n                                @SuppressWarnings(\"unchecked\")\n                                S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                                headerParser.parseHeader(this.header, sequence);\n                                sequences.put(sequence.getAccession().getID(), sequence);\n                                processedSequences++;\n                            } catch (CompoundNotFoundException e) {\n                                logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                        this.header, e.getMessage());\n                            }\n                            sb.setLength(0); \n                        }\n                        \n                        this.header = currLine.substring(1);\n                    } else if (currLine.charAt(0) == ';') {\n                        \n                    } else {\n                        if (sb.length() == 0) {\n                            sequenceIndex = fileIndex;\n                        }\n                        sb.append(currLine);\n                    }\n                }\n            }\n            fileIndex = br.getBytesRead();\n            this.line = br.readLine();\n            if (this.line == null) {\n                \n                if (sb.length() == 0 && this.header.length() != 0) {\n                    logger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n                    logger.warn(\"header: {}\", this.header);\n                    this.header = null;\n                } else if (sb.length() > 0) {\n                    try {\n                        @SuppressWarnings(\"unchecked\")\n                        S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(this.header, sequence);\n                        sequences.put(sequence.getAccession().getID(), sequence);\n                        processedSequences++;\n                        this.header = null;\n                    } catch (CompoundNotFoundException e) {\n                        logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                this.header, e.getMessage());\n                    }\n                }\n                keepGoing = false;\n            }\n            if (max > -1 && processedSequences >= max) {\n                keepGoing = false;\n            }\n        } while (keepGoing);\n\n        \n        return max > -1 && sequences.isEmpty() ? null : sequences;\n    }\n\n    public void close() throws IOException {\n        br.close();\n        isr.close();\n        if (fi != null) {\n            fi.close();\n        }\n        this.line = this.header = null;\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.LinkedHashMap;\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n    private final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    SequenceHeaderParserInterface<S, C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n    long fileIndex = 0;\n    long sequenceIndex = 0;\n    String line = \"\";\n    String header = \"\";\n\n    public FastaReader(InputStream is, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n        this.headerParser = headerParser;\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public LinkedHashMap<String, S> process() throws IOException {\n        LinkedHashMap<String, S> sequences = process(-1);\n        close();\n        return sequences;\n    }\n\n    public LinkedHashMap<String, S> process(int max) throws IOException {\n        \n        StringBuilder sb = new StringBuilder();\n        int processedSequences = 0;\n        LinkedHashMap<String, S> sequences = new LinkedHashMap<>();\n        boolean eof = false;\n\n        \n        if (this.line == null) this.line = \"\";\n        if (this.header == null) this.header = \"\";\n\n        while (!eof) {\n            String currLine = this.line;\n            int currLineLen = currLine.length();\n            if (currLineLen != 0) {\n                char firstChar = currLine.charAt(0);\n                if (Character.isWhitespace(firstChar)) {\n                    currLine = currLine.trim();\n                    currLineLen = currLine.length();\n                }\n                if (currLineLen != 0) {\n                    if (currLine.charAt(0) == '>') {\n                        if (sb.length() > 0) {\n                            try {\n                                @SuppressWarnings(\"unchecked\")\n                                S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                                headerParser.parseHeader(this.header, sequence);\n                                sequences.put(sequence.getAccession().getID(), sequence);\n                                processedSequences++;\n                            } catch (CompoundNotFoundException e) {\n                                logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                        this.header, e.getMessage());\n                            }\n                            sb.setLength(0);\n                        }\n                        this.header = currLine.substring(1);\n                    } else if (currLine.charAt(0) != ';') {\n                        if (sb.length() == 0) {\n                            sequenceIndex = fileIndex;\n                        }\n                        sb.append(currLine);\n                    } \n                }\n            }\n            fileIndex = br.getBytesRead();\n            this.line = br.readLine();\n            if (this.line == null) {\n                eof = true;\n                if (sb.length() == 0 && this.header.length() != 0) {\n                    logger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n                    logger.warn(\"header: {}\", this.header);\n                    this.header = null;\n                } else if (sb.length() > 0) {\n                    try {\n                        @SuppressWarnings(\"unchecked\")\n                        S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(this.header, sequence);\n                        sequences.put(sequence.getAccession().getID(), sequence);\n                        processedSequences++;\n                        this.header = null;\n                    } catch (CompoundNotFoundException e) {\n                        logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                this.header, e.getMessage());\n                    }\n                }\n            }\n            if (max > -1 && processedSequences >= max) {\n                break;\n            }\n        }\n        return (max > -1 && sequences.isEmpty()) ? null : sequences;\n    }\n\n    public void close() throws IOException {\n        IOException ex = null;\n        try { if (br != null) br.close(); } catch (IOException e) { ex = e; }\n        try { if (isr != null) isr.close(); } catch (IOException e) { ex = e; }\n        try { if (fi != null) fi.close(); } catch (IOException e) { ex = e; }\n        this.line = null;\n        this.header = null;\n        if (ex != null) throw ex;\n    }\n}\n"
    ]
}