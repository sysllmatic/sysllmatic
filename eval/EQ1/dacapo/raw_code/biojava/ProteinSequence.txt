{
    "0": [
        "\npackage org.biojava.nbio.core.sequence;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.compound.*;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.io.DNASequenceCreator;\nimport org.biojava.nbio.core.sequence.io.FastaReader;\nimport org.biojava.nbio.core.sequence.io.PlainFastaHeaderParser;\nimport org.biojava.nbio.core.sequence.location.InsdcParser;\nimport org.biojava.nbio.core.sequence.location.template.Location;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.ProxySequenceReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\n\n\npublic class ProteinSequence extends AbstractSequence<AminoAcidCompound> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(ProteinSequence.class);\n\n\t\n\t\n\tpublic ProteinSequence(String seqString) throws CompoundNotFoundException {\n\t\tthis(seqString, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t}\n\n\t\n\tpublic ProteinSequence(String seqString, CompoundSet<AminoAcidCompound> compoundSet) throws CompoundNotFoundException {\n\t\tsuper(seqString, compoundSet);\n\t}\n\n\t\n\tpublic ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader) {\n\t\tthis(proxyLoader, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t}\n\n\t\n\tpublic ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader, CompoundSet<AminoAcidCompound> compoundSet) {\n\t\tsuper(proxyLoader, compoundSet);\n\n\t\t\n\t\t\n\t\tList<FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound>> CDSFeatures = getFeaturesByType(\"CDS\");\n\n\t\t\n\t\tif (CDSFeatures.size() == 1) {\n\t\t\tQualifier codedBy = CDSFeatures.get(0).getQualifiers().get(\"coded_by\").get(0);\n\n\t\t\tif (codedBy != null) {\n\t\t\t\tString codedBySeq = codedBy.getValue();\n\n\t\t\t\tInsdcParser parser = new InsdcParser(DataSource.GENBANK);\n\t\t\t\tLocation location = parser.parse(codedBySeq);\n\n\t\t\t\ttry {\n\t\t\t\t\tDNASequence dnaSeq = new DNASequence(getSequence(location), DNACompoundSet.getDNACompoundSet());\n\t\t\t\t\tsetParentDNASequence(dnaSeq, location.getStart().getPosition(), location.getEnd().getPosition());\n\t\t\t\t} catch (CompoundNotFoundException e) {\n\t\t\t\t\t\n\t\t\t\t\tlogger.error(\"Could not add 'coded_by' parent DNA location feature, unrecognised compounds found in DNA sequence: {}\", e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t\n\t\n\t\n\tpublic void setParentDNASequence(AbstractSequence<NucleotideCompound> parentDNASequence, Integer begin, Integer end) {\n\t\tthis.setParentSequence(parentDNASequence);\n\t\tsetBioBegin(begin);\n\t\tsetBioEnd(end);\n\t}\n\n\tprivate DNASequence getRawParentSequence(String accessId) throws IOException {\n\t\tString seqUrlTemplate = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=%s&rettype=fasta&retmode=text\";\n\t\tURL url = new URL(String.format(seqUrlTemplate, accessId));\n\n\t\tlogger.trace(\"Getting parent DNA sequence from URL: {}\", url.toString());\n\n\t\tInputStream is = url.openConnection().getInputStream();\n\n\t\tFastaReader<DNASequence, NucleotideCompound> parentReader\n\t\t\t\t= new FastaReader<DNASequence, NucleotideCompound>(is,\n\t\t\t\t\t\tnew PlainFastaHeaderParser<DNASequence, NucleotideCompound>(),\n\t\t\t\t\t\tnew DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet()));\n\t\tLinkedHashMap<String, DNASequence> seq = parentReader.process();\n\n\t\tDNASequence parentSeq = null;\n\t\tif (seq.size() == 1) {\n\t\t\tparentSeq = seq.values().iterator().next();\n\t\t}\n\t\tis.close();\n\n\t\treturn parentSeq;\n\t}\n\n\tprivate String getSequence(Location cdna) {\n\t\tDNASequence rawParent;\n\t\tif (!cdna.isComplex()) {\n\t\t\ttry {\n\t\t\t\trawParent = getRawParentSequence(cdna.getAccession().getID());\n\t\t\t\treturn cdna.getSubSequence(rawParent).getSequenceAsString();\n\t\t\t} catch (IOException e) {\n\t\t\t\t\n\t\t\t\tlogger.error(\"Caught IOException when getting DNA sequence for id {}. Error: {}\", cdna.getAccession().getID(), e.getMessage());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tfor (Location sub : cdna.getSubLocations()) {\n\t\t\t\tString sebStr = getSequence(sub);\n\t\t\t\tsb.append((sebStr == null ? \"\" : sebStr));\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.core.sequence;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.compound.*;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.io.DNASequenceCreator;\nimport org.biojava.nbio.core.sequence.io.FastaReader;\nimport org.biojava.nbio.core.sequence.io.PlainFastaHeaderParser;\nimport org.biojava.nbio.core.sequence.location.InsdcParser;\nimport org.biojava.nbio.core.sequence.location.template.Location;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.ProxySequenceReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\n\npublic class ProteinSequence extends AbstractSequence<AminoAcidCompound> {\n\n    private final static Logger logger = LoggerFactory.getLogger(ProteinSequence.class);\n\n    \n    private static final Map<String, DNASequence> parentSequenceCache = new ConcurrentHashMap<>();\n\n    public ProteinSequence(String seqString) throws CompoundNotFoundException {\n        this(seqString, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    }\n\n    public ProteinSequence(String seqString, CompoundSet<AminoAcidCompound> compoundSet) throws CompoundNotFoundException {\n        super(seqString, compoundSet);\n    }\n\n    public ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader) {\n        this(proxyLoader, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    }\n\n    public ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader, CompoundSet<AminoAcidCompound> compoundSet) {\n        super(proxyLoader, compoundSet);\n\n        List<FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound>> CDSFeatures = getFeaturesByType(\"CDS\");\n\n        if (CDSFeatures.size() == 1) {\n            Qualifier codedBy = CDSFeatures.get(0).getQualifiers().get(\"coded_by\").get(0);\n\n            if (codedBy != null) {\n                String codedBySeq = codedBy.getValue();\n                InsdcParser parser = new InsdcParser(DataSource.GENBANK);\n                Location location = parser.parse(codedBySeq);\n\n                try {\n                    DNASequence dnaSeq = new DNASequence(getSequence(location), DNACompoundSet.getDNACompoundSet());\n                    setParentDNASequence(dnaSeq, location.getStart().getPosition(), location.getEnd().getPosition());\n                } catch (CompoundNotFoundException e) {\n                    logger.error(\"Could not add 'coded_by' parent DNA location feature, unrecognised compounds found in DNA sequence: {}\", e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void setParentDNASequence(AbstractSequence<NucleotideCompound> parentDNASequence, Integer begin, Integer end) {\n        this.setParentSequence(parentDNASequence);\n        setBioBegin(begin);\n        setBioEnd(end);\n    }\n\n    \n    private DNASequence getRawParentSequence(String accessId) throws IOException {\n        \n        DNASequence cachedSeq = parentSequenceCache.get(accessId);\n        if (cachedSeq != null) {\n            return cachedSeq;\n        }\n\n        String seqUrlTemplate = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=%s&rettype=fasta&retmode=text\";\n        URL url = new URL(String.format(seqUrlTemplate, accessId));\n\n        logger.trace(\"Getting parent DNA sequence from URL: {}\", url.toString());\n\n        InputStream is = url.openConnection().getInputStream();\n\n        FastaReader<DNASequence, NucleotideCompound> parentReader\n                = new FastaReader<DNASequence, NucleotideCompound>(is,\n                        new PlainFastaHeaderParser<DNASequence, NucleotideCompound>(),\n                        new DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet()));\n        LinkedHashMap<String, DNASequence> seq = parentReader.process();\n\n        DNASequence parentSeq = null;\n        if (seq.size() == 1) {\n            parentSeq = seq.values().iterator().next();\n        }\n        is.close();\n        if (parentSeq != null) {\n            \n            parentSequenceCache.put(accessId, parentSeq);\n        }\n        return parentSeq;\n    }\n\n    private String getSequence(Location cdna) {\n        if (!cdna.isComplex()) {\n            try {\n                \n                DNASequence rawParent = getRawParentSequence(cdna.getAccession().getID());\n                return cdna.getSubSequence(rawParent).getSequenceAsString();\n            } catch (IOException e) {\n                logger.error(\"Caught IOException when getting DNA sequence for id {}. Error: {}\", cdna.getAccession().getID(), e.getMessage());\n                return null;\n            }\n        } else {\n            \n            StringBuilder sb = new StringBuilder();\n            for (Location sub : cdna.getSubLocations()) {\n                String sebStr = getSequence(sub);\n                sb.append((sebStr == null ? \"\" : sebStr));\n            }\n            return sb.toString();\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.core.sequence;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.compound.*;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.io.DNASequenceCreator;\nimport org.biojava.nbio.core.sequence.io.FastaReader;\nimport org.biojava.nbio.core.sequence.io.PlainFastaHeaderParser;\nimport org.biojava.nbio.core.sequence.location.InsdcParser;\nimport org.biojava.nbio.core.sequence.location.template.Location;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.ProxySequenceReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\n\n\n\n\n\npublic class ProteinSequence extends AbstractSequence<AminoAcidCompound> {\n\n    private final static Logger logger = LoggerFactory.getLogger(ProteinSequence.class);\n\n    \n    \n    private static final int CACHE_MAX_SIZE = 1000;\n    private static final Map<String, DNASequence> parentSequenceCache = new LinkedHashMap<String, DNASequence>(16, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, DNASequence> eldest) {\n            return size() > CACHE_MAX_SIZE;\n        }\n    };\n    private static final Object cacheLock = new Object();\n    \n\n    public ProteinSequence(String seqString) throws CompoundNotFoundException {\n        this(seqString, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    }\n\n    public ProteinSequence(String seqString, CompoundSet<AminoAcidCompound> compoundSet) throws CompoundNotFoundException {\n        super(seqString, compoundSet);\n    }\n\n    public ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader) {\n        this(proxyLoader, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    }\n\n    public ProteinSequence(ProxySequenceReader<AminoAcidCompound> proxyLoader, CompoundSet<AminoAcidCompound> compoundSet) {\n        super(proxyLoader, compoundSet);\n\n        List<FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound>> CDSFeatures = getFeaturesByType(\"CDS\");\n\n        if (CDSFeatures.size() == 1) {\n            FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> feature = CDSFeatures.get(0);\n            Map<String, List<Qualifier>> qualifiers = feature.getQualifiers();\n            List<Qualifier> codedByList = qualifiers != null ? qualifiers.get(\"coded_by\") : null;\n            Qualifier codedBy = (codedByList != null && !codedByList.isEmpty()) ? codedByList.get(0) : null;\n\n            if (codedBy != null) {\n                String codedBySeq = codedBy.getValue();\n                InsdcParser parser = new InsdcParser(DataSource.GENBANK);\n                Location location = parser.parse(codedBySeq);\n\n                try {\n                    DNASequence dnaSeq = new DNASequence(getSequence(location), DNACompoundSet.getDNACompoundSet());\n                    setParentDNASequence(dnaSeq, location.getStart().getPosition(), location.getEnd().getPosition());\n                } catch (CompoundNotFoundException e) {\n                    logger.error(\"Could not add 'coded_by' parent DNA location feature, unrecognised compounds found in DNA sequence: {}\", e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void setParentDNASequence(AbstractSequence<NucleotideCompound> parentDNASequence, Integer begin, Integer end) {\n        this.setParentSequence(parentDNASequence);\n        setBioBegin(begin);\n        setBioEnd(end);\n    }\n\n    private DNASequence getRawParentSequence(String accessId) throws IOException {\n        \n        DNASequence cachedSeq;\n        synchronized (cacheLock) {\n            cachedSeq = parentSequenceCache.get(accessId);\n            if (cachedSeq != null) {\n                return cachedSeq;\n            }\n        }\n        String seqUrlTemplate = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=%s&rettype=fasta&retmode=text\";\n        URL url = new URL(String.format(seqUrlTemplate, accessId));\n\n        logger.trace(\"Getting parent DNA sequence from URL: {}\", url.toString());\n\n        \n        InputStream is = new BufferedInputStream(url.openConnection().getInputStream());\n        try {\n            FastaReader<DNASequence, NucleotideCompound> parentReader\n                    = new FastaReader<DNASequence, NucleotideCompound>(is,\n                            new PlainFastaHeaderParser<DNASequence, NucleotideCompound>(),\n                            new DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet()));\n            LinkedHashMap<String, DNASequence> seq = parentReader.process();\n\n            DNASequence parentSeq = null;\n            if (seq.size() == 1) {\n                parentSeq = seq.values().iterator().next();\n            }\n            if (parentSeq != null) {\n                synchronized (cacheLock) {\n                    parentSequenceCache.put(accessId, parentSeq);\n                }\n            }\n            return parentSeq;\n        } finally {\n            is.close();\n        }\n    }\n\n    private String getSequence(Location cdna) {\n        if (!cdna.isComplex()) {\n            try {\n                DNASequence rawParent = getRawParentSequence(cdna.getAccession().getID());\n                return cdna.getSubSequence(rawParent).getSequenceAsString();\n            } catch (IOException e) {\n                logger.error(\"Caught IOException when getting DNA sequence for id {}. Error: {}\", cdna.getAccession().getID(), e.getMessage());\n                return null;\n            }\n        } else {\n            StringBuilder sb = new StringBuilder();\n            for (Location sub : cdna.getSubLocations()) {\n                String sebStr = getSequence(sub);\n                sb.append((sebStr == null ? \"\" : sebStr));\n            }\n            return sb.toString();\n        }\n    }\n}\n"
    ]
}