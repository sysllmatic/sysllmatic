{
    "0": [
        "\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.CaseFreeAminoAcidCompoundSet;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.*;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n\npublic class CommandPrompt {\n\n\t\n\tpublic static void main(String[] args) throws Exception{\n\t\trun(args);\n\t}\n\n\tprivate static AminoAcidCompositionTable checkForValidityAndObtainAATable(String inputLocation, int propertyListSize, String aminoAcidCompositionLocation,\n\t\t\tString elementMassLocation) throws Exception{\n\t\tif(inputLocation == null) {\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please do provide location of input file.\");\n\t\t}\n\t\tif(propertyListSize == 0){\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please at least specify a property to compute.\");\n\t\t}\n\t\tAminoAcidCompositionTable aaTable = null;\n\t\tif(aminoAcidCompositionLocation != null && elementMassLocation == null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation));\n\t\t}else if(aminoAcidCompositionLocation != null && elementMassLocation != null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation, elementMassLocation));\n\t\t}else if(aminoAcidCompositionLocation == null && elementMassLocation != null){\n\t\t\tthrow new Error(\"You have define the location of Element Mass XML file. Please also define the location of Amino Acid Composition XML file\");\n\t\t}\n\t\treturn aaTable;\n\t}\n\n\tprivate static void readInputAndGenerateOutput(String outputLocation, List<Character> propertyList, List<Character> specificList,\n\t\t\tString delimiter, String inputLocation, AminoAcidCompositionTable aaTable, int decimalPlace) throws Exception{\n\t\tPrintStream output;\n\t\tif(outputLocation != null)\n\t\t\toutput = new PrintStream(new File(outputLocation));\n\t\telse\n\t\t\toutput = System.out;\n\t\tprintHeader(output, propertyList, specificList, delimiter);\n\t\tLinkedHashMap<String, ProteinSequence> a = readInputFile(inputLocation, aaTable);\n\t\t\n\t\tint count = 0;\n\t\tint fivePercent = a.entrySet().size()/20;\n\t\tfor(Entry<String, ProteinSequence> entry:a.entrySet()){\n\t\t\tcompute(output, entry.getValue().getOriginalHeader(), entry.getValue().getSequenceAsString().trim(), delimiter, aaTable, propertyList, specificList,\n\t\t\t\t\tdecimalPlace);\n\t\t\tcount++;\n\t\t\tif (fivePercent == 0)\n\t\t\t\tSystem.out.print(\"Processing sequences: \"+count+\"\\r\");\n\t\t\telse if (count % fivePercent == 0) {\n\t\t\t\tint percentage = 5 * (count / fivePercent);\n\t\t\t\tSystem.out.print(\"Processing sequences: \"+percentage+\"%\\r\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t\toutput.close();\n\t}\n\n\tpublic static void run(String[] args) throws Exception{\n\t\t\n\t\tList<Character> propertyList = new ArrayList<Character>();\n\t\tList<Character> specificList = new ArrayList<Character>();\n\t\tString inputLocation = null;\n\t\tString outputLocation = null;\n\t\tString aminoAcidCompositionLocation = null;\n\t\tString elementMassLocation = null;\n\t\tString delimiter = \",\";\n\t\tint decimalPlace = 4;\n\n\t\tfor(int i = 0; i < args.length; i++){\n\t\t\tif(args[i].charAt(0) != '-' || args[i].length() != 2){\n\t\t\t\tshowHelp();\n\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t}else{\n\t\t\t\tswitch(args[i].charAt(1)){\n\t\t\t\t\n\t\t\t\tcase 'i': inputLocation = args[++i]; break;\n\t\t\t\t\n\t\t\t\tcase 'o': outputLocation = args[++i]; break;\n\t\t\t\tcase 'f':\n\t\t\t\t\ti++;\n\t\t\t\t\tif(\"csv\".equalsIgnoreCase(args[i])) delimiter = \",\";\n\t\t\t\t\telse if(\"tsv\".equalsIgnoreCase(args[i])) delimiter = \"\\t\";\n\t\t\t\t\telse throw new Error(\"Invalid value for -f: \" + args[i] + \". Please choose either csv or tsv only.\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'x': aminoAcidCompositionLocation = args[++i]; break;\n\t\t\t\tcase 'y': elementMassLocation = args[++i]; break;\n\t\t\t\tcase 'd': decimalPlace = Integer.parseInt(args[++i]); break;\n\t\t\t\t\n\t\t\t\tcase 'a':\n\t\t\t\t\tpropertyList.add('1');\n\t\t\t\t\tpropertyList.add('2');\n\t\t\t\t\tpropertyList.add('3');\n\t\t\t\t\tpropertyList.add('4');\n\t\t\t\t\tpropertyList.add('5');\n\t\t\t\t\tpropertyList.add('6');\n\t\t\t\t\tpropertyList.add('7');\n\t\t\t\t\tpropertyList.add('8');\n\t\t\t\t\tpropertyList.add('9');\n\t\t\t\t\tbreak;\n\t\t\t\tcase '1': propertyList.add('1'); break;\n\t\t\t\tcase '2': propertyList.add('2'); break;\n\t\t\t\tcase '3': propertyList.add('3'); break;\n\t\t\t\tcase '4': propertyList.add('4'); break;\n\t\t\t\tcase '5': propertyList.add('5'); break;\n\t\t\t\tcase '6': propertyList.add('6'); break;\n\t\t\t\tcase '7': propertyList.add('7'); break;\n\t\t\t\tcase '8': propertyList.add('8'); break;\n\t\t\t\tcase '9': propertyList.add('9'); break;\n\t\t\t\tcase '0':\n\t\t\t\t\tpropertyList.add('0');\n\t\t\t\t\ti++;\n\t\t\t\t\tif(args[i].length() != 1) throw new Error(\"Invalid value: \" + args[i] + \". Amino Acid Symbol should be of single character\");\n\t\t\t\t\tspecificList.add(args[i].toUpperCase().charAt(0));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tshowHelp();\n\t\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tAminoAcidCompositionTable aaTable = checkForValidityAndObtainAATable(inputLocation, propertyList.size(), aminoAcidCompositionLocation,\n\t\t\t\telementMassLocation);\n\n\t\t\n\t\treadInputAndGenerateOutput(outputLocation, propertyList, specificList, delimiter, inputLocation, aaTable, decimalPlace);\n\t}\n\n\tprivate static LinkedHashMap<String, ProteinSequence> readInputFile(String inputLocation, AminoAcidCompositionTable aaTable) throws Exception{\n\t\tFileInputStream inStream = new FileInputStream(inputLocation);\n\t\tCompoundSet<AminoAcidCompound>\tset;\n\t\tif(aaTable == null){\n\t\t\tset = CaseFreeAminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tset = aaTable.getAminoAcidCompoundSet();\n\t\t}\n\t\tLinkedHashMap<String, ProteinSequence> ret;\n\t\tif ( inputLocation.toLowerCase().contains(\".gb\")) {\n\t\t\tGenbankReader<ProteinSequence, AminoAcidCompound> genbankReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\t\tinStream, new GenericGenbankHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = genbankReader.process();\n\n\n\t\t} else {\n\t\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\t\tinStream, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = fastaReader.process();\n\n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic enum PropertyName{MolecularWeight, Absorbance_True, Absorbance_False, ExtinctionCoefficient_True, ExtinctionCoefficient_False,\n\t\tInstabilityIndex, ApliphaticIndex, AverageHydropathyValue, IsoelectricPoint, NetCharge_pH_7, A, R,\n\t\tN, D, C, E, Q, G, H, I, L,\n\t\tK, M, F, P, S, T, W, Y, V};\n\n\tprivate static void printHeader(PrintStream output, List<Character> propertyList, List<Character> specificList, String delimiter) throws IOException{\n\t\tint specificCount = 0;\n\t\t\n\t\tList<String> sList = new ArrayList<String>();\n\t\tsList.add(\"SequenceName\");\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1': sList.add(PropertyName.MolecularWeight.toString()); break;\n\t\t\tcase '2': sList.add(PropertyName.Absorbance_True.toString()); sList.add(PropertyName.Absorbance_False.toString()); break;\n\t\t\tcase '3': sList.add(PropertyName.ExtinctionCoefficient_True.toString()); sList.add(PropertyName.ExtinctionCoefficient_False.toString()); break;\n\t\t\tcase '4': sList.add(PropertyName.InstabilityIndex.toString()); break;\n\t\t\tcase '5': sList.add(PropertyName.ApliphaticIndex.toString()); break;\n\t\t\tcase '6': sList.add(PropertyName.AverageHydropathyValue.toString()); break;\n\t\t\tcase '7': sList.add(PropertyName.IsoelectricPoint.toString()); break;\n\t\t\tcase '8': sList.add(PropertyName.NetCharge_pH_7.toString()); break;\n\t\t\tcase '9':\n\t\t\t\tsList.add(PropertyName.A.toString()); sList.add(PropertyName.R.toString());\n\t\t\t\tsList.add(PropertyName.N.toString()); sList.add(PropertyName.D.toString());\n\t\t\t\tsList.add(PropertyName.C.toString()); sList.add(PropertyName.E.toString());\n\t\t\t\tsList.add(PropertyName.Q.toString()); sList.add(PropertyName.G.toString());\n\t\t\t\tsList.add(PropertyName.H.toString()); sList.add(PropertyName.I.toString());\n\t\t\t\tsList.add(PropertyName.L.toString()); sList.add(PropertyName.K.toString());\n\t\t\t\tsList.add(PropertyName.M.toString()); sList.add(PropertyName.F.toString());\n\t\t\t\tsList.add(PropertyName.P.toString()); sList.add(PropertyName.S.toString());\n\t\t\t\tsList.add(PropertyName.T.toString()); sList.add(PropertyName.W.toString());\n\t\t\t\tsList.add(PropertyName.Y.toString()); sList.add(PropertyName.V.toString());\n\t\t\t\tbreak;\n\t\t\tcase '0': sList.add(\"\" + specificList.get(specificCount++)); break;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < sList.size(); i++){\n\t\t\tif(i != 0) output.print(delimiter);\n\t\t\toutput.print(sList.get(i));\n\t\t}\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void compute(PrintStream output, String header, String sequence, String delimiter,\n\t\t\tAminoAcidCompositionTable aaTable, List<Character> propertyList, List<Character> specificList, int decimalPlace) throws CompoundNotFoundException{\n\t\t\n\t\tProteinSequence pSequence;\n\t\tCompoundSet<AminoAcidCompound> aaSet;\n\t\tif(aaTable != null){\n\t\t\tsequence = Utils.checkSequence(sequence, aaTable.getSymbolSet());\n\t\t\tpSequence = new ProteinSequence(sequence, aaTable.getAminoAcidCompoundSet());\n\t\t\taaSet = aaTable.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tsequence = Utils.checkSequence(sequence);\n\t\t\tpSequence = new ProteinSequence(sequence);\n\t\t\taaSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}\n\t\tIPeptideProperties pp = new PeptidePropertiesImpl();\n\n\t\tint specificCount = 0;\n\t\tList<Double> dList = new ArrayList<Double>();\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1':\n\t\t\t\tif(aaTable == null)\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\telse\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, true));\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, true));\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '4': dList.add(pp.getInstabilityIndex(pSequence)); break;\n\t\t\tcase '5': dList.add(pp.getApliphaticIndex(pSequence)); break;\n\t\t\tcase '6': dList.add(pp.getAvgHydropathy(pSequence)); break;\n\t\t\tcase '7': dList.add(pp.getIsoelectricPoint(pSequence)); break;\n\t\t\tcase '8': dList.add(pp.getNetCharge(pSequence)); break;\n\t\t\tcase '9':\n\t\t\t\tMap<AminoAcidCompound, Double> aaCompound2Double = pp.getAAComposition(pSequence);\n\t\t\t\t\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.A));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.R));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.N));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.D));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.C));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.E));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Q));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.G));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.H));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.I));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.L));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.K));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.M));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.F));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.P));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.S));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.T));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.W));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Y));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.V));\n\t\t\t\tbreak;\n\t\t\tcase '0': dList.add(pp.getEnrichment(pSequence, aaSet.getCompoundForString(\"\" + specificList.get(specificCount++)))); break;\n\t\t\t}\n\t\t}\n\t\toutput.print(header.replace(delimiter, \"_\"));\n\t\tdList.stream().forEach(item -> output.print(delimiter + Utils.roundToDecimals(item, decimalPlace)));\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void showHelp(){\n\t\tSystem.err.println(\"NAME\");\n\t\tSystem.err.println(\"\\tAn executable to generate physico-chemical properties of protein sequences.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"EXAMPLES\");\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -a\");\n\t\tSystem.err.println(\"\\t\\tGenerates all possible properties.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -1 -3 -7\");\n\t\tSystem.err.println(\"\\t\\tGenerates only molecular weight, extinction coefficient and isoelectric point.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -0 A -0 N -1\");\n\t\tSystem.err.println(\"\\t\\tGenerates composition of two specific amino acid symbol and molecular weight.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"OPTIONS\");\n\t\tSystem.err.println(\"\\tRequired\");\n\t\tSystem.err.println(\"\\t\\t-i location of input FASTA file\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tOptional\");\n\t\tSystem.err.println(\"\\t\\t-o location of output file [standard output (default)]\");\n\t\tSystem.err.println(\"\\t\\t-f output format [csv (default) or tsv]\");\n\t\tSystem.err.println(\"\\t\\t-x location of Amino Acid Composition XML file for defining amino acid composition\");\n\t\tSystem.err.println(\"\\t\\t-y location of Element Mass XML file for defining mass of elements\");\n\t\tSystem.err.println(\"\\t\\t-d number of decimals (int) [4 (default)]\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tProvide at least one of them\");\n\t\tSystem.err.println(\"\\t\\t-a compute properties of option 1-9\");\n\t\tSystem.err.println(\"\\t\\t-1 compute molecular weight\");\n\t\tSystem.err.println(\"\\t\\t-2 compute absorbance\");\n\t\tSystem.err.println(\"\\t\\t-3 compute extinction coefficient\");\n\t\tSystem.err.println(\"\\t\\t-4 compute instability index\");\n\t\tSystem.err.println(\"\\t\\t-5 compute apliphatic index\");\n\t\tSystem.err.println(\"\\t\\t-6 compute average hydropathy value\");\n\t\tSystem.err.println(\"\\t\\t-7 compute isoelectric point\");\n\t\tSystem.err.println(\"\\t\\t-8 compute net charge at pH 7\");\n\t\tSystem.err.println(\"\\t\\t-9 compute composition of 20 standard amino acid (A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\");\n\t\tSystem.err.println(\"\\t\\t-0 compute composition of specific amino acid symbol\");\n\t\tSystem.err.println();\n\t}\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.CaseFreeAminoAcidCompoundSet;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.*;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class CommandPrompt {\n\n    public static void main(String[] args) throws Exception{\n        run(args);\n    }\n\n    private static AminoAcidCompositionTable checkForValidityAndObtainAATable(String inputLocation, int propertyListSize, String aminoAcidCompositionLocation,\n            String elementMassLocation) throws Exception{\n        if(inputLocation == null) {\n            showHelp();\n            throw new Error(\"Please do provide location of input file.\");\n        }\n        if(propertyListSize == 0){\n            showHelp();\n            throw new Error(\"Please at least specify a property to compute.\");\n        }\n        AminoAcidCompositionTable aaTable = null;\n        if(aminoAcidCompositionLocation != null && elementMassLocation == null){\n            aaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation));\n        }else if(aminoAcidCompositionLocation != null && elementMassLocation != null){\n            aaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation, elementMassLocation));\n        }else if(aminoAcidCompositionLocation == null && elementMassLocation != null){\n            throw new Error(\"You have define the location of Element Mass XML file. Please also define the location of Amino Acid Composition XML file\");\n        }\n        return aaTable;\n    }\n\n    private static void readInputAndGenerateOutput(String outputLocation, List<Character> propertyList, List<Character> specificList,\n            String delimiter, String inputLocation, AminoAcidCompositionTable aaTable, int decimalPlace) throws Exception{\n        PrintStream output;\n        boolean closeOutput = false;\n        if(outputLocation != null) {\n            output = new PrintStream(new File(outputLocation));\n            closeOutput = true;\n        } else {\n            output = System.out;\n        }\n        printHeader(output, propertyList, specificList, delimiter);\n        LinkedHashMap<String, ProteinSequence> a = readInputFile(inputLocation, aaTable);\n\n        int count = 0;\n        int fivePercent = a.entrySet().size()/20;\n\n        \n        IPeptideProperties pp = new PeptidePropertiesImpl();\n        ArrayList<Double> dList = new ArrayList<Double>(40); \n        StringBuilder rowBuilder = new StringBuilder(4096);\n\n        for(Entry<String, ProteinSequence> entry : a.entrySet()){\n            dList.clear();\n            rowBuilder.setLength(0);\n            computeRow(rowBuilder, dList, entry.getValue().getOriginalHeader(), entry.getValue().getSequenceAsString().trim(), delimiter, aaTable, propertyList, specificList,\n                    decimalPlace, pp);\n            output.print(rowBuilder.toString());\n            count++;\n            if (fivePercent == 0)\n                System.out.print(\"Processing sequences: \"+count+\"\\r\");\n            else if (count % fivePercent == 0) {\n                int percentage = 5 * (count / fivePercent);\n                System.out.print(\"Processing sequences:\"+percentage+\"%\\r\");\n            }\n        }\n        System.out.println();\n        if (closeOutput) {\n            output.close();\n        } else {\n            output.flush();\n        }\n    }\n\n    public static void run(String[] args) throws Exception{\n        List<Character> propertyList = new ArrayList<Character>();\n        List<Character> specificList = new ArrayList<Character>();\n        String inputLocation = null;\n        String outputLocation = null;\n        String aminoAcidCompositionLocation = null;\n        String elementMassLocation = null;\n        String delimiter = \",\";\n        int decimalPlace = 4;\n\n        for(int i = 0; i < args.length; i++){\n            if(args[i].charAt(0) != '-' || args[i].length() != 2){\n                showHelp();\n                throw new Error(\"Unknown option: \" + args[i]);\n            }else{\n                switch(args[i].charAt(1)){\n                case 'i': inputLocation = args[++i]; break;\n                case 'o': outputLocation = args[++i]; break;\n                case 'f':\n                    i++;\n                    if(\"csv\".equalsIgnoreCase(args[i])) delimiter = \",\";\n                    else if(\"tsv\".equalsIgnoreCase(args[i])) delimiter = \"\\t\";\n                    else throw new Error(\"Invalid value for -f: \" + args[i] + \". Please choose either csv or tsv only.\");\n                    break;\n                case 'x': aminoAcidCompositionLocation = args[++i]; break;\n                case 'y': elementMassLocation = args[++i]; break;\n                case 'd': decimalPlace = Integer.parseInt(args[++i]); break;\n                case 'a':\n                    propertyList.add('1');propertyList.add('2');propertyList.add('3');propertyList.add('4');propertyList.add('5');propertyList.add('6');propertyList.add('7');propertyList.add('8');propertyList.add('9');\n                    break;\n                case '1': propertyList.add('1'); break;\n                case '2': propertyList.add('2'); break;\n                case '3': propertyList.add('3'); break;\n                case '4': propertyList.add('4'); break;\n                case '5': propertyList.add('5'); break;\n                case '6': propertyList.add('6'); break;\n                case '7': propertyList.add('7'); break;\n                case '8': propertyList.add('8'); break;\n                case '9': propertyList.add('9'); break;\n                case '0':\n                    propertyList.add('0');\n                    i++;\n                    if(args[i].length() != 1) throw new Error(\"Invalid value: \" + args[i] + \". Amino Acid Symbol should be of single character\");\n                    specificList.add(args[i].toUpperCase().charAt(0));\n                    break;\n                default:\n                    showHelp();\n                    throw new Error(\"Unknown option: \" + args[i]);\n                }\n            }\n        }\n        AminoAcidCompositionTable aaTable = checkForValidityAndObtainAATable(inputLocation, propertyList.size(), aminoAcidCompositionLocation,\n                elementMassLocation);\n        readInputAndGenerateOutput(outputLocation, propertyList, specificList, delimiter, inputLocation, aaTable, decimalPlace);\n    }\n\n    private static LinkedHashMap<String, ProteinSequence> readInputFile(String inputLocation, AminoAcidCompositionTable aaTable) throws Exception{\n        FileInputStream inStream = new FileInputStream(inputLocation);\n        CompoundSet<AminoAcidCompound>   set;\n        if(aaTable == null){\n            set = CaseFreeAminoAcidCompoundSet.getAminoAcidCompoundSet();\n        }else{\n            set = aaTable.getAminoAcidCompoundSet();\n        }\n        LinkedHashMap<String, ProteinSequence> ret;\n        if ( inputLocation.toLowerCase().contains(\".gb\")) {\n            GenbankReader<ProteinSequence, AminoAcidCompound> genbankReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(\n                    inStream, new GenericGenbankHeaderParser<ProteinSequence, AminoAcidCompound>(),\n                    new ProteinSequenceCreator(set));\n            ret = genbankReader.process();\n        } else {\n            FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(\n                    inStream, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n                    new ProteinSequenceCreator(set));\n            ret = fastaReader.process();\n        }\n        return ret;\n    }\n\n    public enum PropertyName{MolecularWeight, Absorbance_True, Absorbance_False, ExtinctionCoefficient_True, ExtinctionCoefficient_False,\n        InstabilityIndex, ApliphaticIndex, AverageHydropathyValue, IsoelectricPoint, NetCharge_pH_7, A, R,\n        N, D, C, E, Q, G, H, I, L,\n        K, M, F, P, S, T, W, Y, V};\n\n    private static void printHeader(PrintStream output, List<Character> propertyList, List<Character> specificList, String delimiter) throws IOException{\n        int specificCount = 0;\n        List<String> sList = new ArrayList<String>();\n        sList.add(\"SequenceName\");\n        for(Character c:propertyList){\n            switch(c){\n            case '1': sList.add(PropertyName.MolecularWeight.toString()); break;\n            case '2': sList.add(PropertyName.Absorbance_True.toString()); sList.add(PropertyName.Absorbance_False.toString()); break;\n            case '3': sList.add(PropertyName.ExtinctionCoefficient_True.toString()); sList.add(PropertyName.ExtinctionCoefficient_False.toString()); break;\n            case '4': sList.add(PropertyName.InstabilityIndex.toString()); break;\n            case '5': sList.add(PropertyName.ApliphaticIndex.toString()); break;\n            case '6': sList.add(PropertyName.AverageHydropathyValue.toString()); break;\n            case '7': sList.add(PropertyName.IsoelectricPoint.toString()); break;\n            case '8': sList.add(PropertyName.NetCharge_pH_7.toString()); break;\n            case '9':\n                sList.add(PropertyName.A.toString()); sList.add(PropertyName.R.toString());\n                sList.add(PropertyName.N.toString()); sList.add(PropertyName.D.toString());\n                sList.add(PropertyName.C.toString()); sList.add(PropertyName.E.toString());\n                sList.add(PropertyName.Q.toString()); sList.add(PropertyName.G.toString());\n                sList.add(PropertyName.H.toString()); sList.add(PropertyName.I.toString());\n                sList.add(PropertyName.L.toString()); sList.add(PropertyName.K.toString());\n                sList.add(PropertyName.M.toString()); sList.add(PropertyName.F.toString());\n                sList.add(PropertyName.P.toString()); sList.add(PropertyName.S.toString());\n                sList.add(PropertyName.T.toString()); sList.add(PropertyName.W.toString());\n                sList.add(PropertyName.Y.toString()); sList.add(PropertyName.V.toString());\n                break;\n            case '0': sList.add(\"\" + specificList.get(specificCount++)); break;\n            }\n        }\n        for(int i = 0; i < sList.size(); i++){\n            if(i != 0) output.print(delimiter);\n            output.print(sList.get(i));\n        }\n        output.println();\n        output.flush();\n    }\n\n    \n    private static void computeRow(StringBuilder rowBuilder, ArrayList<Double> dList, String header, String sequence, String delimiter,\n            AminoAcidCompositionTable aaTable, List<Character> propertyList, List<Character> specificList, int decimalPlace, IPeptideProperties pp) throws CompoundNotFoundException {\n        ProteinSequence pSequence;\n        CompoundSet<AminoAcidCompound> aaSet;\n        if(aaTable != null){\n            sequence = Utils.checkSequence(sequence, aaTable.getSymbolSet());\n            pSequence = new ProteinSequence(sequence, aaTable.getAminoAcidCompoundSet());\n            aaSet = aaTable.getAminoAcidCompoundSet();\n        }else{\n            sequence = Utils.checkSequence(sequence);\n            pSequence = new ProteinSequence(sequence);\n            aaSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n        }\n        int specificCount = 0;\n        for(Character c:propertyList){\n            switch(c){\n            case '1':\n                dList.add(pp.getMolecularWeight(pSequence));\n                break;\n            case '2':\n                dList.add(pp.getAbsorbance(pSequence, true));\n                dList.add(pp.getAbsorbance(pSequence, false));\n                break;\n            case '3':\n                dList.add(pp.getExtinctionCoefficient(pSequence, true));\n                dList.add(pp.getExtinctionCoefficient(pSequence, false));\n                break;\n            case '4': dList.add(pp.getInstabilityIndex(pSequence)); break;\n            case '5': dList.add(pp.getApliphaticIndex(pSequence)); break;\n            case '6': dList.add(pp.getAvgHydropathy(pSequence)); break;\n            case '7': dList.add(pp.getIsoelectricPoint(pSequence)); break;\n            case '8': dList.add(pp.getNetCharge(pSequence)); break;\n            case '9':\n                Map<AminoAcidCompound, Double> aaCompound2Double = pp.getAAComposition(pSequence);\n                dList.add(aaCompound2Double.get(Constraints.A)); dList.add(aaCompound2Double.get(Constraints.R));\n                dList.add(aaCompound2Double.get(Constraints.N)); dList.add(aaCompound2Double.get(Constraints.D));\n                dList.add(aaCompound2Double.get(Constraints.C)); dList.add(aaCompound2Double.get(Constraints.E));\n                dList.add(aaCompound2Double.get(Constraints.Q)); dList.add(aaCompound2Double.get(Constraints.G));\n                dList.add(aaCompound2Double.get(Constraints.H)); dList.add(aaCompound2Double.get(Constraints.I));\n                dList.add(aaCompound2Double.get(Constraints.L)); dList.add(aaCompound2Double.get(Constraints.K));\n                dList.add(aaCompound2Double.get(Constraints.M)); dList.add(aaCompound2Double.get(Constraints.F));\n                dList.add(aaCompound2Double.get(Constraints.P)); dList.add(aaCompound2Double.get(Constraints.S));\n                dList.add(aaCompound2Double.get(Constraints.T)); dList.add(aaCompound2Double.get(Constraints.W));\n                dList.add(aaCompound2Double.get(Constraints.Y)); dList.add(aaCompound2Double.get(Constraints.V));\n                break;\n            case '0':\n                dList.add(pp.getEnrichment(pSequence, aaSet.getCompoundForString(\"\" + specificList.get(specificCount++))));\n                break;\n            }\n        }\n        \n        rowBuilder.append(header.replace(delimiter, \"_\"));\n        for(int i=0; i<dList.size(); i++) {\n            rowBuilder.append(delimiter);\n            rowBuilder.append(Utils.roundToDecimals(dList.get(i), decimalPlace));\n        }\n        rowBuilder.append('\\n');\n    }\n\n    private static void showHelp(){\n        System.err.println(\"NAME\");\n        System.err.println(\"\\tAn executable to generate physico-chemical properties of protein sequences.\");\n        System.err.println();\n        System.err.println(\"EXAMPLES\");\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -a\");\n        System.err.println(\"\\t\\tGenerates all possible properties.\");\n        System.err.println();\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -1 -3 -7\");\n        System.err.println(\"\\t\\tGenerates only molecular weight, extinction coefficient and isoelectric point.\");\n        System.err.println();\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -0 A -0 N -1\");\n        System.err.println(\"\\t\\tGenerates composition of two specific amino acid symbol and molecular weight.\");\n        System.err.println();\n        System.err.println(\"OPTIONS\");\n        System.err.println(\"\\tRequired\");\n        System.err.println(\"\\t\\t-i location of input FASTA file\");\n        System.err.println();\n        System.err.println(\"\\tOptional\");\n        System.err.println(\"\\t\\t-o location of output file [standard output (default)]\");\n        System.err.println(\"\\t\\t-f output format [csv (default) or tsv]\");\n        System.err.println(\"\\t\\t-x location of Amino Acid Composition XML file for defining amino acid composition\");\n        System.err.println(\"\\t\\t-y location of Element Mass XML file for defining mass of elements\");\n        System.err.println(\"\\t\\t-d number of decimals (int) [4 (default)]\");\n        System.err.println();\n        System.err.println(\"\\tProvide at least one of them\");\n        System.err.println(\"\\t\\t-a compute properties of option 1-9\");\n        System.err.println(\"\\t\\t-1 compute molecular weight\");\n        System.err.println(\"\\t\\t-2 compute absorbance\");\n        System.err.println(\"\\t\\t-3 compute extinction coefficient\");\n        System.err.println(\"\\t\\t-4 compute instability index\");\n        System.err.println(\"\\t\\t-5 compute apliphatic index\");\n        System.err.println(\"\\t\\t-6 compute average hydropathy value\");\n        System.err.println(\"\\t\\t-7 compute isoelectric point\");\n        System.err.println(\"\\t\\t-8 compute net charge at pH 7\");\n        System.err.println(\"\\t\\t-9 compute composition of 20 standard amino acid (A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\");\n        System.err.println(\"\\t\\t-0 compute composition of specific amino acid symbol\");\n        System.err.println();\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.CaseFreeAminoAcidCompoundSet;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.*;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.Map.Entry;\nimport java.util.concurrent.*;\n\npublic class CommandPrompt {\n\n    public static void main(String[] args) throws Exception{\n        run(args);\n    }\n\n    private static AminoAcidCompositionTable checkForValidityAndObtainAATable(String inputLocation, int propertyListSize, String aminoAcidCompositionLocation,\n            String elementMassLocation) throws Exception{\n        if(inputLocation == null) {\n            showHelp();\n            throw new Error(\"Please do provide location of input file.\");\n        }\n        if(propertyListSize == 0){\n            showHelp();\n            throw new Error(\"Please at least specify a property to compute.\");\n        }\n        AminoAcidCompositionTable aaTable = null;\n        if(aminoAcidCompositionLocation != null && elementMassLocation == null){\n            aaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation));\n        }else if(aminoAcidCompositionLocation != null && elementMassLocation != null){\n            aaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation, elementMassLocation));\n        }else if(aminoAcidCompositionLocation == null && elementMassLocation != null){\n            throw new Error(\"You have define the location of Element Mass XML file. Please also define the location of Amino Acid Composition XML file\");\n        }\n        return aaTable;\n    }\n\n    private static void readInputAndGenerateOutput(String outputLocation, List<Character> propertyList, List<Character> specificList,\n            String delimiter, String inputLocation, AminoAcidCompositionTable aaTable, int decimalPlace) throws Exception{\n        final int THREADS = Runtime.getRuntime().availableProcessors();\n        BufferedWriter output;\n        boolean closeOutput = false;\n        if(outputLocation != null) {\n            output = new BufferedWriter(new FileWriter(outputLocation));\n            closeOutput = true;\n        } else {\n            output = new BufferedWriter(new OutputStreamWriter(System.out));\n        }\n        printHeader(output, propertyList, specificList, delimiter);\n\n        CompoundSet<AminoAcidCompound> set = (aaTable == null)\n            ? CaseFreeAminoAcidCompoundSet.getAminoAcidCompoundSet()\n            : aaTable.getAminoAcidCompoundSet();\n\n        \n        boolean isGenbank = inputLocation.toLowerCase().contains(\".gb\");\n        InputStream inStream = new FileInputStream(inputLocation);\n        Iterator<Entry<String, ProteinSequence>> iterator;\n        if (isGenbank) {\n            GenbankReader<ProteinSequence, AminoAcidCompound> genbankReader = new GenbankReader<>(\n                    inStream, new GenericGenbankHeaderParser<>(), new ProteinSequenceCreator(set));\n            iterator = genbankReader.process().entrySet().iterator();\n        } else {\n            FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<>(\n                    inStream, new GenericFastaHeaderParser<>(), new ProteinSequenceCreator(set));\n            iterator = fastaReader.process().entrySet().iterator();\n        }\n\n        List<Entry<String, ProteinSequence>> entries = new ArrayList<>();\n        while (iterator.hasNext()) {\n            entries.add(iterator.next());\n        }\n        int totalSequences = entries.size();\n        int fivePercent = (totalSequences == 0) ? 1 : Math.max(1, totalSequences / 20);\n\n        \n        ExecutorService pool = Executors.newFixedThreadPool(THREADS);\n        List<Future<String>> results = new ArrayList<>(totalSequences);\n        IPeptideProperties pp = new PeptidePropertiesImpl();\n        for (int i = 0; i < entries.size(); i++) {\n            final Entry<String, ProteinSequence> entry = entries.get(i);\n            final int seqIndex = i;\n            results.add(pool.submit(() -> {\n                StringBuilder rowBuilder = new StringBuilder(1024);\n                double[] dList = new double[64];\n                int dCount = computeRow(rowBuilder, dList, entry.getValue().getOriginalHeader(), entry.getValue().getSequenceAsString().trim(), delimiter, aaTable, propertyList, specificList, decimalPlace, pp);\n                return rowBuilder.toString();\n            }));\n        }\n\n        pool.shutdown();\n\n        \n        int count = 0;\n        for (Future<String> f : results) {\n            output.write(f.get());\n            count++;\n            if (fivePercent == 0)\n                System.out.print(\"Processing sequences: \"+count+\"\\r\");\n            else if (count % fivePercent == 0) {\n                int percentage = 5 * (count / fivePercent);\n                System.out.print(\"Processing sequences: \"+percentage+\"%\\r\");\n            }\n        }\n        System.out.println();\n        if (closeOutput) {\n            output.close();\n        } else {\n            output.flush();\n        }\n    }\n\n    public static void run(String[] args) throws Exception{\n        List<Character> propertyList = new ArrayList<Character>();\n        List<Character> specificList = new ArrayList<Character>();\n        String inputLocation = null;\n        String outputLocation = null;\n        String aminoAcidCompositionLocation = null;\n        String elementMassLocation = null;\n        String delimiter = \",\";\n        int decimalPlace = 4;\n\n        for(int i = 0; i < args.length; i++){\n            if(args[i].charAt(0) != '-' || args[i].length() != 2){\n                showHelp();\n                throw new Error(\"Unknown option: \" + args[i]);\n            }else{\n                switch(args[i].charAt(1)){\n                case 'i': inputLocation = args[++i]; break;\n                case 'o': outputLocation = args[++i]; break;\n                case 'f':\n                    i++;\n                    if(\"csv\".equalsIgnoreCase(args[i])) delimiter = \",\";\n                    else if(\"tsv\".equalsIgnoreCase(args[i])) delimiter = \"\\t\";\n                    else throw new Error(\"Invalid value for -f: \" + args[i] + \". Please choose either csv or tsv only.\");\n                    break;\n                case 'x': aminoAcidCompositionLocation = args[++i]; break;\n                case 'y': elementMassLocation = args[++i]; break;\n                case 'd': decimalPlace = Integer.parseInt(args[++i]); break;\n                case 'a':\n                    propertyList.add('1');propertyList.add('2');propertyList.add('3');propertyList.add('4');propertyList.add('5');propertyList.add('6');propertyList.add('7');propertyList.add('8');propertyList.add('9');\n                    break;\n                case '1': propertyList.add('1'); break;\n                case '2': propertyList.add('2'); break;\n                case '3': propertyList.add('3'); break;\n                case '4': propertyList.add('4'); break;\n                case '5': propertyList.add('5'); break;\n                case '6': propertyList.add('6'); break;\n                case '7': propertyList.add('7'); break;\n                case '8': propertyList.add('8'); break;\n                case '9': propertyList.add('9'); break;\n                case '0':\n                    propertyList.add('0');\n                    i++;\n                    if(args[i].length() != 1) throw new Error(\"Invalid value: \" + args[i] + \". Amino Acid Symbol should be of single character\");\n                    specificList.add(args[i].toUpperCase().charAt(0));\n                    break;\n                default:\n                    showHelp();\n                    throw new Error(\"Unknown option: \" + args[i]);\n                }\n            }\n        }\n        AminoAcidCompositionTable aaTable = checkForValidityAndObtainAATable(inputLocation, propertyList.size(), aminoAcidCompositionLocation,\n                elementMassLocation);\n        readInputAndGenerateOutput(outputLocation, propertyList, specificList, delimiter, inputLocation, aaTable, decimalPlace);\n    }\n\n    \n    private static void printHeader(BufferedWriter output, List<Character> propertyList, List<Character> specificList, String delimiter) throws IOException{\n        int specificCount = 0;\n        List<String> sList = new ArrayList<String>();\n        sList.add(\"SequenceName\");\n        for(Character c:propertyList){\n            switch(c){\n            case '1': sList.add(PropertyName.MolecularWeight.toString()); break;\n            case '2': sList.add(PropertyName.Absorbance_True.toString()); sList.add(PropertyName.Absorbance_False.toString()); break;\n            case '3': sList.add(PropertyName.ExtinctionCoefficient_True.toString()); sList.add(PropertyName.ExtinctionCoefficient_False.toString()); break;\n            case '4': sList.add(PropertyName.InstabilityIndex.toString()); break;\n            case '5': sList.add(PropertyName.ApliphaticIndex.toString()); break;\n            case '6': sList.add(PropertyName.AverageHydropathyValue.toString()); break;\n            case '7': sList.add(PropertyName.IsoelectricPoint.toString()); break;\n            case '8': sList.add(PropertyName.NetCharge_pH_7.toString()); break;\n            case '9':\n                sList.add(PropertyName.A.toString()); sList.add(PropertyName.R.toString());\n                sList.add(PropertyName.N.toString()); sList.add(PropertyName.D.toString());\n                sList.add(PropertyName.C.toString()); sList.add(PropertyName.E.toString());\n                sList.add(PropertyName.Q.toString()); sList.add(PropertyName.G.toString());\n                sList.add(PropertyName.H.toString()); sList.add(PropertyName.I.toString());\n                sList.add(PropertyName.L.toString()); sList.add(PropertyName.K.toString());\n                sList.add(PropertyName.M.toString()); sList.add(PropertyName.F.toString());\n                sList.add(PropertyName.P.toString()); sList.add(PropertyName.S.toString());\n                sList.add(PropertyName.T.toString()); sList.add(PropertyName.W.toString());\n                sList.add(PropertyName.Y.toString()); sList.add(PropertyName.V.toString());\n                break;\n            case '0': sList.add(\"\" + specificList.get(specificCount++)); break;\n            }\n        }\n        for(int i = 0; i < sList.size(); i++){\n            if(i != 0) output.write(delimiter);\n            output.write(sList.get(i));\n        }\n        output.newLine();\n        output.flush();\n    }\n\n    public enum PropertyName{MolecularWeight, Absorbance_True, Absorbance_False, ExtinctionCoefficient_True, ExtinctionCoefficient_False,\n        InstabilityIndex, ApliphaticIndex, AverageHydropathyValue, IsoelectricPoint, NetCharge_pH_7, A, R,\n        N, D, C, E, Q, G, H, I, L,\n        K, M, F, P, S, T, W, Y, V};\n\n    \n    private static int computeRow(StringBuilder rowBuilder, double[] dList, String header, String sequence, String delimiter,\n            AminoAcidCompositionTable aaTable, List<Character> propertyList, List<Character> specificList, int decimalPlace, IPeptideProperties pp) throws CompoundNotFoundException {\n        ProteinSequence pSequence;\n        CompoundSet<AminoAcidCompound> aaSet;\n        if(aaTable != null){\n            sequence = Utils.checkSequence(sequence, aaTable.getSymbolSet());\n            pSequence = new ProteinSequence(sequence, aaTable.getAminoAcidCompoundSet());\n            aaSet = aaTable.getAminoAcidCompoundSet();\n        }else{\n            sequence = Utils.checkSequence(sequence);\n            pSequence = new ProteinSequence(sequence);\n            aaSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n        }\n        int dCount = 0;\n        int specificCount = 0;\n        for(Character c:propertyList){\n            switch(c){\n            case '1':\n                dList[dCount++] = pp.getMolecularWeight(pSequence);\n                break;\n            case '2':\n                dList[dCount++] = pp.getAbsorbance(pSequence, true);\n                dList[dCount++] = pp.getAbsorbance(pSequence, false);\n                break;\n            case '3':\n                dList[dCount++] = pp.getExtinctionCoefficient(pSequence, true);\n                dList[dCount++] = pp.getExtinctionCoefficient(pSequence, false);\n                break;\n            case '4': dList[dCount++] = pp.getInstabilityIndex(pSequence); break;\n            case '5': dList[dCount++] = pp.getApliphaticIndex(pSequence); break;\n            case '6': dList[dCount++] = pp.getAvgHydropathy(pSequence); break;\n            case '7': dList[dCount++] = pp.getIsoelectricPoint(pSequence); break;\n            case '8': dList[dCount++] = pp.getNetCharge(pSequence); break;\n            case '9':\n                Map<AminoAcidCompound, Double> aaCompound2Double = pp.getAAComposition(pSequence);\n                dList[dCount++] = aaCompound2Double.get(Constraints.A); dList[dCount++] = aaCompound2Double.get(Constraints.R);\n                dList[dCount++] = aaCompound2Double.get(Constraints.N); dList[dCount++] = aaCompound2Double.get(Constraints.D);\n                dList[dCount++] = aaCompound2Double.get(Constraints.C); dList[dCount++] = aaCompound2Double.get(Constraints.E);\n                dList[dCount++] = aaCompound2Double.get(Constraints.Q); dList[dCount++] = aaCompound2Double.get(Constraints.G);\n                dList[dCount++] = aaCompound2Double.get(Constraints.H); dList[dCount++] = aaCompound2Double.get(Constraints.I);\n                dList[dCount++] = aaCompound2Double.get(Constraints.L); dList[dCount++] = aaCompound2Double.get(Constraints.K);\n                dList[dCount++] = aaCompound2Double.get(Constraints.M); dList[dCount++] = aaCompound2Double.get(Constraints.F);\n                dList[dCount++] = aaCompound2Double.get(Constraints.P); dList[dCount++] = aaCompound2Double.get(Constraints.S);\n                dList[dCount++] = aaCompound2Double.get(Constraints.T); dList[dCount++] = aaCompound2Double.get(Constraints.W);\n                dList[dCount++] = aaCompound2Double.get(Constraints.Y); dList[dCount++] = aaCompound2Double.get(Constraints.V);\n                break;\n            case '0':\n                dList[dCount++] = pp.getEnrichment(pSequence, aaSet.getCompoundForString(\"\" + specificList.get(specificCount++)));\n                break;\n            }\n        }\n        rowBuilder.append(header.replace(delimiter, \"_\"));\n        for(int i=0; i<dCount; i++) {\n            rowBuilder.append(delimiter);\n            rowBuilder.append(Utils.roundToDecimals(dList[i], decimalPlace));\n        }\n        rowBuilder.append('\\n');\n        return dCount;\n    }\n\n    private static void showHelp(){\n        System.err.println(\"NAME\");\n        System.err.println(\"\\tAn executable to generate physico-chemical properties of protein sequences.\");\n        System.err.println();\n        System.err.println(\"EXAMPLES\");\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -a\");\n        System.err.println(\"\\t\\tGenerates all possible properties.\");\n        System.err.println();\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -1 -3 -7\");\n        System.err.println(\"\\t\\tGenerates only molecular weight, extinction coefficient and isoelectric point.\");\n        System.err.println();\n        System.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -0 A -0 N -1\");\n        System.err.println(\"\\t\\tGenerates composition of two specific amino acid symbol and molecular weight.\");\n        System.err.println();\n        System.err.println(\"OPTIONS\");\n        System.err.println(\"\\tRequired\");\n        System.err.println(\"\\t\\t-i location of input FASTA file\");\n        System.err.println();\n        System.err.println(\"\\tOptional\");\n        System.err.println(\"\\t\\t-o location of output file [standard output (default)]\");\n        System.err.println(\"\\t\\t-f output format [csv (default) or tsv]\");\n        System.err.println(\"\\t\\t-x location of Amino Acid Composition XML file for defining amino acid composition\");\n        System.err.println(\"\\t\\t-y location of Element Mass XML file for defining mass of elements\");\n        System.err.println(\"\\t\\t-d number of decimals (int) [4 (default)]\");\n        System.err.println();\n        System.err.println(\"\\tProvide at least one of them\");\n        System.err.println(\"\\t\\t-a compute properties of option 1-9\");\n        System.err.println(\"\\t\\t-1 compute molecular weight\");\n        System.err.println(\"\\t\\t-2 compute absorbance\");\n        System.err.println(\"\\t\\t-3 compute extinction coefficient\");\n        System.err.println(\"\\t\\t-4 compute instability index\");\n        System.err.println(\"\\t\\t-5 compute apliphatic index\");\n        System.err.println(\"\\t\\t-6 compute average hydropathy value\");\n        System.err.println(\"\\t\\t-7 compute isoelectric point\");\n        System.err.println(\"\\t\\t-8 compute net charge at pH 7\");\n        System.err.println(\"\\t\\t-9 compute composition of 20 standard amino acid (A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\");\n        System.err.println(\"\\t\\t-0 compute composition of specific amino acid symbol\");\n        System.err.println();\n    }\n}\n"
    ]
}