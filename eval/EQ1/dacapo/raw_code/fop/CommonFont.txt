{
    "0": [
        "\n\n\n\npackage org.apache.fop.fo.properties;\n\n\nimport java.util.List;\n\nimport org.apache.fop.datatypes.Length;\nimport org.apache.fop.datatypes.Numeric;\nimport org.apache.fop.fo.Constants;\nimport org.apache.fop.fo.PropertyList;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fonts.FontInfo;\nimport org.apache.fop.fonts.FontTriplet;\nimport org.apache.fop.util.CompareUtil;\n\n\npublic final class CommonFont {\n\n    \n    private static final PropertyCache<CommonFont> CACHE = new PropertyCache<CommonFont>();\n\n    \n    private int hash = -1;\n\n    \n    private final FontFamilyProperty fontFamily;\n\n    \n    private final EnumProperty fontSelectionStrategy;\n\n    \n    private final EnumProperty fontStretch;\n\n    \n    private final EnumProperty fontStyle;\n\n    \n    private final EnumProperty fontVariant;\n\n    \n    private final EnumProperty fontWeight;\n\n    \n    public final Length fontSize;\n\n    \n    public final Numeric fontSizeAdjust;\n\n\n    \n    private CommonFont(FontFamilyProperty fontFamily,\n                       EnumProperty fontSelectionStrategy,\n                       EnumProperty fontStretch,\n                       EnumProperty fontStyle,\n                       EnumProperty fontVariant,\n                       EnumProperty fontWeight,\n                       Length fontSize,\n                       Numeric fontSizeAdjust) {\n        this.fontFamily = fontFamily;\n        this.fontSelectionStrategy = fontSelectionStrategy;\n        this.fontStretch = fontStretch;\n        this.fontStyle = fontStyle;\n        this.fontVariant = fontVariant;\n        this.fontWeight = fontWeight;\n        this.fontSize = fontSize;\n        this.fontSizeAdjust = fontSizeAdjust;\n    }\n\n    \n    public static CommonFont getInstance(PropertyList pList) throws PropertyException {\n        FontFamilyProperty fontFamily = (FontFamilyProperty) pList.get(Constants.PR_FONT_FAMILY);\n        EnumProperty fontSelectionStrategy\n            = (EnumProperty) pList.get(Constants.PR_FONT_SELECTION_STRATEGY);\n        EnumProperty fontStretch = (EnumProperty) pList.get(Constants.PR_FONT_STRETCH);\n        EnumProperty fontStyle = (EnumProperty) pList.get(Constants.PR_FONT_STYLE);\n        EnumProperty fontVariant = (EnumProperty) pList.get(Constants.PR_FONT_VARIANT);\n        EnumProperty fontWeight = (EnumProperty) pList.get(Constants.PR_FONT_WEIGHT);\n        Numeric fontSizeAdjust = pList.get(Constants.PR_FONT_SIZE_ADJUST).getNumeric();\n        Length fontSize = pList.get(Constants.PR_FONT_SIZE).getLength();\n\n        CommonFont commonFont = new CommonFont(fontFamily,\n                                               fontSelectionStrategy,\n                                               fontStretch,\n                                               fontStyle,\n                                               fontVariant,\n                                               fontWeight,\n                                               fontSize,\n                                               fontSizeAdjust);\n\n        return CACHE.fetch(commonFont);\n    }\n\n    \n    private String[] getFontFamily() {\n        List<Property> lst = fontFamily.getList();\n        String[] fontFamily = new String[lst.size()];\n        for (int i = 0, c = lst.size(); i < c; i++) {\n            fontFamily[i] = lst.get(i).getString();\n        }\n        return fontFamily;\n    }\n\n    \n    public String getFirstFontFamily() {\n        return fontFamily.list.get(0).getString();\n    }\n\n    \n    public int getFontSelectionStrategy() {\n        return fontSelectionStrategy.getEnum();\n    }\n\n    \n    public int getFontStretch() {\n        return fontStretch.getEnum();\n    }\n\n    \n    public int getFontStyle() {\n        return fontStyle.getEnum();\n    }\n\n    \n    public int getFontVariant() {\n        return fontVariant.getEnum();\n    }\n\n    \n    public int getFontWeight() {\n        return fontWeight.getEnum();\n    }\n\n    \n    public Length getFontSize() {\n        return fontSize;\n    }\n\n    \n    public Numeric getFontSizeAdjust() {\n        return fontSizeAdjust;\n    }\n\n    \n    public FontTriplet[] getFontState(FontInfo fontInfo) {\n        int fw;\n        switch (fontWeight.getEnum()) {\n        case Constants.EN_100: fw = 100; break;\n        case Constants.EN_200: fw = 200; break;\n        case Constants.EN_300: fw = 300; break;\n        case Constants.EN_400: fw = 400; break;\n        case Constants.EN_500: fw = 500; break;\n        case Constants.EN_600: fw = 600; break;\n        case Constants.EN_700: fw = 700; break;\n        case Constants.EN_800: fw = 800; break;\n        case Constants.EN_900: fw = 900; break;\n        default: fw = 400;\n        }\n\n        String style;\n        switch (fontStyle.getEnum()) {\n        case Constants.EN_ITALIC:\n            style = \"italic\";\n            break;\n        case Constants.EN_OBLIQUE:\n            style = \"oblique\";\n            break;\n        case Constants.EN_BACKSLANT:\n            style = \"backslant\";\n            break;\n        default:\n            style = \"normal\";\n        }\n        \n        \n        \n        FontTriplet[] triplets = fontInfo.fontLookup(\n                                    getFontFamily(),\n                                    style, fw);\n        return triplets;\n    }\n\n    \n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CommonFont)) {\n            return false;\n        }\n\n        CommonFont other = (CommonFont) obj;\n        return CompareUtil.equal(fontFamily, other.fontFamily)\n                && CompareUtil.equal(fontSelectionStrategy, other.fontSelectionStrategy)\n                && CompareUtil.equal(fontSize, other.fontSize)\n                && CompareUtil.equal(fontSizeAdjust, other.fontSizeAdjust)\n                && CompareUtil.equal(fontStretch, other.fontStretch)\n                && CompareUtil.equal(fontStyle, other.fontStyle)\n                && CompareUtil.equal(fontVariant, other.fontVariant)\n                && CompareUtil.equal(fontWeight, other.fontWeight);\n    }\n\n    \n    public int hashCode() {\n        if (this.hash == -1) {\n            int hash = 17;\n            hash = 37 * hash + CompareUtil.getHashCode(fontSize);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSizeAdjust);\n            hash = 37 * hash + CompareUtil.getHashCode(fontFamily);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSelectionStrategy);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStretch);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStyle);\n            hash = 37 * hash + CompareUtil.getHashCode(fontVariant);\n            hash = 37 * hash + CompareUtil.getHashCode(fontWeight);\n            this.hash = hash;\n        }\n        return hash;\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.fo.properties;\n\nimport java.util.List;\n\nimport org.apache.fop.datatypes.Length;\nimport org.apache.fop.datatypes.Numeric;\nimport org.apache.fop.fo.Constants;\nimport org.apache.fop.fo.PropertyList;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fonts.FontInfo;\nimport org.apache.fop.fonts.FontTriplet;\nimport org.apache.fop.util.CompareUtil;\n\npublic final class CommonFont {\n\n    private static final PropertyCache<CommonFont> CACHE = new PropertyCache<CommonFont>();\n\n    private int hash = -1;\n\n    private final FontFamilyProperty fontFamily;\n    private final EnumProperty fontSelectionStrategy;\n    private final EnumProperty fontStretch;\n    private final EnumProperty fontStyle;\n    private final EnumProperty fontVariant;\n    private final EnumProperty fontWeight;\n    public final Length fontSize;\n    public final Numeric fontSizeAdjust;\n\n    \n    private transient String[] fontFamilyArray;\n\n    private CommonFont(FontFamilyProperty fontFamily,\n                       EnumProperty fontSelectionStrategy,\n                       EnumProperty fontStretch,\n                       EnumProperty fontStyle,\n                       EnumProperty fontVariant,\n                       EnumProperty fontWeight,\n                       Length fontSize,\n                       Numeric fontSizeAdjust) {\n        this.fontFamily = fontFamily;\n        this.fontSelectionStrategy = fontSelectionStrategy;\n        this.fontStretch = fontStretch;\n        this.fontStyle = fontStyle;\n        this.fontVariant = fontVariant;\n        this.fontWeight = fontWeight;\n        this.fontSize = fontSize;\n        this.fontSizeAdjust = fontSizeAdjust;\n    }\n\n    public static CommonFont getInstance(PropertyList pList) throws PropertyException {\n        FontFamilyProperty fontFamily = (FontFamilyProperty) pList.get(Constants.PR_FONT_FAMILY);\n        EnumProperty fontSelectionStrategy\n            = (EnumProperty) pList.get(Constants.PR_FONT_SELECTION_STRATEGY);\n        EnumProperty fontStretch = (EnumProperty) pList.get(Constants.PR_FONT_STRETCH);\n        EnumProperty fontStyle = (EnumProperty) pList.get(Constants.PR_FONT_STYLE);\n        EnumProperty fontVariant = (EnumProperty) pList.get(Constants.PR_FONT_VARIANT);\n        EnumProperty fontWeight = (EnumProperty) pList.get(Constants.PR_FONT_WEIGHT);\n        Numeric fontSizeAdjust = pList.get(Constants.PR_FONT_SIZE_ADJUST).getNumeric();\n        Length fontSize = pList.get(Constants.PR_FONT_SIZE).getLength();\n\n        CommonFont commonFont = new CommonFont(fontFamily,\n                                               fontSelectionStrategy,\n                                               fontStretch,\n                                               fontStyle,\n                                               fontVariant,\n                                               fontWeight,\n                                               fontSize,\n                                               fontSizeAdjust);\n\n        return CACHE.fetch(commonFont);\n    }\n\n    \n    private String[] getFontFamilyArray() {\n        if (fontFamilyArray == null) {\n            List<Property> lst = fontFamily.getList();\n            fontFamilyArray = new String[lst.size()];\n            for (int i = 0, c = lst.size(); i < c; i++) {\n                fontFamilyArray[i] = lst.get(i).getString();\n            }\n        }\n        return fontFamilyArray;\n    }\n\n    \n    private String[] getFontFamily() {\n        return getFontFamilyArray();\n    }\n\n    public String getFirstFontFamily() {\n        String[] families = getFontFamilyArray();\n        return families.length > 0 ? families[0] : null;\n    }\n\n    public int getFontSelectionStrategy() {\n        return fontSelectionStrategy.getEnum();\n    }\n\n    public int getFontStretch() {\n        return fontStretch.getEnum();\n    }\n\n    public int getFontStyle() {\n        return fontStyle.getEnum();\n    }\n\n    public int getFontVariant() {\n        return fontVariant.getEnum();\n    }\n\n    public int getFontWeight() {\n        return fontWeight.getEnum();\n    }\n\n    public Length getFontSize() {\n        return fontSize;\n    }\n\n    public Numeric getFontSizeAdjust() {\n        return fontSizeAdjust;\n    }\n\n    public FontTriplet[] getFontState(FontInfo fontInfo) {\n        int fw;\n        switch (fontWeight.getEnum()) {\n        case Constants.EN_100: fw = 100; break;\n        case Constants.EN_200: fw = 200; break;\n        case Constants.EN_300: fw = 300; break;\n        case Constants.EN_400: fw = 400; break;\n        case Constants.EN_500: fw = 500; break;\n        case Constants.EN_600: fw = 600; break;\n        case Constants.EN_700: fw = 700; break;\n        case Constants.EN_800: fw = 800; break;\n        case Constants.EN_900: fw = 900; break;\n        default: fw = 400;\n        }\n\n        String style;\n        switch (fontStyle.getEnum()) {\n        case Constants.EN_ITALIC:\n            style = \"italic\";\n            break;\n        case Constants.EN_OBLIQUE:\n            style = \"oblique\";\n            break;\n        case Constants.EN_BACKSLANT:\n            style = \"backslant\";\n            break;\n        default:\n            style = \"normal\";\n        }\n\n        FontTriplet[] triplets = fontInfo.fontLookup(\n                                    getFontFamilyArray(),\n                                    style, fw);\n        return triplets;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CommonFont)) {\n            return false;\n        }\n\n        CommonFont other = (CommonFont) obj;\n        return CompareUtil.equal(fontFamily, other.fontFamily)\n                && CompareUtil.equal(fontSelectionStrategy, other.fontSelectionStrategy)\n                && CompareUtil.equal(fontSize, other.fontSize)\n                && CompareUtil.equal(fontSizeAdjust, other.fontSizeAdjust)\n                && CompareUtil.equal(fontStretch, other.fontStretch)\n                && CompareUtil.equal(fontStyle, other.fontStyle)\n                && CompareUtil.equal(fontVariant, other.fontVariant)\n                && CompareUtil.equal(fontWeight, other.fontWeight);\n    }\n\n    public int hashCode() {\n        if (this.hash == -1) {\n            int hash = 17;\n            hash = 37 * hash + CompareUtil.getHashCode(fontSize);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSizeAdjust);\n            hash = 37 * hash + CompareUtil.getHashCode(fontFamily);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSelectionStrategy);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStretch);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStyle);\n            hash = 37 * hash + CompareUtil.getHashCode(fontVariant);\n            hash = 37 * hash + CompareUtil.getHashCode(fontWeight);\n            this.hash = hash;\n        }\n        return hash;\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.fo.properties;\n\nimport java.util.List;\n\nimport org.apache.fop.datatypes.Length;\nimport org.apache.fop.datatypes.Numeric;\nimport org.apache.fop.fo.Constants;\nimport org.apache.fop.fo.PropertyList;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fonts.FontInfo;\nimport org.apache.fop.fonts.FontTriplet;\nimport org.apache.fop.util.CompareUtil;\n\n\npublic final class CommonFont {\n\n    private static final PropertyCache<CommonFont> CACHE = new PropertyCache<CommonFont>();\n\n    private int hash = -1;\n\n    private final FontFamilyProperty fontFamily;\n    private final EnumProperty fontSelectionStrategy;\n    private final EnumProperty fontStretch;\n    private final EnumProperty fontStyle;\n    private final EnumProperty fontVariant;\n    private final EnumProperty fontWeight;\n    public final Length fontSize;\n    public final Numeric fontSizeAdjust;\n\n    \n    private volatile transient String[] fontFamilyArray;\n\n    private CommonFont(FontFamilyProperty fontFamily,\n                       EnumProperty fontSelectionStrategy,\n                       EnumProperty fontStretch,\n                       EnumProperty fontStyle,\n                       EnumProperty fontVariant,\n                       EnumProperty fontWeight,\n                       Length fontSize,\n                       Numeric fontSizeAdjust) {\n        this.fontFamily = fontFamily;\n        this.fontSelectionStrategy = fontSelectionStrategy;\n        this.fontStretch = fontStretch;\n        this.fontStyle = fontStyle;\n        this.fontVariant = fontVariant;\n        this.fontWeight = fontWeight;\n        this.fontSize = fontSize;\n        this.fontSizeAdjust = fontSizeAdjust;\n    }\n\n    public static CommonFont getInstance(PropertyList pList) throws PropertyException {\n        FontFamilyProperty fontFamily = (FontFamilyProperty) pList.get(Constants.PR_FONT_FAMILY);\n        EnumProperty fontSelectionStrategy\n            = (EnumProperty) pList.get(Constants.PR_FONT_SELECTION_STRATEGY);\n        EnumProperty fontStretch = (EnumProperty) pList.get(Constants.PR_FONT_STRETCH);\n        EnumProperty fontStyle = (EnumProperty) pList.get(Constants.PR_FONT_STYLE);\n        EnumProperty fontVariant = (EnumProperty) pList.get(Constants.PR_FONT_VARIANT);\n        EnumProperty fontWeight = (EnumProperty) pList.get(Constants.PR_FONT_WEIGHT);\n        Numeric fontSizeAdjust = pList.get(Constants.PR_FONT_SIZE_ADJUST).getNumeric();\n        Length fontSize = pList.get(Constants.PR_FONT_SIZE).getLength();\n\n        CommonFont commonFont = new CommonFont(fontFamily,\n                                               fontSelectionStrategy,\n                                               fontStretch,\n                                               fontStyle,\n                                               fontVariant,\n                                               fontWeight,\n                                               fontSize,\n                                               fontSizeAdjust);\n\n        return CACHE.fetch(commonFont);\n    }\n\n    \n    private String[] getFontFamilyArray() {\n        String[] arr = fontFamilyArray;\n        if (arr == null) {\n            synchronized (this) {\n                arr = fontFamilyArray;\n                if (arr == null) {\n                    List<Property> lst = fontFamily.getList();\n                    arr = new String[lst.size()];\n                    for (int i = 0, c = lst.size(); i < c; i++) {\n                        arr[i] = lst.get(i).getString();\n                    }\n                    fontFamilyArray = arr;\n                }\n            }\n        }\n        return arr;\n    }\n\n    \n    private String[] getFontFamily() {\n        return getFontFamilyArray();\n    }\n\n    public String getFirstFontFamily() {\n        String[] families = getFontFamilyArray();\n        return families.length > 0 ? families[0] : null;\n    }\n\n    public int getFontSelectionStrategy() {\n        return fontSelectionStrategy.getEnum();\n    }\n\n    public int getFontStretch() {\n        return fontStretch.getEnum();\n    }\n\n    public int getFontStyle() {\n        return fontStyle.getEnum();\n    }\n\n    public int getFontVariant() {\n        return fontVariant.getEnum();\n    }\n\n    public int getFontWeight() {\n        return fontWeight.getEnum();\n    }\n\n    public Length getFontSize() {\n        return fontSize;\n    }\n\n    public Numeric getFontSizeAdjust() {\n        return fontSizeAdjust;\n    }\n\n    public FontTriplet[] getFontState(FontInfo fontInfo) {\n        int fw;\n        switch (fontWeight.getEnum()) {\n        case Constants.EN_100: fw = 100; break;\n        case Constants.EN_200: fw = 200; break;\n        case Constants.EN_300: fw = 300; break;\n        case Constants.EN_400: fw = 400; break;\n        case Constants.EN_500: fw = 500; break;\n        case Constants.EN_600: fw = 600; break;\n        case Constants.EN_700: fw = 700; break;\n        case Constants.EN_800: fw = 800; break;\n        case Constants.EN_900: fw = 900; break;\n        default: fw = 400;\n        }\n\n        String style;\n        switch (fontStyle.getEnum()) {\n        case Constants.EN_ITALIC:\n            style = \"italic\";\n            break;\n        case Constants.EN_OBLIQUE:\n            style = \"oblique\";\n            break;\n        case Constants.EN_BACKSLANT:\n            style = \"backslant\";\n            break;\n        default:\n            style = \"normal\";\n        }\n\n        FontTriplet[] triplets = fontInfo.fontLookup(\n                                    getFontFamilyArray(),\n                                    style, fw);\n        return triplets;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CommonFont)) {\n            return false;\n        }\n\n        CommonFont other = (CommonFont) obj;\n        return CompareUtil.equal(fontFamily, other.fontFamily)\n                && CompareUtil.equal(fontSelectionStrategy, other.fontSelectionStrategy)\n                && CompareUtil.equal(fontSize, other.fontSize)\n                && CompareUtil.equal(fontSizeAdjust, other.fontSizeAdjust)\n                && CompareUtil.equal(fontStretch, other.fontStretch)\n                && CompareUtil.equal(fontStyle, other.fontStyle)\n                && CompareUtil.equal(fontVariant, other.fontVariant)\n                && CompareUtil.equal(fontWeight, other.fontWeight);\n    }\n\n    public int hashCode() {\n        if (this.hash == -1) {\n            int hash = 17;\n            hash = 37 * hash + CompareUtil.getHashCode(fontSize);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSizeAdjust);\n            hash = 37 * hash + CompareUtil.getHashCode(fontFamily);\n            hash = 37 * hash + CompareUtil.getHashCode(fontSelectionStrategy);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStretch);\n            hash = 37 * hash + CompareUtil.getHashCode(fontStyle);\n            hash = 37 * hash + CompareUtil.getHashCode(fontVariant);\n            hash = 37 * hash + CompareUtil.getHashCode(fontWeight);\n            this.hash = hash;\n        }\n        return hash;\n    }\n}\n"
    ]
}