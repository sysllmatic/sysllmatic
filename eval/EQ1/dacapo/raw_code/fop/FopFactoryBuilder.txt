{
    "0": [
        "\n\n\n\npackage org.apache.fop.apps;\n\nimport java.net.URI;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.xml.sax.SAXException;\n\nimport org.apache.xmlgraphics.image.loader.ImageContext;\nimport org.apache.xmlgraphics.image.loader.ImageManager;\nimport org.apache.xmlgraphics.image.loader.impl.AbstractImageSessionContext.FallbackResolver;\nimport org.apache.xmlgraphics.io.ResourceResolver;\n\nimport org.apache.fop.apps.io.InternalResourceResolver;\nimport org.apache.fop.apps.io.ResourceResolverFactory;\nimport org.apache.fop.configuration.Configuration;\nimport org.apache.fop.fonts.FontManager;\nimport org.apache.fop.layoutmgr.LayoutManagerMaker;\n\n\npublic final class FopFactoryBuilder {\n\n    private final FopFactoryConfig config;\n\n    private FopFactoryConfigBuilder fopFactoryConfigBuilder;\n\n    \n    public FopFactoryBuilder(URI defaultBaseURI) {\n        this(defaultBaseURI, ResourceResolverFactory.createDefaultResourceResolver());\n    }\n\n    \n    public FopFactoryBuilder(URI defaultBaseURI, ResourceResolver resourceResolver) {\n        this(EnvironmentalProfileFactory.createDefault(defaultBaseURI, resourceResolver));\n    }\n\n    \n    public FopFactoryBuilder(EnvironmentProfile enviro) {\n        config = new FopFactoryConfigImpl(enviro);\n        fopFactoryConfigBuilder = new ActiveFopFactoryConfigBuilder((FopFactoryConfigImpl) config);\n    }\n\n    \n    public FopFactoryConfig buildConfig() {\n        return buildConfiguration();\n    }\n\n    \n    \n    \n    FopFactoryConfig buildConfiguration() {\n        fopFactoryConfigBuilder = CompletedFopFactoryConfigBuilder.INSTANCE;\n        return config;\n    }\n\n    \n    public FopFactory build() {\n        return FopFactory.newInstance(buildConfiguration());\n    }\n\n    \n    URI getBaseURI() {\n        return config.getBaseURI();\n    }\n\n    \n    public FontManager getFontManager() {\n        return config.getFontManager();\n    }\n\n    \n    public ImageManager getImageManager() {\n        return config.getImageManager();\n    }\n\n    \n    public FopFactoryBuilder setAccessibility(boolean enableAccessibility) {\n        fopFactoryConfigBuilder.setAccessibility(enableAccessibility);\n        return this;\n    }\n\n    public FopFactoryBuilder setKeepEmptyTags(boolean b) {\n        fopFactoryConfigBuilder.setKeepEmptyTags(b);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n        fopFactoryConfigBuilder.setLayoutManagerMakerOverride(lmMaker);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setBaseURI(URI baseURI) {\n        fopFactoryConfigBuilder.setBaseURI(baseURI);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphenBaseResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n        fopFactoryConfigBuilder.setHyphenationResourceResolver(hyphenationResourceResolver);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setStrictFOValidation(boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictFOValidation(validateStrictly);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setStrictUserConfigValidation(\n            boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictUserConfigValidation(validateStrictly);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setBreakIndentInheritanceOnReferenceAreaBoundary(\n            boolean value) {\n        fopFactoryConfigBuilder.setBreakIndentInheritanceOnReferenceAreaBoundary(value);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setSourceResolution(float dpi) {\n        fopFactoryConfigBuilder.setSourceResolution(dpi);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setTargetResolution(float dpi) {\n        fopFactoryConfigBuilder.setTargetResolution(dpi);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setPageHeight(String pageHeight) {\n        fopFactoryConfigBuilder.setPageHeight(pageHeight);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setPageWidth(String pageWidth) {\n        fopFactoryConfigBuilder.setPageWidth(pageWidth);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder ignoreNamespace(String namespaceURI) {\n        fopFactoryConfigBuilder.ignoreNamespace(namespaceURI);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder ignoreNamespaces(Collection<String> namespaceURIs) {\n        fopFactoryConfigBuilder.ignoreNamespaces(namespaceURIs);\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setConfiguration(Configuration cfg) {\n        return setConfiguration(cfg, true);\n    }\n\n    protected FopFactoryBuilder setConfiguration(Configuration cfg, boolean parse) {\n        fopFactoryConfigBuilder.setConfiguration(cfg);\n        if (parse) {\n            try {\n                new FopConfParser(cfg, this);\n            } catch (SAXException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return this;\n    }\n\n    \n    public FopFactoryBuilder setPreferRenderer(boolean preferRenderer) {\n        fopFactoryConfigBuilder.setPreferRenderer(preferRenderer);\n        return this;\n    }\n\n    public FopFactoryBuilder setComplexScriptFeatures(boolean csf) {\n        fopFactoryConfigBuilder.setComplexScriptFeaturesEnabled(csf);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphPatNames(Map<String, String> hyphPatNames) {\n        fopFactoryConfigBuilder.setHyphPatNames(hyphPatNames);\n        return this;\n    }\n\n    public FopFactoryBuilder setTableBorderOverpaint(boolean b) {\n        fopFactoryConfigBuilder.setTableBorderOverpaint(b);\n        return this;\n    }\n\n    public FopFactoryBuilder setSimpleLineBreaking(boolean b) {\n        fopFactoryConfigBuilder.setSimpleLineBreaking(b);\n        return this;\n    }\n\n    public static class FopFactoryConfigImpl implements FopFactoryConfig {\n\n        private final EnvironmentProfile enviro;\n\n        private final ImageManager imageManager;\n\n        private boolean accessibility;\n\n        private boolean keepEmptyTags = true;\n\n        private LayoutManagerMaker layoutManagerMaker;\n\n        private URI baseURI;\n\n        private InternalResourceResolver hyphenationResourceResolver;\n\n        private boolean hasStrictFOValidation = true;\n\n        private boolean hasStrictUserValidation = FopFactoryConfig.DEFAULT_STRICT_USERCONFIG_VALIDATION;\n\n        private boolean breakIndentInheritanceOnReferenceBoundary\n        = FopFactoryConfig.DEFAULT_BREAK_INDENT_INHERITANCE;\n\n        private float sourceResolution = FopFactoryConfig.DEFAULT_SOURCE_RESOLUTION;\n\n        private float targetResolution = FopFactoryConfig.DEFAULT_TARGET_RESOLUTION;\n\n        private String pageHeight = FopFactoryConfig.DEFAULT_PAGE_HEIGHT;\n\n        private String pageWidth = FopFactoryConfig.DEFAULT_PAGE_WIDTH;\n\n        private Set<String> ignoredNamespaces = new HashSet<String>();\n\n        private Configuration cfg;\n\n        private boolean preferRenderer;\n\n        private boolean isComplexScript = true;\n\n        private Map<String, String> hyphPatNames;\n\n        private boolean tableBorderOverpaint;\n        private boolean simpleLineBreaking;\n\n        private static final class ImageContextImpl implements ImageContext {\n\n            private final FopFactoryConfig config;\n\n            ImageContextImpl(FopFactoryConfig config) {\n                this.config = config;\n            }\n\n            public float getSourceResolution() {\n                return config.getSourceResolution();\n            }\n        }\n\n        FopFactoryConfigImpl(EnvironmentProfile enviro) {\n            this.enviro = enviro;\n            this.baseURI = enviro.getDefaultBaseURI();\n            this.imageManager = new ImageManager(new ImageContextImpl(this));\n        }\n\n        \n        public boolean isAccessibilityEnabled() {\n            return accessibility;\n        }\n\n        public boolean isKeepEmptyTags() {\n            return keepEmptyTags;\n        }\n\n        \n        public LayoutManagerMaker getLayoutManagerMakerOverride() {\n            return layoutManagerMaker;\n        }\n\n        \n        public ResourceResolver getResourceResolver() {\n            return enviro.getResourceResolver();\n        }\n\n        \n        public URI getBaseURI() {\n            return baseURI;\n        }\n\n        public InternalResourceResolver getHyphenationResourceResolver() {\n            return hyphenationResourceResolver;\n        }\n\n        \n        public boolean validateStrictly() {\n            return hasStrictFOValidation;\n        }\n\n        \n        public boolean validateUserConfigStrictly() {\n            return hasStrictUserValidation;\n        }\n\n        \n        public boolean isBreakIndentInheritanceOnReferenceAreaBoundary() {\n            return breakIndentInheritanceOnReferenceBoundary;\n        }\n\n        \n        public float getSourceResolution() {\n            return sourceResolution;\n        }\n\n        \n        public float getTargetResolution() {\n            return targetResolution;\n        }\n\n        \n        public String getPageHeight() {\n            return pageHeight;\n        }\n\n        \n        public String getPageWidth() {\n            return pageWidth;\n        }\n\n        \n        public Set<String> getIgnoredNamespaces() {\n            return Collections.unmodifiableSet(ignoredNamespaces);\n        }\n\n        \n        public boolean isNamespaceIgnored(String namespace) {\n            return ignoredNamespaces.contains(namespace);\n        }\n\n        \n        public Configuration getUserConfig() {\n            return cfg;\n        }\n\n        \n        public boolean preferRenderer() {\n            return preferRenderer;\n        }\n\n        \n        public FontManager getFontManager() {\n            return enviro.getFontManager();\n        }\n\n        \n        public ImageManager getImageManager() {\n            return imageManager;\n        }\n\n        public boolean isComplexScriptFeaturesEnabled() {\n            return isComplexScript;\n        }\n\n        public boolean isTableBorderOverpaint() {\n            return tableBorderOverpaint;\n        }\n\n        public boolean isSimpleLineBreaking() {\n            return simpleLineBreaking;\n        }\n\n        public Map<String, String> getHyphenationPatternNames() {\n            return hyphPatNames;\n        }\n\n        public FallbackResolver getFallbackResolver() {\n            return enviro.getFallbackResolver();\n        }\n    }\n\n    private interface FopFactoryConfigBuilder {\n\n        void setAccessibility(boolean enableAccessibility);\n        void setKeepEmptyTags(boolean b);\n\n        void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker);\n\n        void setBaseURI(URI baseURI);\n\n        void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver);\n\n        void setStrictFOValidation(boolean validateStrictly);\n\n        void setStrictUserConfigValidation(boolean validateStrictly);\n\n        void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value);\n\n        void setSourceResolution(float dpi);\n\n        void setTargetResolution(float dpi);\n\n        void setPageHeight(String pageHeight);\n\n        void setPageWidth(String pageWidth);\n\n        void ignoreNamespace(String namespaceURI);\n\n        void ignoreNamespaces(Collection<String> namespaceURIs);\n\n        void setConfiguration(Configuration cfg);\n\n        void setPreferRenderer(boolean preferRenderer);\n\n        void setComplexScriptFeaturesEnabled(boolean csf);\n\n        void setHyphPatNames(Map<String, String> hyphPatNames);\n\n        void setTableBorderOverpaint(boolean b);\n\n        void setSimpleLineBreaking(boolean b);\n    }\n\n    private static final class CompletedFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n\n        private static final CompletedFopFactoryConfigBuilder INSTANCE\n        = new CompletedFopFactoryConfigBuilder();\n\n        private void throwIllegalStateException() {\n            throw new IllegalStateException(\"The final FOP Factory configuration has already been built\");\n        }\n\n        public void setAccessibility(boolean enableAccessibility) {\n            throwIllegalStateException();\n        }\n        public void setKeepEmptyTags(boolean b) {\n            throwIllegalStateException();\n        }\n\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n            throwIllegalStateException();\n\n        }\n\n        public void setBaseURI(URI baseURI) {\n            throwIllegalStateException();\n        }\n\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n            throwIllegalStateException();\n        }\n\n        public void setStrictFOValidation(boolean validateStrictly) {\n            throwIllegalStateException();\n        }\n\n        public void setStrictUserConfigValidation(boolean validateStrictly) {\n            throwIllegalStateException();\n        }\n\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(\n                boolean value) {\n            throwIllegalStateException();\n        }\n\n        public void setSourceResolution(float dpi) {\n            throwIllegalStateException();\n        }\n\n        public void setTargetResolution(float dpi) {\n            throwIllegalStateException();\n        }\n\n        public void setPageHeight(String pageHeight) {\n            throwIllegalStateException();\n        }\n\n        public void setPageWidth(String pageWidth) {\n            throwIllegalStateException();\n        }\n\n        public void ignoreNamespace(String namespaceURI) {\n            throwIllegalStateException();\n        }\n\n        public void ignoreNamespaces(Collection<String> namespaceURIs) {\n            throwIllegalStateException();\n        }\n\n        public void setConfiguration(Configuration cfg) {\n            throwIllegalStateException();\n        }\n\n        public void setPreferRenderer(boolean preferRenderer) {\n            throwIllegalStateException();\n        }\n\n        public void setComplexScriptFeaturesEnabled(boolean csf) {\n            throwIllegalStateException();\n        }\n\n        public void setHyphPatNames(Map<String, String> hyphPatNames) {\n            throwIllegalStateException();\n        }\n\n        public void setTableBorderOverpaint(boolean b) {\n            throwIllegalStateException();\n        }\n\n        public void setSimpleLineBreaking(boolean b) {\n            throwIllegalStateException();\n        }\n    }\n\n    private static final class ActiveFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n\n        private final FopFactoryConfigImpl config;\n\n        private ActiveFopFactoryConfigBuilder(FopFactoryConfigImpl config) {\n            this.config = config;\n        }\n\n        public void setAccessibility(boolean enableAccessibility) {\n            config.accessibility = enableAccessibility;\n        }\n\n        public void setKeepEmptyTags(boolean b) {\n            config.keepEmptyTags = b;\n        }\n\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n            config.layoutManagerMaker = lmMaker;\n        }\n\n        public void setBaseURI(URI baseURI) {\n            config.baseURI = baseURI;\n        }\n\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n            config.hyphenationResourceResolver = hyphenationResourceResolver;\n        }\n\n        public void setStrictFOValidation(boolean validateStrictly) {\n            config.hasStrictFOValidation = validateStrictly;\n        }\n\n        public void setStrictUserConfigValidation(\n                boolean validateStrictly) {\n            config.hasStrictUserValidation = validateStrictly;\n        }\n\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(\n                boolean value) {\n            config.breakIndentInheritanceOnReferenceBoundary = value;\n        }\n\n        public void setSourceResolution(float dpi) {\n            config.sourceResolution = dpi;\n        }\n\n        public void setTargetResolution(float dpi) {\n            config.targetResolution = dpi;\n        }\n\n        public void setPageHeight(String pageHeight) {\n            config.pageHeight = pageHeight;\n        }\n\n        public void setPageWidth(String pageWidth) {\n            config.pageWidth = pageWidth;\n        }\n\n        public void ignoreNamespace(String namespaceURI) {\n            config.ignoredNamespaces.add(namespaceURI);\n        }\n\n        public void ignoreNamespaces(\n                Collection<String> namespaceURIs) {\n            config.ignoredNamespaces.addAll(namespaceURIs);\n        }\n\n        public void setConfiguration(Configuration cfg) {\n            config.cfg = cfg;\n        }\n\n        public void setPreferRenderer(boolean preferRenderer) {\n            config.preferRenderer = preferRenderer;\n        }\n\n        public void setComplexScriptFeaturesEnabled(boolean csf) {\n            config.isComplexScript = csf;\n        }\n\n        public void setHyphPatNames(Map<String, String> hyphPatNames) {\n            config.hyphPatNames = hyphPatNames;\n        }\n\n        public void setTableBorderOverpaint(boolean b) {\n            config.tableBorderOverpaint = b;\n        }\n\n        public void setSimpleLineBreaking(boolean b) {\n            config.simpleLineBreaking = b;\n        }\n    }\n\n}\n"
    ],
    "1": [
        "package org.apache.fop.apps;\n\nimport java.net.URI;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Set;\n\nimport java.util.HashSet;\n\nimport org.xml.sax.SAXException;\n\nimport org.apache.xmlgraphics.image.loader.ImageContext;\nimport org.apache.xmlgraphics.image.loader.ImageManager;\nimport org.apache.xmlgraphics.image.loader.impl.AbstractImageSessionContext.FallbackResolver;\nimport org.apache.xmlgraphics.io.ResourceResolver;\n\nimport org.apache.fop.apps.io.InternalResourceResolver;\nimport org.apache.fop.apps.io.ResourceResolverFactory;\nimport org.apache.fop.configuration.Configuration;\nimport org.apache.fop.fonts.FontManager;\nimport org.apache.fop.layoutmgr.LayoutManagerMaker;\n\npublic final class FopFactoryBuilder {\n\n    private final FopFactoryConfig config;\n\n    private FopFactoryConfigBuilder fopFactoryConfigBuilder;\n\n    public FopFactoryBuilder(URI defaultBaseURI) {\n        this(defaultBaseURI, ResourceResolverFactory.createDefaultResourceResolver());\n    }\n\n    public FopFactoryBuilder(URI defaultBaseURI, ResourceResolver resourceResolver) {\n        this(EnvironmentalProfileFactory.createDefault(defaultBaseURI, resourceResolver));\n    }\n\n    public FopFactoryBuilder(EnvironmentProfile enviro) {\n        config = new FopFactoryConfigImpl(enviro);\n        fopFactoryConfigBuilder = new ActiveFopFactoryConfigBuilder((FopFactoryConfigImpl) config);\n    }\n\n    public FopFactoryConfig buildConfig() {\n        return buildConfiguration();\n    }\n\n    FopFactoryConfig buildConfiguration() {\n        fopFactoryConfigBuilder = CompletedFopFactoryConfigBuilder.INSTANCE;\n        return config;\n    }\n\n    public FopFactory build() {\n        return FopFactory.newInstance(buildConfiguration());\n    }\n\n    URI getBaseURI() {\n        return config.getBaseURI();\n    }\n\n    public FontManager getFontManager() {\n        return config.getFontManager();\n    }\n\n    public ImageManager getImageManager() {\n        return config.getImageManager();\n    }\n\n    public FopFactoryBuilder setAccessibility(boolean enableAccessibility) {\n        fopFactoryConfigBuilder.setAccessibility(enableAccessibility);\n        return this;\n    }\n\n    public FopFactoryBuilder setKeepEmptyTags(boolean b) {\n        fopFactoryConfigBuilder.setKeepEmptyTags(b);\n        return this;\n    }\n\n    public FopFactoryBuilder setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n        fopFactoryConfigBuilder.setLayoutManagerMakerOverride(lmMaker);\n        return this;\n    }\n\n    public FopFactoryBuilder setBaseURI(URI baseURI) {\n        fopFactoryConfigBuilder.setBaseURI(baseURI);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphenBaseResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n        fopFactoryConfigBuilder.setHyphenationResourceResolver(hyphenationResourceResolver);\n        return this;\n    }\n\n    public FopFactoryBuilder setStrictFOValidation(boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictFOValidation(validateStrictly);\n        return this;\n    }\n\n    public FopFactoryBuilder setStrictUserConfigValidation(boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictUserConfigValidation(validateStrictly);\n        return this;\n    }\n\n    public FopFactoryBuilder setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) {\n        fopFactoryConfigBuilder.setBreakIndentInheritanceOnReferenceAreaBoundary(value);\n        return this;\n    }\n\n    public FopFactoryBuilder setSourceResolution(float dpi) {\n        fopFactoryConfigBuilder.setSourceResolution(dpi);\n        return this;\n    }\n\n    public FopFactoryBuilder setTargetResolution(float dpi) {\n        fopFactoryConfigBuilder.setTargetResolution(dpi);\n        return this;\n    }\n\n    public FopFactoryBuilder setPageHeight(String pageHeight) {\n        fopFactoryConfigBuilder.setPageHeight(pageHeight);\n        return this;\n    }\n\n    public FopFactoryBuilder setPageWidth(String pageWidth) {\n        fopFactoryConfigBuilder.setPageWidth(pageWidth);\n        return this;\n    }\n\n    public FopFactoryBuilder ignoreNamespace(String namespaceURI) {\n        fopFactoryConfigBuilder.ignoreNamespace(namespaceURI);\n        return this;\n    }\n\n    public FopFactoryBuilder ignoreNamespaces(Collection<String> namespaceURIs) {\n        fopFactoryConfigBuilder.ignoreNamespaces(namespaceURIs);\n        return this;\n    }\n\n    public FopFactoryBuilder setConfiguration(Configuration cfg) {\n        return setConfiguration(cfg, true);\n    }\n\n    protected FopFactoryBuilder setConfiguration(Configuration cfg, boolean parse) {\n        fopFactoryConfigBuilder.setConfiguration(cfg);\n        if (parse) {\n            try {\n                new FopConfParser(cfg, this);\n            } catch (SAXException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return this;\n    }\n\n    public FopFactoryBuilder setPreferRenderer(boolean preferRenderer) {\n        fopFactoryConfigBuilder.setPreferRenderer(preferRenderer);\n        return this;\n    }\n\n    public FopFactoryBuilder setComplexScriptFeatures(boolean csf) {\n        fopFactoryConfigBuilder.setComplexScriptFeaturesEnabled(csf);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphPatNames(Map<String, String> hyphPatNames) {\n        fopFactoryConfigBuilder.setHyphPatNames(hyphPatNames);\n        return this;\n    }\n\n    public FopFactoryBuilder setTableBorderOverpaint(boolean b) {\n        fopFactoryConfigBuilder.setTableBorderOverpaint(b);\n        return this;\n    }\n\n    public FopFactoryBuilder setSimpleLineBreaking(boolean b) {\n        fopFactoryConfigBuilder.setSimpleLineBreaking(b);\n        return this;\n    }\n\n    public static class FopFactoryConfigImpl implements FopFactoryConfig {\n\n        private final EnvironmentProfile enviro;\n\n        private final ImageManager imageManager;\n\n        private boolean accessibility;\n        private boolean keepEmptyTags = true;\n        private LayoutManagerMaker layoutManagerMaker;\n        private URI baseURI;\n        private InternalResourceResolver hyphenationResourceResolver;\n        private boolean hasStrictFOValidation = true;\n        private boolean hasStrictUserValidation = FopFactoryConfig.DEFAULT_STRICT_USERCONFIG_VALIDATION;\n        private boolean breakIndentInheritanceOnReferenceBoundary = FopFactoryConfig.DEFAULT_BREAK_INDENT_INHERITANCE;\n        private float sourceResolution = FopFactoryConfig.DEFAULT_SOURCE_RESOLUTION;\n        private float targetResolution = FopFactoryConfig.DEFAULT_TARGET_RESOLUTION;\n        private String pageHeight = FopFactoryConfig.DEFAULT_PAGE_HEIGHT;\n        private String pageWidth = FopFactoryConfig.DEFAULT_PAGE_WIDTH;\n        \n        \n        private final Set<String> ignoredNamespaces = new HashSet<>();\n        private Set<String> cachedUnmodifiableIgnoredNamespaces = null;\n        private Configuration cfg;\n        private boolean preferRenderer;\n        private boolean isComplexScript = true;\n        private Map<String, String> hyphPatNames;\n        private boolean tableBorderOverpaint;\n        private boolean simpleLineBreaking;\n\n        private static final class ImageContextImpl implements ImageContext {\n            private final FopFactoryConfig config;\n            ImageContextImpl(FopFactoryConfig config) {\n                this.config = config;\n            }\n            public float getSourceResolution() {\n                return config.getSourceResolution();\n            }\n        }\n\n        FopFactoryConfigImpl(EnvironmentProfile enviro) {\n            this.enviro = enviro;\n            this.baseURI = enviro.getDefaultBaseURI();\n            this.imageManager = new ImageManager(new ImageContextImpl(this));\n        }\n\n        public boolean isAccessibilityEnabled() {\n            return accessibility;\n        }\n        public boolean isKeepEmptyTags() {\n            return keepEmptyTags;\n        }\n        public LayoutManagerMaker getLayoutManagerMakerOverride() {\n            return layoutManagerMaker;\n        }\n        public ResourceResolver getResourceResolver() {\n            return enviro.getResourceResolver();\n        }\n        public URI getBaseURI() {\n            return baseURI;\n        }\n        public InternalResourceResolver getHyphenationResourceResolver() {\n            return hyphenationResourceResolver;\n        }\n        public boolean validateStrictly() {\n            return hasStrictFOValidation;\n        }\n        public boolean validateUserConfigStrictly() {\n            return hasStrictUserValidation;\n        }\n        public boolean isBreakIndentInheritanceOnReferenceAreaBoundary() {\n            return breakIndentInheritanceOnReferenceBoundary;\n        }\n        public float getSourceResolution() {\n            return sourceResolution;\n        }\n        public float getTargetResolution() {\n            return targetResolution;\n        }\n        public String getPageHeight() {\n            return pageHeight;\n        }\n        public String getPageWidth() {\n            return pageWidth;\n        }\n        public Set<String> getIgnoredNamespaces() {\n            \n            if (cachedUnmodifiableIgnoredNamespaces == null) {\n                cachedUnmodifiableIgnoredNamespaces = Collections.unmodifiableSet(ignoredNamespaces);\n            }\n            return cachedUnmodifiableIgnoredNamespaces;\n        }\n        public boolean isNamespaceIgnored(String namespace) {\n            return ignoredNamespaces.contains(namespace);\n        }\n        public Configuration getUserConfig() {\n            return cfg;\n        }\n        public boolean preferRenderer() {\n            return preferRenderer;\n        }\n        public FontManager getFontManager() {\n            return enviro.getFontManager();\n        }\n        public ImageManager getImageManager() {\n            return imageManager;\n        }\n        public boolean isComplexScriptFeaturesEnabled() {\n            return isComplexScript;\n        }\n        public boolean isTableBorderOverpaint() {\n            return tableBorderOverpaint;\n        }\n        public boolean isSimpleLineBreaking() {\n            return simpleLineBreaking;\n        }\n        public Map<String, String> getHyphenationPatternNames() {\n            return hyphPatNames;\n        }\n        public FallbackResolver getFallbackResolver() {\n            return enviro.getFallbackResolver();\n        }\n        \n        private void onIgnoredNamespacesMutated() {\n            cachedUnmodifiableIgnoredNamespaces = null;\n        }\n    }\n\n    private interface FopFactoryConfigBuilder {\n        void setAccessibility(boolean enableAccessibility);\n        void setKeepEmptyTags(boolean b);\n        void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker);\n        void setBaseURI(URI baseURI);\n        void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver);\n        void setStrictFOValidation(boolean validateStrictly);\n        void setStrictUserConfigValidation(boolean validateStrictly);\n        void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value);\n        void setSourceResolution(float dpi);\n        void setTargetResolution(float dpi);\n        void setPageHeight(String pageHeight);\n        void setPageWidth(String pageWidth);\n        void ignoreNamespace(String namespaceURI);\n        void ignoreNamespaces(Collection<String> namespaceURIs);\n        void setConfiguration(Configuration cfg);\n        void setPreferRenderer(boolean preferRenderer);\n        void setComplexScriptFeaturesEnabled(boolean csf);\n        void setHyphPatNames(Map<String, String> hyphPatNames);\n        void setTableBorderOverpaint(boolean b);\n        void setSimpleLineBreaking(boolean b);\n    }\n\n    private static final class CompletedFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n        private static final CompletedFopFactoryConfigBuilder INSTANCE = new CompletedFopFactoryConfigBuilder();\n        private void throwIllegalStateException() {\n            throw new IllegalStateException(\"The final FOP Factory configuration has already been built\");\n        }\n        public void setAccessibility(boolean enableAccessibility) { throwIllegalStateException(); }\n        public void setKeepEmptyTags(boolean b) { throwIllegalStateException(); }\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) { throwIllegalStateException(); }\n        public void setBaseURI(URI baseURI) { throwIllegalStateException(); }\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) { throwIllegalStateException(); }\n        public void setStrictFOValidation(boolean validateStrictly) { throwIllegalStateException(); }\n        public void setStrictUserConfigValidation(boolean validateStrictly) { throwIllegalStateException(); }\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) { throwIllegalStateException(); }\n        public void setSourceResolution(float dpi) { throwIllegalStateException(); }\n        public void setTargetResolution(float dpi) { throwIllegalStateException(); }\n        public void setPageHeight(String pageHeight) { throwIllegalStateException(); }\n        public void setPageWidth(String pageWidth) { throwIllegalStateException(); }\n        public void ignoreNamespace(String namespaceURI) { throwIllegalStateException(); }\n        public void ignoreNamespaces(Collection<String> namespaceURIs) { throwIllegalStateException(); }\n        public void setConfiguration(Configuration cfg) { throwIllegalStateException(); }\n        public void setPreferRenderer(boolean preferRenderer) { throwIllegalStateException(); }\n        public void setComplexScriptFeaturesEnabled(boolean csf) { throwIllegalStateException(); }\n        public void setHyphPatNames(Map<String, String> hyphPatNames) { throwIllegalStateException(); }\n        public void setTableBorderOverpaint(boolean b) { throwIllegalStateException(); }\n        public void setSimpleLineBreaking(boolean b) { throwIllegalStateException(); }\n    }\n\n    private static final class ActiveFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n        private final FopFactoryConfigImpl config;\n        private ActiveFopFactoryConfigBuilder(FopFactoryConfigImpl config) {\n            this.config = config;\n        }\n        public void setAccessibility(boolean enableAccessibility) {\n            config.accessibility = enableAccessibility;\n        }\n        public void setKeepEmptyTags(boolean b) {\n            config.keepEmptyTags = b;\n        }\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n            config.layoutManagerMaker = lmMaker;\n        }\n        public void setBaseURI(URI baseURI) {\n            config.baseURI = baseURI;\n        }\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n            config.hyphenationResourceResolver = hyphenationResourceResolver;\n        }\n        public void setStrictFOValidation(boolean validateStrictly) {\n            config.hasStrictFOValidation = validateStrictly;\n        }\n        public void setStrictUserConfigValidation(boolean validateStrictly) {\n            config.hasStrictUserValidation = validateStrictly;\n        }\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) {\n            config.breakIndentInheritanceOnReferenceBoundary = value;\n        }\n        public void setSourceResolution(float dpi) {\n            config.sourceResolution = dpi;\n        }\n        public void setTargetResolution(float dpi) {\n            config.targetResolution = dpi;\n        }\n        public void setPageHeight(String pageHeight) {\n            config.pageHeight = pageHeight;\n        }\n        public void setPageWidth(String pageWidth) {\n            config.pageWidth = pageWidth;\n        }\n        public void ignoreNamespace(String namespaceURI) {\n            config.ignoredNamespaces.add(namespaceURI);\n            config.onIgnoredNamespacesMutated();\n        }\n        public void ignoreNamespaces(Collection<String> namespaceURIs) {\n            config.ignoredNamespaces.addAll(namespaceURIs);\n            config.onIgnoredNamespacesMutated();\n        }\n        public void setConfiguration(Configuration cfg) {\n            config.cfg = cfg;\n        }\n        public void setPreferRenderer(boolean preferRenderer) {\n            config.preferRenderer = preferRenderer;\n        }\n        public void setComplexScriptFeaturesEnabled(boolean csf) {\n            config.isComplexScript = csf;\n        }\n        public void setHyphPatNames(Map<String, String> hyphPatNames) {\n            config.hyphPatNames = hyphPatNames;\n        }\n        public void setTableBorderOverpaint(boolean b) {\n            config.tableBorderOverpaint = b;\n        }\n        public void setSimpleLineBreaking(boolean b) {\n            config.simpleLineBreaking = b;\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.apps;\n\nimport java.net.URI;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.HashSet;\n\nimport org.xml.sax.SAXException;\n\nimport org.apache.xmlgraphics.image.loader.ImageContext;\nimport org.apache.xmlgraphics.image.loader.ImageManager;\nimport org.apache.xmlgraphics.image.loader.impl.AbstractImageSessionContext.FallbackResolver;\nimport org.apache.xmlgraphics.io.ResourceResolver;\n\nimport org.apache.fop.apps.io.InternalResourceResolver;\nimport org.apache.fop.apps.io.ResourceResolverFactory;\nimport org.apache.fop.configuration.Configuration;\nimport org.apache.fop.fonts.FontManager;\nimport org.apache.fop.layoutmgr.LayoutManagerMaker;\n\npublic final class FopFactoryBuilder {\n\n    private final FopFactoryConfig config;\n    private FopFactoryConfigBuilder fopFactoryConfigBuilder;\n\n    public FopFactoryBuilder(URI defaultBaseURI) {\n        this(defaultBaseURI, ResourceResolverFactory.createDefaultResourceResolver());\n    }\n\n    public FopFactoryBuilder(URI defaultBaseURI, ResourceResolver resourceResolver) {\n        this(EnvironmentalProfileFactory.createDefault(defaultBaseURI, resourceResolver));\n    }\n\n    public FopFactoryBuilder(EnvironmentProfile enviro) {\n        config = new FopFactoryConfigImpl(enviro);\n        fopFactoryConfigBuilder = new ActiveFopFactoryConfigBuilder((FopFactoryConfigImpl) config);\n    }\n\n    public FopFactoryConfig buildConfig() {\n        return buildConfiguration();\n    }\n\n    FopFactoryConfig buildConfiguration() {\n        fopFactoryConfigBuilder = CompletedFopFactoryConfigBuilder.INSTANCE;\n        \n        return config;\n    }\n\n    public FopFactory build() {\n        return FopFactory.newInstance(buildConfiguration());\n    }\n\n    URI getBaseURI() {\n        return config.getBaseURI();\n    }\n\n    public FontManager getFontManager() {\n        return config.getFontManager();\n    }\n\n    public ImageManager getImageManager() {\n        return config.getImageManager();\n    }\n\n    public FopFactoryBuilder setAccessibility(boolean enableAccessibility) {\n        fopFactoryConfigBuilder.setAccessibility(enableAccessibility);\n        return this;\n    }\n\n    public FopFactoryBuilder setKeepEmptyTags(boolean b) {\n        fopFactoryConfigBuilder.setKeepEmptyTags(b);\n        return this;\n    }\n\n    public FopFactoryBuilder setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n        fopFactoryConfigBuilder.setLayoutManagerMakerOverride(lmMaker);\n        return this;\n    }\n\n    public FopFactoryBuilder setBaseURI(URI baseURI) {\n        fopFactoryConfigBuilder.setBaseURI(baseURI);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphenBaseResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n        fopFactoryConfigBuilder.setHyphenationResourceResolver(hyphenationResourceResolver);\n        return this;\n    }\n\n    public FopFactoryBuilder setStrictFOValidation(boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictFOValidation(validateStrictly);\n        return this;\n    }\n\n    public FopFactoryBuilder setStrictUserConfigValidation(boolean validateStrictly) {\n        fopFactoryConfigBuilder.setStrictUserConfigValidation(validateStrictly);\n        return this;\n    }\n\n    public FopFactoryBuilder setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) {\n        fopFactoryConfigBuilder.setBreakIndentInheritanceOnReferenceAreaBoundary(value);\n        return this;\n    }\n\n    public FopFactoryBuilder setSourceResolution(float dpi) {\n        fopFactoryConfigBuilder.setSourceResolution(dpi);\n        return this;\n    }\n\n    public FopFactoryBuilder setTargetResolution(float dpi) {\n        fopFactoryConfigBuilder.setTargetResolution(dpi);\n        return this;\n    }\n\n    public FopFactoryBuilder setPageHeight(String pageHeight) {\n        fopFactoryConfigBuilder.setPageHeight(pageHeight);\n        return this;\n    }\n\n    public FopFactoryBuilder setPageWidth(String pageWidth) {\n        fopFactoryConfigBuilder.setPageWidth(pageWidth);\n        return this;\n    }\n\n    public FopFactoryBuilder ignoreNamespace(String namespaceURI) {\n        fopFactoryConfigBuilder.ignoreNamespace(namespaceURI);\n        return this;\n    }\n\n    public FopFactoryBuilder ignoreNamespaces(Collection<String> namespaceURIs) {\n        fopFactoryConfigBuilder.ignoreNamespaces(namespaceURIs);\n        return this;\n    }\n\n    public FopFactoryBuilder setConfiguration(Configuration cfg) {\n        return setConfiguration(cfg, true);\n    }\n\n    protected FopFactoryBuilder setConfiguration(Configuration cfg, boolean parse) {\n        fopFactoryConfigBuilder.setConfiguration(cfg);\n        if (parse) {\n            try {\n                new FopConfParser(cfg, this);\n            } catch (SAXException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return this;\n    }\n\n    public FopFactoryBuilder setPreferRenderer(boolean preferRenderer) {\n        fopFactoryConfigBuilder.setPreferRenderer(preferRenderer);\n        return this;\n    }\n\n    public FopFactoryBuilder setComplexScriptFeatures(boolean csf) {\n        fopFactoryConfigBuilder.setComplexScriptFeaturesEnabled(csf);\n        return this;\n    }\n\n    public FopFactoryBuilder setHyphPatNames(Map<String, String> hyphPatNames) {\n        fopFactoryConfigBuilder.setHyphPatNames(hyphPatNames);\n        return this;\n    }\n\n    public FopFactoryBuilder setTableBorderOverpaint(boolean b) {\n        fopFactoryConfigBuilder.setTableBorderOverpaint(b);\n        return this;\n    }\n\n    public FopFactoryBuilder setSimpleLineBreaking(boolean b) {\n        fopFactoryConfigBuilder.setSimpleLineBreaking(b);\n        return this;\n    }\n\n    public static class FopFactoryConfigImpl implements FopFactoryConfig {\n\n        private final EnvironmentProfile enviro;\n        private final ImageManager imageManager;\n\n        private boolean accessibility;\n        private boolean keepEmptyTags = true;\n        private LayoutManagerMaker layoutManagerMaker;\n        private URI baseURI;\n        private InternalResourceResolver hyphenationResourceResolver;\n        private boolean hasStrictFOValidation = true;\n        private boolean hasStrictUserValidation = FopFactoryConfig.DEFAULT_STRICT_USERCONFIG_VALIDATION;\n        private boolean breakIndentInheritanceOnReferenceBoundary = FopFactoryConfig.DEFAULT_BREAK_INDENT_INHERITANCE;\n        private float sourceResolution = FopFactoryConfig.DEFAULT_SOURCE_RESOLUTION;\n        private float targetResolution = FopFactoryConfig.DEFAULT_TARGET_RESOLUTION;\n        private String pageHeight = FopFactoryConfig.DEFAULT_PAGE_HEIGHT;\n        private String pageWidth = FopFactoryConfig.DEFAULT_PAGE_WIDTH;\n        \n        private Set<String> ignoredNamespaces;\n        \n        private Set<String> cachedUnmodifiableIgnoredNamespaces;\n        private Configuration cfg;\n        private boolean preferRenderer;\n        private boolean isComplexScript = true;\n        private Map<String, String> hyphPatNames;\n        private boolean tableBorderOverpaint;\n        private boolean simpleLineBreaking;\n\n        private static final class ImageContextImpl implements ImageContext {\n            private final FopFactoryConfig config;\n            ImageContextImpl(FopFactoryConfig config) {\n                this.config = config;\n            }\n            public float getSourceResolution() {\n                return config.getSourceResolution();\n            }\n        }\n\n        FopFactoryConfigImpl(EnvironmentProfile enviro) {\n            this.enviro = enviro;\n            this.baseURI = enviro.getDefaultBaseURI();\n            this.imageManager = new ImageManager(new ImageContextImpl(this));\n        }\n\n        public boolean isAccessibilityEnabled() {\n            return accessibility;\n        }\n        public boolean isKeepEmptyTags() {\n            return keepEmptyTags;\n        }\n        public LayoutManagerMaker getLayoutManagerMakerOverride() {\n            return layoutManagerMaker;\n        }\n        public ResourceResolver getResourceResolver() {\n            return enviro.getResourceResolver();\n        }\n        public URI getBaseURI() {\n            return baseURI;\n        }\n        public InternalResourceResolver getHyphenationResourceResolver() {\n            return hyphenationResourceResolver;\n        }\n        public boolean validateStrictly() {\n            return hasStrictFOValidation;\n        }\n        public boolean validateUserConfigStrictly() {\n            return hasStrictUserValidation;\n        }\n        public boolean isBreakIndentInheritanceOnReferenceAreaBoundary() {\n            return breakIndentInheritanceOnReferenceBoundary;\n        }\n        public float getSourceResolution() {\n            return sourceResolution;\n        }\n        public float getTargetResolution() {\n            return targetResolution;\n        }\n        public String getPageHeight() {\n            return pageHeight;\n        }\n        public String getPageWidth() {\n            return pageWidth;\n        }\n        \n        public Set<String> getIgnoredNamespaces() {\n            if (ignoredNamespaces == null || ignoredNamespaces.isEmpty()) {\n                \n                return Collections.emptySet();\n            }\n            \n            if (cachedUnmodifiableIgnoredNamespaces == null) {\n                cachedUnmodifiableIgnoredNamespaces = Collections.unmodifiableSet(ignoredNamespaces);\n            }\n            return cachedUnmodifiableIgnoredNamespaces;\n        }\n        public boolean isNamespaceIgnored(String namespace) {\n            return ignoredNamespaces != null && ignoredNamespaces.contains(namespace);\n        }\n        public Configuration getUserConfig() {\n            return cfg;\n        }\n        public boolean preferRenderer() {\n            return preferRenderer;\n        }\n        public FontManager getFontManager() {\n            return enviro.getFontManager();\n        }\n        public ImageManager getImageManager() {\n            return imageManager;\n        }\n        public boolean isComplexScriptFeaturesEnabled() {\n            return isComplexScript;\n        }\n        public boolean isTableBorderOverpaint() {\n            return tableBorderOverpaint;\n        }\n        public boolean isSimpleLineBreaking() {\n            return simpleLineBreaking;\n        }\n        \n        public Map<String, String> getHyphenationPatternNames() {\n            if (hyphPatNames == null || hyphPatNames.isEmpty()) {\n                return Collections.emptyMap();\n            }\n            return Collections.unmodifiableMap(hyphPatNames);\n        }\n        public FallbackResolver getFallbackResolver() {\n            return enviro.getFallbackResolver();\n        }\n        \n        private void onIgnoredNamespacesMutated() {\n            cachedUnmodifiableIgnoredNamespaces = null;\n        }\n        \n        private void addIgnoredNamespace(String ns) {\n            if (ignoredNamespaces == null) {\n                ignoredNamespaces = new HashSet<>();\n            }\n            ignoredNamespaces.add(ns);\n            onIgnoredNamespacesMutated();\n        }\n        private void addIgnoredNamespaces(Collection<String> nss) {\n            if (nss == null || nss.isEmpty()) return;\n            if (ignoredNamespaces == null) {\n                ignoredNamespaces = new HashSet<>(nss);\n            } else {\n                ignoredNamespaces.addAll(nss);\n            }\n            onIgnoredNamespacesMutated();\n        }\n    }\n\n    private interface FopFactoryConfigBuilder {\n        void setAccessibility(boolean enableAccessibility);\n        void setKeepEmptyTags(boolean b);\n        void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker);\n        void setBaseURI(URI baseURI);\n        void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver);\n        void setStrictFOValidation(boolean validateStrictly);\n        void setStrictUserConfigValidation(boolean validateStrictly);\n        void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value);\n        void setSourceResolution(float dpi);\n        void setTargetResolution(float dpi);\n        void setPageHeight(String pageHeight);\n        void setPageWidth(String pageWidth);\n        void ignoreNamespace(String namespaceURI);\n        void ignoreNamespaces(Collection<String> namespaceURIs);\n        void setConfiguration(Configuration cfg);\n        void setPreferRenderer(boolean preferRenderer);\n        void setComplexScriptFeaturesEnabled(boolean csf);\n        void setHyphPatNames(Map<String, String> hyphPatNames);\n        void setTableBorderOverpaint(boolean b);\n        void setSimpleLineBreaking(boolean b);\n    }\n\n    private static final class CompletedFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n        private static final CompletedFopFactoryConfigBuilder INSTANCE = new CompletedFopFactoryConfigBuilder();\n        private void throwIllegalStateException() {\n            throw new IllegalStateException(\"The final FOP Factory configuration has already been built\");\n        }\n        public void setAccessibility(boolean enableAccessibility) { throwIllegalStateException(); }\n        public void setKeepEmptyTags(boolean b) { throwIllegalStateException(); }\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) { throwIllegalStateException(); }\n        public void setBaseURI(URI baseURI) { throwIllegalStateException(); }\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) { throwIllegalStateException(); }\n        public void setStrictFOValidation(boolean validateStrictly) { throwIllegalStateException(); }\n        public void setStrictUserConfigValidation(boolean validateStrictly) { throwIllegalStateException(); }\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) { throwIllegalStateException(); }\n        public void setSourceResolution(float dpi) { throwIllegalStateException(); }\n        public void setTargetResolution(float dpi) { throwIllegalStateException(); }\n        public void setPageHeight(String pageHeight) { throwIllegalStateException(); }\n        public void setPageWidth(String pageWidth) { throwIllegalStateException(); }\n        public void ignoreNamespace(String namespaceURI) { throwIllegalStateException(); }\n        public void ignoreNamespaces(Collection<String> namespaceURIs) { throwIllegalStateException(); }\n        public void setConfiguration(Configuration cfg) { throwIllegalStateException(); }\n        public void setPreferRenderer(boolean preferRenderer) { throwIllegalStateException(); }\n        public void setComplexScriptFeaturesEnabled(boolean csf) { throwIllegalStateException(); }\n        public void setHyphPatNames(Map<String, String> hyphPatNames) { throwIllegalStateException(); }\n        public void setTableBorderOverpaint(boolean b) { throwIllegalStateException(); }\n        public void setSimpleLineBreaking(boolean b) { throwIllegalStateException(); }\n    }\n\n    private static final class ActiveFopFactoryConfigBuilder implements FopFactoryConfigBuilder {\n        private final FopFactoryConfigImpl config;\n        private ActiveFopFactoryConfigBuilder(FopFactoryConfigImpl config) {\n            this.config = config;\n        }\n        public void setAccessibility(boolean enableAccessibility) {\n            config.accessibility = enableAccessibility;\n        }\n        public void setKeepEmptyTags(boolean b) {\n            config.keepEmptyTags = b;\n        }\n        public void setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker) {\n            config.layoutManagerMaker = lmMaker;\n        }\n        public void setBaseURI(URI baseURI) {\n            config.baseURI = baseURI;\n        }\n        public void setHyphenationResourceResolver(InternalResourceResolver hyphenationResourceResolver) {\n            config.hyphenationResourceResolver = hyphenationResourceResolver;\n        }\n        public void setStrictFOValidation(boolean validateStrictly) {\n            config.hasStrictFOValidation = validateStrictly;\n        }\n        public void setStrictUserConfigValidation(boolean validateStrictly) {\n            config.hasStrictUserValidation = validateStrictly;\n        }\n        public void setBreakIndentInheritanceOnReferenceAreaBoundary(boolean value) {\n            config.breakIndentInheritanceOnReferenceBoundary = value;\n        }\n        public void setSourceResolution(float dpi) {\n            config.sourceResolution = dpi;\n        }\n        public void setTargetResolution(float dpi) {\n            config.targetResolution = dpi;\n        }\n        public void setPageHeight(String pageHeight) {\n            config.pageHeight = pageHeight;\n        }\n        public void setPageWidth(String pageWidth) {\n            config.pageWidth = pageWidth;\n        }\n        public void ignoreNamespace(String namespaceURI) {\n            config.addIgnoredNamespace(namespaceURI);\n        }\n        public void ignoreNamespaces(Collection<String> namespaceURIs) {\n            config.addIgnoredNamespaces(namespaceURIs);\n        }\n        public void setConfiguration(Configuration cfg) {\n            config.cfg = cfg;\n        }\n        public void setPreferRenderer(boolean preferRenderer) {\n            config.preferRenderer = preferRenderer;\n        }\n        public void setComplexScriptFeaturesEnabled(boolean csf) {\n            config.isComplexScript = csf;\n        }\n        public void setHyphPatNames(Map<String, String> hyphPatNames) {\n            config.hyphPatNames = hyphPatNames;\n        }\n        public void setTableBorderOverpaint(boolean b) {\n            config.tableBorderOverpaint = b;\n        }\n        public void setSimpleLineBreaking(boolean b) {\n            config.simpleLineBreaking = b;\n        }\n    }\n}\n"
    ]
}