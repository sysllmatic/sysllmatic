{
    "0": [
        "\n\n\n\npackage org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Locale;\n\nimport org.apache.fop.util.LanguageTags;\n\n\npublic class PDFRoot extends PDFDictionary {\n\n    \n    public static final int PAGEMODE_USENONE = 0;\n\n    \n    public static final int PAGEMODE_USEOUTLINES = 1;\n\n    \n    public static final int PAGEMODE_USETHUMBS = 2;\n\n    \n    public static final int PAGEMODE_FULLSCREEN = 3;\n\n    private final PDFDocument document;\n\n    private PDFDPartRoot dPartRoot;\n    private PDFArray af;\n\n    private static final PDFName[] PAGEMODE_NAMES = new PDFName[] {\n        new PDFName(\"UseNone\"),\n        new PDFName(\"UseOutlines\"),\n        new PDFName(\"UseThumbs\"),\n        new PDFName(\"FullScreen\"),\n    };\n\n    \n    public PDFRoot(PDFDocument document, PDFPages pages) {\n        this.document = document;\n        setObjectNumber(document);\n        put(\"Type\", new PDFName(\"Catalog\"));\n        setRootPages(pages);\n        setLanguage(\"x-unknown\");\n    }\n\n    \n    public int output(OutputStream stream) throws IOException {\n        if (document.getProfile().getPDFUAMode().isEnabled()) {\n            PDFDictionary d = new PDFDictionary();\n            d.put(\"DisplayDocTitle\", true);\n            put(\"ViewerPreferences\", d);\n        }\n        getDocument().getProfile().verifyTaggedPDF();\n        return super.output(stream);\n    }\n\n    \n    public void setPageMode(int mode) {\n        put(\"PageMode\", PAGEMODE_NAMES[mode]);\n    }\n\n    \n    public int getPageMode() {\n        PDFName mode = (PDFName)get(\"PageMode\");\n        if (mode != null) {\n            for (int i = 0; i < PAGEMODE_NAMES.length; i++) {\n                if (PAGEMODE_NAMES[i].equals(mode)) {\n                    return i;\n                }\n            }\n            throw new IllegalStateException(\"Unknown /PageMode encountered: \" + mode);\n        } else {\n            return PAGEMODE_USENONE;\n        }\n    }\n\n    \n    public void addPage(PDFPage page) {\n        PDFPages pages = getRootPages();\n        pages.addPage(page);\n    }\n\n    \n    public void setRootPages(PDFPages pages) {\n        put(\"Pages\", pages.makeReference());\n    }\n\n    \n    public PDFPages getRootPages() {\n        PDFReference ref = (PDFReference)get(\"Pages\");\n        return (ref != null ? (PDFPages)ref.getObject() : null);\n    }\n\n    \n    public void setPageLabels(PDFPageLabels pageLabels) {\n        put(\"PageLabels\", pageLabels.makeReference());\n    }\n\n    \n    public PDFPageLabels getPageLabels() {\n        PDFReference ref = (PDFReference)get(\"PageLabels\");\n        return (ref != null ? (PDFPageLabels)ref.getObject() : null);\n    }\n\n    \n    public void setRootOutline(PDFOutline out) {\n        put(\"Outlines\", out.makeReference());\n\n        \n        PDFName mode = (PDFName)get(\"PageMode\");\n        if (mode == null) {\n            setPageMode(PAGEMODE_USEOUTLINES);\n        }\n    }\n\n    \n    public PDFOutline getRootOutline() {\n        PDFReference ref = (PDFReference)get(\"Outlines\");\n        return (ref != null ? (PDFOutline)ref.getObject() : null);\n    }\n\n    \n    public void setNames(PDFNames names) {\n        put(\"Names\", names.makeReference());\n    }\n\n    \n    public PDFNames getNames() {\n        PDFReference ref = (PDFReference)get(\"Names\");\n        return (ref != null ? (PDFNames)ref.getObject() : null);\n    }\n\n    \n    public void setMetadata(PDFMetadata meta) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            put(\"Metadata\", meta.makeReference());\n        }\n    }\n\n    \n    public PDFMetadata getMetadata() {\n        PDFReference ref = (PDFReference)get(\"Metadata\");\n        return (ref != null ? (PDFMetadata)ref.getObject() : null);\n    }\n\n    \n    public PDFArray getOutputIntents() {\n        return (PDFArray)get(\"OutputIntents\");\n    }\n\n    \n    public void addOutputIntent(PDFOutputIntent outputIntent) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            PDFArray outputIntents = getOutputIntents();\n            if (outputIntents == null) {\n                outputIntents = new PDFArray(this);\n                put(\"OutputIntents\", outputIntents);\n            }\n            outputIntents.add(outputIntent);\n        }\n    }\n\n    \n    void setVersion(Version version) {\n        put(\"Version\", new PDFName(version.toString()));\n    }\n\n    \n    public String getLanguage() {\n        return (String)get(\"Lang\");\n    }\n\n    \n    public void setLanguage(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException(\"locale must not be null\");\n        }\n        setLanguage(LanguageTags.toLanguageTag(locale));\n    }\n\n    private void setLanguage(String lang) {\n        put(\"Lang\", lang);\n    }\n\n    \n    public void setStructTreeRoot(PDFStructTreeRoot structTreeRoot) {\n        if (structTreeRoot == null) {\n            throw new NullPointerException(\"structTreeRoot must not be null\");\n        }\n        put(\"StructTreeRoot\", structTreeRoot);\n    }\n\n    \n    public PDFStructTreeRoot getStructTreeRoot() {\n        return (PDFStructTreeRoot)get(\"StructTreeRoot\");\n    }\n\n    \n    public void makeTagged() {\n        PDFDictionary dict = new PDFDictionary();\n        dict.put(\"Marked\", Boolean.TRUE);\n        put(\"MarkInfo\", dict);  \n    }\n\n    \n    public PDFDictionary getMarkInfo() {\n        return (PDFDictionary)get(\"MarkInfo\");\n    }\n\n    public PDFDPartRoot getDPartRoot() {\n        if (dPartRoot == null) {\n            dPartRoot = getDocument().getFactory().makeDPartRoot();\n            put(\"DPartRoot\", dPartRoot.makeReference());\n        }\n        return dPartRoot;\n    }\n\n    public void addAF(PDFFileSpec fileSpec) {\n        if (af == null) {\n            af = new PDFArray();\n            put(\"AF\", af);\n        }\n        af.add(fileSpec);\n        fileSpec.put(\"AFRelationship\", new PDFName(\"Data\"));\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Locale;\n\nimport org.apache.fop.util.LanguageTags;\n\npublic class PDFRoot extends PDFDictionary {\n\n    public static final int PAGEMODE_USENONE = 0;\n    public static final int PAGEMODE_USEOUTLINES = 1;\n    public static final int PAGEMODE_USETHUMBS = 2;\n    public static final int PAGEMODE_FULLSCREEN = 3;\n\n    private final PDFDocument document;\n    private PDFDPartRoot dPartRoot;\n    private PDFArray af;\n    private PDFArray outputIntents;\n\n    private static final PDFName[] PAGEMODE_NAMES = new PDFName[] {\n        new PDFName(\"UseNone\"),\n        new PDFName(\"UseOutlines\"),\n        new PDFName(\"UseThumbs\"),\n        new PDFName(\"FullScreen\"),\n    };\n\n    public PDFRoot(PDFDocument document, PDFPages pages) {\n        this.document = document;\n        setObjectNumber(document);\n        put(\"Type\", new PDFName(\"Catalog\"));\n        setRootPages(pages);\n        setLanguage(\"x-unknown\");\n    }\n\n    @Override\n    public int output(OutputStream stream) throws IOException {\n        \n        if (document.getProfile().getPDFUAMode().isEnabled()) {\n            PDFDictionary d = new PDFDictionary();\n            d.put(\"DisplayDocTitle\", true);\n            put(\"ViewerPreferences\", d);\n        }\n        document.getProfile().verifyTaggedPDF();\n        return super.output(stream);\n    }\n\n    public void setPageMode(int mode) {\n        put(\"PageMode\", PAGEMODE_NAMES[mode]);\n    }\n\n    public int getPageMode() {\n        PDFName mode = (PDFName) get(\"PageMode\");\n        if (mode != null) {\n            \n            for (int i = 0; i < PAGEMODE_NAMES.length; i++) {\n                if (PAGEMODE_NAMES[i].equals(mode)) {\n                    return i;\n                }\n            }\n            throw new IllegalStateException(\"Unknown /PageMode encountered: \" + mode);\n        } else {\n            return PAGEMODE_USENONE;\n        }\n    }\n\n    public void addPage(PDFPage page) {\n        PDFPages pages = getRootPages();\n        if (pages != null) {\n            pages.addPage(page);\n        }\n    }\n\n    public void setRootPages(PDFPages pages) {\n        put(\"Pages\", pages.makeReference());\n    }\n\n    public PDFPages getRootPages() {\n        Object obj = get(\"Pages\");\n        if (obj instanceof PDFReference) {\n            return (PDFPages) ((PDFReference) obj).getObject();\n        }\n        return null;\n    }\n\n    public void setPageLabels(PDFPageLabels pageLabels) {\n        put(\"PageLabels\", pageLabels.makeReference());\n    }\n\n    public PDFPageLabels getPageLabels() {\n        Object obj = get(\"PageLabels\");\n        if (obj instanceof PDFReference) {\n            return (PDFPageLabels) ((PDFReference) obj).getObject();\n        }\n        return null;\n    }\n\n    public void setRootOutline(PDFOutline out) {\n        put(\"Outlines\", out.makeReference());\n        \n        if (get(\"PageMode\") == null) {\n            setPageMode(PAGEMODE_USEOUTLINES);\n        }\n    }\n\n    public PDFOutline getRootOutline() {\n        Object obj = get(\"Outlines\");\n        if (obj instanceof PDFReference) {\n            return (PDFOutline) ((PDFReference) obj).getObject();\n        }\n        return null;\n    }\n\n    public void setNames(PDFNames names) {\n        put(\"Names\", names.makeReference());\n    }\n\n    public PDFNames getNames() {\n        Object obj = get(\"Names\");\n        if (obj instanceof PDFReference) {\n            return (PDFNames) ((PDFReference) obj).getObject();\n        }\n        return null;\n    }\n\n    public void setMetadata(PDFMetadata meta) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            put(\"Metadata\", meta.makeReference());\n        }\n    }\n\n    public PDFMetadata getMetadata() {\n        Object obj = get(\"Metadata\");\n        if (obj instanceof PDFReference) {\n            return (PDFMetadata) ((PDFReference) obj).getObject();\n        }\n        return null;\n    }\n\n    public PDFArray getOutputIntents() {\n        \n        if (outputIntents == null) {\n            Object obj = get(\"OutputIntents\");\n            if (obj instanceof PDFArray) {\n                outputIntents = (PDFArray) obj;\n            }\n        }\n        return outputIntents;\n    }\n\n    public void addOutputIntent(PDFOutputIntent outputIntent) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            if (outputIntents == null) {\n                Object obj = get(\"OutputIntents\");\n                if (obj instanceof PDFArray) {\n                    outputIntents = (PDFArray) obj;\n                } else {\n                    outputIntents = new PDFArray(this);\n                    put(\"OutputIntents\", outputIntents);\n                }\n            }\n            outputIntents.add(outputIntent);\n        }\n    }\n\n    void setVersion(Version version) {\n        put(\"Version\", new PDFName(version.toString()));\n    }\n\n    public String getLanguage() {\n        return (String) get(\"Lang\");\n    }\n\n    public void setLanguage(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException(\"locale must not be null\");\n        }\n        setLanguage(LanguageTags.toLanguageTag(locale));\n    }\n\n    private void setLanguage(String lang) {\n        put(\"Lang\", lang);\n    }\n\n    public void setStructTreeRoot(PDFStructTreeRoot structTreeRoot) {\n        if (structTreeRoot == null) {\n            throw new NullPointerException(\"structTreeRoot must not be null\");\n        }\n        put(\"StructTreeRoot\", structTreeRoot);\n    }\n\n    public PDFStructTreeRoot getStructTreeRoot() {\n        return (PDFStructTreeRoot) get(\"StructTreeRoot\");\n    }\n\n    public void makeTagged() {\n        PDFDictionary dict = new PDFDictionary();\n        dict.put(\"Marked\", Boolean.TRUE);\n        put(\"MarkInfo\", dict);\n    }\n\n    public PDFDictionary getMarkInfo() {\n        return (PDFDictionary) get(\"MarkInfo\");\n    }\n\n    public PDFDPartRoot getDPartRoot() {\n        if (dPartRoot == null) {\n            dPartRoot = getDocument().getFactory().makeDPartRoot();\n            put(\"DPartRoot\", dPartRoot.makeReference());\n        }\n        return dPartRoot;\n    }\n\n    public void addAF(PDFFileSpec fileSpec) {\n        \n        if (af == null) {\n            Object obj = get(\"AF\");\n            if (obj instanceof PDFArray) {\n                af = (PDFArray) obj;\n            } else {\n                af = new PDFArray();\n                put(\"AF\", af);\n            }\n        }\n        af.add(fileSpec);\n        fileSpec.put(\"AFRelationship\", new PDFName(\"Data\"));\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.fop.util.LanguageTags;\n\npublic class PDFRoot extends PDFDictionary {\n\n    public static final int PAGEMODE_USENONE = 0;\n    public static final int PAGEMODE_USEOUTLINES = 1;\n    public static final int PAGEMODE_USETHUMBS = 2;\n    public static final int PAGEMODE_FULLSCREEN = 3;\n\n    private final PDFDocument document;\n    private PDFDPartRoot dPartRoot;\n    private PDFArray af;\n    private PDFArray outputIntents;\n\n    private static final PDFName[] PAGEMODE_NAMES = new PDFName[] {\n        new PDFName(\"UseNone\"),\n        new PDFName(\"UseOutlines\"),\n        new PDFName(\"UseThumbs\"),\n        new PDFName(\"FullScreen\"),\n    };\n\n    private static final Map<PDFName, Integer> PAGEMODE_MAP = new HashMap<>();\n    static {\n        for (int i = 0; i < PAGEMODE_NAMES.length; i++) {\n            PAGEMODE_MAP.put(PAGEMODE_NAMES[i], i);\n        }\n    }\n\n    public PDFRoot(PDFDocument document, PDFPages pages) {\n        this.document = document;\n        setObjectNumber(document);\n        put(\"Type\", new PDFName(\"Catalog\"));\n        setRootPages(pages);\n        setLanguage(\"x-unknown\");\n    }\n\n    @Override\n    public int output(OutputStream stream) throws IOException {\n        if (document.getProfile().getPDFUAMode().isEnabled()) {\n            PDFDictionary d = new PDFDictionary();\n            d.put(\"DisplayDocTitle\", true);\n            put(\"ViewerPreferences\", d);\n        }\n        document.getProfile().verifyTaggedPDF();\n        return super.output(stream);\n    }\n\n    public void setPageMode(int mode) {\n        put(\"PageMode\", PAGEMODE_NAMES[mode]);\n    }\n\n    public int getPageMode() {\n        PDFName mode = (PDFName) get(\"PageMode\");\n        if (mode != null) {\n            Integer idx = PAGEMODE_MAP.get(mode);\n            if (idx != null) return idx;\n            throw new IllegalStateException(\"Unknown /PageMode encountered: \" + mode);\n        } else {\n            return PAGEMODE_USENONE;\n        }\n    }\n\n    public void addPage(PDFPage page) {\n        PDFPages pages = getRootPages();\n        if (pages != null) {\n            pages.addPage(page);\n        }\n    }\n\n    public void setRootPages(PDFPages pages) {\n        put(\"Pages\", pages.makeReference());\n    }\n\n    private <T> T getReferencedObject(String key, Class<T> clazz) {\n        Object obj = get(key);\n        if (obj instanceof PDFReference) {\n            Object resolved = ((PDFReference) obj).getObject();\n            if (clazz.isInstance(resolved)) {\n                return clazz.cast(resolved);\n            }\n        }\n        return null;\n    }\n\n    public PDFPages getRootPages() {\n        return getReferencedObject(\"Pages\", PDFPages.class);\n    }\n\n    public void setPageLabels(PDFPageLabels pageLabels) {\n        put(\"PageLabels\", pageLabels.makeReference());\n    }\n\n    public PDFPageLabels getPageLabels() {\n        return getReferencedObject(\"PageLabels\", PDFPageLabels.class);\n    }\n\n    public void setRootOutline(PDFOutline out) {\n        put(\"Outlines\", out.makeReference());\n        if (get(\"PageMode\") == null) {\n            setPageMode(PAGEMODE_USEOUTLINES);\n        }\n    }\n\n    public PDFOutline getRootOutline() {\n        return getReferencedObject(\"Outlines\", PDFOutline.class);\n    }\n\n    public void setNames(PDFNames names) {\n        put(\"Names\", names.makeReference());\n    }\n\n    public PDFNames getNames() {\n        return getReferencedObject(\"Names\", PDFNames.class);\n    }\n\n    public void setMetadata(PDFMetadata meta) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            put(\"Metadata\", meta.makeReference());\n        }\n    }\n\n    public PDFMetadata getMetadata() {\n        return getReferencedObject(\"Metadata\", PDFMetadata.class);\n    }\n\n    public PDFArray getOutputIntents() {\n        if (outputIntents == null) {\n            Object obj = get(\"OutputIntents\");\n            if (obj instanceof PDFArray) {\n                outputIntents = (PDFArray) obj;\n            }\n        }\n        return outputIntents;\n    }\n\n    public void addOutputIntent(PDFOutputIntent outputIntent) {\n        if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {\n            if (outputIntents == null) {\n                Object obj = get(\"OutputIntents\");\n                if (obj instanceof PDFArray) {\n                    outputIntents = (PDFArray) obj;\n                } else {\n                    outputIntents = new PDFArray(this);\n                    put(\"OutputIntents\", outputIntents);\n                }\n            }\n            outputIntents.add(outputIntent);\n        }\n    }\n\n    void setVersion(Version version) {\n        put(\"Version\", new PDFName(version.toString()));\n    }\n\n    public String getLanguage() {\n        return (String) get(\"Lang\");\n    }\n\n    public void setLanguage(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException(\"locale must not be null\");\n        }\n        setLanguage(LanguageTags.toLanguageTag(locale));\n    }\n\n    private void setLanguage(String lang) {\n        put(\"Lang\", lang);\n    }\n\n    public void setStructTreeRoot(PDFStructTreeRoot structTreeRoot) {\n        if (structTreeRoot == null) {\n            throw new NullPointerException(\"structTreeRoot must not be null\");\n        }\n        put(\"StructTreeRoot\", structTreeRoot);\n    }\n\n    public PDFStructTreeRoot getStructTreeRoot() {\n        return (PDFStructTreeRoot) get(\"StructTreeRoot\");\n    }\n\n    public void makeTagged() {\n        PDFDictionary dict = new PDFDictionary();\n        dict.put(\"Marked\", Boolean.TRUE);\n        put(\"MarkInfo\", dict);\n    }\n\n    public PDFDictionary getMarkInfo() {\n        return (PDFDictionary) get(\"MarkInfo\");\n    }\n\n    public PDFDPartRoot getDPartRoot() {\n        if (dPartRoot == null) {\n            dPartRoot = getDocument().getFactory().makeDPartRoot();\n            put(\"DPartRoot\", dPartRoot.makeReference());\n        }\n        return dPartRoot;\n    }\n\n    public void addAF(PDFFileSpec fileSpec) {\n        if (af == null) {\n            Object obj = get(\"AF\");\n            if (obj instanceof PDFArray) {\n                af = (PDFArray) obj;\n            } else {\n                af = new PDFArray();\n                put(\"AF\", af);\n            }\n        }\n        af.add(fileSpec);\n        fileSpec.put(\"AFRelationship\", new PDFName(\"Data\"));\n    }\n}\n"
    ]
}