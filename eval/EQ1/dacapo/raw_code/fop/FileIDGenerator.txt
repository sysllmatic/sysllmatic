{
    "0": [
        "\n\n\n\npackage org.apache.fop.pdf;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Random;\n\n\nabstract class FileIDGenerator {\n\n    abstract byte[] getOriginalFileID();\n\n    abstract byte[] getUpdatedFileID();\n\n    private static final class RandomFileIDGenerator extends FileIDGenerator {\n\n        private byte[] fileID;\n\n        private RandomFileIDGenerator() {\n            Random random = new Random();\n            fileID = new byte[16];\n            random.nextBytes(fileID);\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            return fileID;\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return fileID;\n        }\n\n    }\n\n    private static final class DigestFileIDGenerator extends FileIDGenerator {\n\n        private byte[] fileID;\n\n        private final PDFDocument document;\n\n        private final MessageDigest digest;\n\n        DigestFileIDGenerator(PDFDocument document) throws NoSuchAlgorithmException {\n            this.document = document;\n            this.digest = MessageDigest.getInstance(\"MD5\");\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            if (fileID == null) {\n                generateFileID();\n            }\n            return fileID;\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return getOriginalFileID();\n        }\n\n        private void generateFileID() {\n            DateFormat df = new SimpleDateFormat(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSS\");\n            digest.update(PDFDocument.encode(df.format(new Date())));\n            \n            \n            digest.update(PDFDocument.encode(String.valueOf(document.getCurrentFileSize())));\n            digest.update(document.getInfo().toPDF());\n            fileID = digest.digest();\n        }\n\n    }\n\n    \n    static FileIDGenerator getRandomFileIDGenerator() {\n        return new RandomFileIDGenerator();\n    }\n\n    \n    static FileIDGenerator getDigestFileIDGenerator(PDFDocument document)\n            throws NoSuchAlgorithmException {\n        return new DigestFileIDGenerator(document);\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.pdf;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Random;\n\nabstract class FileIDGenerator {\n\n    abstract byte[] getOriginalFileID();\n\n    abstract byte[] getUpdatedFileID();\n\n    private static final class RandomFileIDGenerator extends FileIDGenerator {\n\n        private final byte[] fileID;\n\n        private RandomFileIDGenerator() {\n            Random random = new Random();\n            fileID = new byte[16];\n            random.nextBytes(fileID);\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            return fileID;\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return fileID;\n        }\n\n    }\n\n    private static final class DigestFileIDGenerator extends FileIDGenerator {\n\n        private byte[] fileID;\n        private final PDFDocument document;\n        private final MessageDigest digest;\n        private final DateFormat dateFormat;\n        private final Date dateInstance;\n\n        DigestFileIDGenerator(PDFDocument document) throws NoSuchAlgorithmException {\n            this.document = document;\n            this.digest = MessageDigest.getInstance(\"MD5\");\n            this.dateFormat = new SimpleDateFormat(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSS\");\n            this.dateInstance = new Date();\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            if (fileID == null) {\n                generateFileID();\n            }\n            return fileID;\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return getOriginalFileID();\n        }\n\n        private void generateFileID() {\n            \n            dateInstance.setTime(System.currentTimeMillis());\n            String formattedDate = dateFormat.format(dateInstance);\n            digest.update(PDFDocument.encode(formattedDate));\n\n            String fileSizeStr = String.valueOf(document.getCurrentFileSize());\n            digest.update(PDFDocument.encode(fileSizeStr));\n            digest.update(document.getInfo().toPDF());\n            fileID = digest.digest();\n        }\n\n    }\n\n    static FileIDGenerator getRandomFileIDGenerator() {\n        return new RandomFileIDGenerator();\n    }\n\n    static FileIDGenerator getDigestFileIDGenerator(PDFDocument document)\n            throws NoSuchAlgorithmException {\n        return new DigestFileIDGenerator(document);\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.pdf;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\n\nabstract class FileIDGenerator {\n\n    abstract byte[] getOriginalFileID();\n\n    abstract byte[] getUpdatedFileID();\n\n    private static final class RandomFileIDGenerator extends FileIDGenerator {\n\n        private final byte[] fileID;\n\n        private RandomFileIDGenerator() {\n            SecureRandom random = new SecureRandom();\n            fileID = new byte[16];\n            random.nextBytes(fileID);\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            return Arrays.copyOf(fileID, fileID.length);\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return Arrays.copyOf(fileID, fileID.length);\n        }\n    }\n\n    private static final class DigestFileIDGenerator extends FileIDGenerator {\n\n        private byte[] fileID;\n        private final PDFDocument document;\n        private final MessageDigest digest;\n        \n        private static final DateTimeFormatter FORMATTER =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\")\n                .withZone(ZoneId.systemDefault());\n\n        DigestFileIDGenerator(PDFDocument document) throws NoSuchAlgorithmException {\n            this.document = document;\n            this.digest = MessageDigest.getInstance(\"MD5\");\n        }\n\n        @Override\n        byte[] getOriginalFileID() {\n            if (fileID == null) {\n                generateFileID();\n            }\n            return Arrays.copyOf(fileID, fileID.length);\n        }\n\n        @Override\n        byte[] getUpdatedFileID() {\n            return getOriginalFileID();\n        }\n\n        private void generateFileID() {\n            String formattedDate = FORMATTER.format(Instant.now());\n            digest.update(PDFDocument.encode(formattedDate));\n            String fileSizeStr = String.valueOf(document.getCurrentFileSize());\n            digest.update(PDFDocument.encode(fileSizeStr));\n            digest.update(document.getInfo().toPDF());\n            fileID = digest.digest();\n        }\n    }\n\n    static FileIDGenerator getRandomFileIDGenerator() {\n        return new RandomFileIDGenerator();\n    }\n\n    static FileIDGenerator getDigestFileIDGenerator(PDFDocument document)\n            throws NoSuchAlgorithmException {\n        return new DigestFileIDGenerator(document);\n    }\n}\n"
    ]
}