{
    "0": [
        "\n\n\n\npackage org.apache.fop.layoutmgr;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n\npublic class PositionIterator implements Iterator<Position> {\n\n    private Iterator parentIter;\n    private Object nextObj;\n    private LayoutManager childLM;\n    private boolean hasNext;\n\n    \n    public PositionIterator(Iterator parentIter) {\n        this.parentIter = parentIter;\n        lookAhead();\n        \n    }\n\n    \n    public LayoutManager getNextChildLM() {\n        \n        if (childLM == null && nextObj != null) {\n            childLM = getLM(nextObj);\n            hasNext = true;\n        }\n        return childLM;\n    }\n\n    \n    protected LayoutManager getLM(Object nextObj) {\n        return getPos(nextObj).getLM();\n    }\n\n    \n    protected Position getPos(Object nextObj) {\n        if (nextObj instanceof Position) {\n            return (Position)nextObj;\n        }\n        throw new IllegalArgumentException(\n                \"Cannot obtain Position from the given object.\");\n    }\n\n    private void lookAhead() {\n        if (parentIter.hasNext()) {\n            hasNext = true;\n            nextObj = parentIter.next();\n        } else {\n            endIter();\n        }\n    }\n\n    \n    protected boolean checkNext() {\n        LayoutManager lm = getLM(nextObj);\n        if (childLM == null) {\n            childLM = lm;\n        } else if (childLM != lm && lm != null) {\n            \n            hasNext = false;\n            childLM = null;\n            return false;\n        }\n        return true;\n    }\n\n    \n    protected void endIter() {\n        hasNext = false;\n        nextObj = null;\n        childLM = null;\n    }\n\n    \n    public boolean hasNext() {\n        return (hasNext && checkNext());\n    }\n\n\n    \n    public Position next() throws NoSuchElementException {\n        if (hasNext) {\n            Position retPos = getPos(nextObj);\n            lookAhead();\n            return retPos;\n        } else {\n            throw new NoSuchElementException(\"PosIter\");\n        }\n    }\n\n    \n    public Object peekNext() {\n        return nextObj;\n    }\n\n    \n    public void remove() throws UnsupportedOperationException {\n        throw new UnsupportedOperationException(\"PositionIterator doesn't support remove\");\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.layoutmgr;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class PositionIterator implements Iterator<Position> {\n    private final Iterator<?> parentIter;\n    private Object nextObj;\n    private LayoutManager childLM;\n    private boolean hasNext;\n\n    public PositionIterator(Iterator<?> parentIter) {\n        this.parentIter = parentIter;\n        lookAhead();\n    }\n\n    public LayoutManager getNextChildLM() {\n        if (childLM == null && nextObj != null) {\n            childLM = getLM(nextObj);\n            hasNext = true;\n        }\n        return childLM;\n    }\n\n    protected LayoutManager getLM(Object nextObj) {\n        return getPos(nextObj).getLM();\n    }\n\n    protected Position getPos(Object nextObj) {\n        if (nextObj instanceof Position) {\n            return (Position) nextObj;\n        }\n        throw new IllegalArgumentException(\n                \"Cannot obtain Position from the given object.\");\n    }\n\n    private void lookAhead() {\n        if (parentIter.hasNext()) {\n            hasNext = true;\n            nextObj = parentIter.next();\n        } else {\n            endIter();\n        }\n    }\n\n    protected boolean checkNext() {\n        LayoutManager lm = getLM(nextObj);\n        if (childLM == null) {\n            childLM = lm;\n        } else if (childLM != lm && lm != null) {\n            hasNext = false;\n            childLM = null;\n            return false;\n        }\n        return true;\n    }\n\n    protected void endIter() {\n        hasNext = false;\n        nextObj = null;\n        childLM = null;\n    }\n\n    public boolean hasNext() {\n        return (hasNext && checkNext());\n    }\n\n    public Position next() throws NoSuchElementException {\n        if (hasNext) {\n            Position retPos = getPos(nextObj);\n            lookAhead();\n            return retPos;\n        } else {\n            throw new NoSuchElementException(\"PosIter\");\n        }\n    }\n\n    public Object peekNext() {\n        return nextObj;\n    }\n\n    public void remove() throws UnsupportedOperationException {\n        throw new UnsupportedOperationException(\"PositionIterator doesn't support remove\");\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.layoutmgr;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class PositionIterator implements Iterator<Position> {\n    private final Iterator<?> parentIter;\n    private Object nextObj;\n    private Position cachedPosition; \n    private LayoutManager childLM;\n    private boolean hasNext;\n\n    public PositionIterator(Iterator<?> parentIter) {\n        this.parentIter = parentIter;\n        lookAhead();\n    }\n\n    public LayoutManager getNextChildLM() {\n        if (childLM == null && nextObj != null) {\n            childLM = getLM(nextObj);\n            \n        }\n        return childLM;\n    }\n\n    protected LayoutManager getLM(Object nextObj) {\n        return getPos(nextObj).getLM();\n    }\n\n    protected Position getPos(Object nextObj) {\n        \n        if (cachedPosition != null && cachedPosition == nextObj) {\n            return cachedPosition;\n        }\n        if (nextObj instanceof Position) {\n            cachedPosition = (Position) nextObj;\n            return cachedPosition;\n        }\n        throw new IllegalArgumentException(\n                \"Cannot obtain Position from the given object.\");\n    }\n\n    private void lookAhead() {\n        if (parentIter.hasNext()) {\n            hasNext = true;\n            nextObj = parentIter.next();\n            cachedPosition = null; \n        } else {\n            endIter();\n        }\n    }\n\n    protected boolean checkNext() {\n        LayoutManager lm = getLM(nextObj);\n        if (childLM == null) {\n            childLM = lm;\n        } else if (childLM != lm && lm != null) {\n            hasNext = false;\n            childLM = null;\n            return false;\n        }\n        return true;\n    }\n\n    protected void endIter() {\n        hasNext = false;\n        nextObj = null;\n        cachedPosition = null;\n        childLM = null;\n    }\n\n    public boolean hasNext() {\n        return (hasNext && checkNext());\n    }\n\n    public Position next() throws NoSuchElementException {\n        if (hasNext) {\n            Position retPos = getPos(nextObj);\n            lookAhead();\n            return retPos;\n        } else {\n            throw new NoSuchElementException(\"PosIter\");\n        }\n    }\n\n    public Object peekNext() {\n        return nextObj;\n    }\n\n    public void remove() throws UnsupportedOperationException {\n        throw new UnsupportedOperationException(\"PositionIterator doesn't support remove\");\n    }\n}\n"
    ]
}