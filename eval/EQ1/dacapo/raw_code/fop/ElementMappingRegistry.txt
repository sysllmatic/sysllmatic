{
    "0": [
        "\n\n\n\npackage org.apache.fop.fo;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport org.w3c.dom.DOMImplementation;\nimport org.xml.sax.Locator;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.Service;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FopFactory;\nimport org.apache.fop.fo.ElementMapping.Maker;\n\n\npublic class ElementMappingRegistry {\n\n    \n    private static final Log LOG = LogFactory.getLog(ElementMappingRegistry.class);\n\n    \n    protected Map<String, Map<String, Maker>> fobjTable\n    = new java.util.HashMap<String, Map<String, Maker>>();\n\n    \n    protected Map<String, ElementMapping> namespaces\n    = new java.util.HashMap<String, ElementMapping>();\n\n    \n    public ElementMappingRegistry(FopFactory factory) {\n        \n        setupDefaultMappings();\n    }\n\n    \n    private void setupDefaultMappings() {\n        \n        Iterator<String> providers = Service.providerNames(ElementMapping.class);\n        if (providers != null) {\n            while (providers.hasNext()) {\n                String mapping = providers.next();\n                try {\n                    addElementMapping(mapping);\n                } catch (IllegalArgumentException e) {\n                    LOG.warn(\"Error while adding element mapping\", e);\n                }\n\n            }\n        }\n    }\n\n    \n    public void addElementMapping(String mappingClassName)\n                throws IllegalArgumentException {\n        try {\n            ElementMapping mapping\n                = (ElementMapping)Class.forName(mappingClassName).getDeclaredConstructor().newInstance();\n            addElementMapping(mapping);\n        } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find \"\n                                               + mappingClassName);\n        } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\"Could not instantiate \"\n                                               + mappingClassName);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Could not access \"\n                                               + mappingClassName);\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(mappingClassName\n                                               + \" is not an ElementMapping\");\n        } catch (NoSuchMethodException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    \n    public void addElementMapping(ElementMapping mapping) {\n        this.fobjTable.put(mapping.getNamespaceURI(), mapping.getTable());\n        this.namespaces.put(mapping.getNamespaceURI().intern(), mapping);\n    }\n\n    \n    public Maker findFOMaker(String namespaceURI, String localName, Locator locator)\n                throws FOPException {\n        Map<String, Maker> table = fobjTable.get(namespaceURI);\n        Maker fobjMaker = null;\n        if (table != null) {\n            fobjMaker = table.get(localName);\n            \n            if (fobjMaker == null) {\n                fobjMaker = table.get(ElementMapping.DEFAULT);\n            }\n        }\n\n        if (fobjMaker == null) {\n            if (namespaces.containsKey(namespaceURI.intern())) {\n                  throw new FOPException(FONode.errorText(locator)\n                      + \"No element mapping definition found for \"\n                      + FONode.getNodeString(namespaceURI, localName), locator);\n            } else {\n                fobjMaker = new UnknownXMLObj.Maker(namespaceURI);\n            }\n        }\n        return fobjMaker;\n    }\n\n    \n    public DOMImplementation getDOMImplementationForNamespace(String namespaceURI) {\n        ElementMapping mapping = this.namespaces.get(namespaceURI);\n        if (mapping == null) {\n            return null;\n        } else {\n            return mapping.getDOMImplementation();\n        }\n    }\n\n    \n    public ElementMapping getElementMapping(String namespaceURI) {\n        return this.namespaces.get(namespaceURI);\n    }\n\n    \n    public boolean isKnownNamespace(String namespaceURI) {\n        return this.namespaces.containsKey(namespaceURI);\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.fo;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.w3c.dom.DOMImplementation;\nimport org.xml.sax.Locator;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.Service;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FopFactory;\nimport org.apache.fop.fo.ElementMapping.Maker;\n\npublic class ElementMappingRegistry {\n\n    private static final Log LOG = LogFactory.getLog(ElementMappingRegistry.class);\n\n    protected Map<String, Map<String, Maker>> fobjTable = new HashMap<>();\n    protected Map<String, ElementMapping> namespaces = new HashMap<>();\n    \n    private final Map<String, Maker> unknownMakers = new ConcurrentHashMap<>();\n\n    public ElementMappingRegistry(FopFactory factory) {\n        setupDefaultMappings();\n    }\n\n    private void setupDefaultMappings() {\n        Iterator<String> providers = Service.providerNames(ElementMapping.class);\n        if (providers != null) {\n            while (providers.hasNext()) {\n                String mapping = providers.next();\n                try {\n                    addElementMapping(mapping);\n                } catch (IllegalArgumentException e) {\n                    LOG.warn(\"Error while adding element mapping\", e);\n                }\n            }\n        }\n    }\n\n    public void addElementMapping(String mappingClassName) throws IllegalArgumentException {\n        try {\n            ElementMapping mapping = (ElementMapping) Class.forName(mappingClassName).getDeclaredConstructor().newInstance();\n            addElementMapping(mapping);\n        } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find \" + mappingClassName);\n        } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\"Could not instantiate \" + mappingClassName);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Could not access \" + mappingClassName);\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(mappingClassName + \" is not an ElementMapping\");\n        } catch (NoSuchMethodException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    public void addElementMapping(ElementMapping mapping) {\n        String ns = mapping.getNamespaceURI();\n        String nsKey = ns != null ? ns.intern() : null;\n        this.fobjTable.put(nsKey, mapping.getTable());\n        this.namespaces.put(nsKey, mapping);\n    }\n\n    public Maker findFOMaker(String namespaceURI, String localName, Locator locator) throws FOPException {\n        String nsKey = namespaceURI != null ? namespaceURI.intern() : null;\n        Map<String, Maker> table = fobjTable.get(nsKey);\n        Maker fobjMaker = null;\n        if (table != null) {\n            fobjMaker = table.get(localName);\n            if (fobjMaker == null) {\n                fobjMaker = table.get(ElementMapping.DEFAULT);\n            }\n        }\n        if (fobjMaker == null) {\n            if (namespaces.containsKey(nsKey)) {\n                throw new FOPException(FONode.errorText(locator)\n                        + \"No element mapping definition found for \"\n                        + FONode.getNodeString(namespaceURI, localName), locator);\n            } else {\n                \n                fobjMaker = unknownMakers.computeIfAbsent(nsKey, UnknownXMLObj.Maker::new);\n            }\n        }\n        return fobjMaker;\n    }\n\n    public DOMImplementation getDOMImplementationForNamespace(String namespaceURI) {\n        String nsKey = namespaceURI != null ? namespaceURI.intern() : null;\n        ElementMapping mapping = this.namespaces.get(nsKey);\n        if (mapping == null) {\n            return null;\n        } else {\n            return mapping.getDOMImplementation();\n        }\n    }\n\n    public ElementMapping getElementMapping(String namespaceURI) {\n        String nsKey = namespaceURI != null ? namespaceURI.intern() : null;\n        return this.namespaces.get(nsKey);\n    }\n\n    public boolean isKnownNamespace(String namespaceURI) {\n        String nsKey = namespaceURI != null ? namespaceURI.intern() : null;\n        return this.namespaces.containsKey(nsKey);\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.fo;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.w3c.dom.DOMImplementation;\nimport org.xml.sax.Locator;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.Service;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FopFactory;\nimport org.apache.fop.fo.ElementMapping.Maker;\n\npublic class ElementMappingRegistry {\n\n    private static final Log LOG = LogFactory.getLog(ElementMappingRegistry.class);\n\n    \n    protected final Map<String, Map<String, Maker>> fobjTable = new ConcurrentHashMap<>();\n    protected final Map<String, ElementMapping> namespaces = new ConcurrentHashMap<>();\n    private final Map<String, Maker> unknownMakers = new ConcurrentHashMap<>();\n\n    public ElementMappingRegistry(FopFactory factory) {\n        setupDefaultMappings();\n    }\n\n    private void setupDefaultMappings() {\n        Iterator<String> providers = Service.providerNames(ElementMapping.class);\n        if (providers != null) {\n            while (providers.hasNext()) {\n                String mapping = providers.next();\n                try {\n                    addElementMapping(mapping);\n                } catch (IllegalArgumentException e) {\n                    LOG.warn(\"Error while adding element mapping\", e);\n                }\n            }\n        }\n    }\n\n    public void addElementMapping(String mappingClassName) throws IllegalArgumentException {\n        try {\n            ElementMapping mapping = (ElementMapping) Class.forName(mappingClassName).getDeclaredConstructor().newInstance();\n            addElementMapping(mapping);\n        } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find \" + mappingClassName);\n        } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\"Could not instantiate \" + mappingClassName);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Could not access \" + mappingClassName);\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(mappingClassName + \" is not an ElementMapping\");\n        } catch (NoSuchMethodException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    public void addElementMapping(ElementMapping mapping) {\n        String nsKey = normalizeNamespaceKey(mapping.getNamespaceURI());\n        this.fobjTable.put(nsKey, mapping.getTable());\n        this.namespaces.put(nsKey, mapping);\n    }\n\n    public Maker findFOMaker(String namespaceURI, String localName, Locator locator) throws FOPException {\n        String nsKey = normalizeNamespaceKey(namespaceURI);\n        Map<String, Maker> table = fobjTable.get(nsKey);\n        Maker fobjMaker = null;\n        if (table != null) {\n            fobjMaker = table.get(localName);\n            if (fobjMaker == null) {\n                fobjMaker = table.get(ElementMapping.DEFAULT);\n            }\n        }\n        if (fobjMaker == null) {\n            if (namespaces.containsKey(nsKey)) {\n                throw new FOPException(FONode.errorText(locator)\n                        + \"No element mapping definition found for \"\n                        + FONode.getNodeString(namespaceURI, localName), locator);\n            } else {\n                fobjMaker = unknownMakers.computeIfAbsent(nsKey, UnknownXMLObj.Maker::new);\n            }\n        }\n        return fobjMaker;\n    }\n\n    public DOMImplementation getDOMImplementationForNamespace(String namespaceURI) {\n        String nsKey = normalizeNamespaceKey(namespaceURI);\n        ElementMapping mapping = this.namespaces.get(nsKey);\n        if (mapping == null) {\n            return null;\n        } else {\n            return mapping.getDOMImplementation();\n        }\n    }\n\n    public ElementMapping getElementMapping(String namespaceURI) {\n        String nsKey = normalizeNamespaceKey(namespaceURI);\n        return this.namespaces.get(nsKey);\n    }\n\n    public boolean isKnownNamespace(String namespaceURI) {\n        String nsKey = normalizeNamespaceKey(namespaceURI);\n        return this.namespaces.containsKey(nsKey);\n    }\n\n    \n    private static String normalizeNamespaceKey(String ns) {\n        return ns != null ? ns : \"\";\n    }\n}\n"
    ]
}