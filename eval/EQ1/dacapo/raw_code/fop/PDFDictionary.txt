{
    "0": [
        "\n\n\n\npackage org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.io.output.CountingOutputStream;\n\n\npublic class PDFDictionary extends PDFObject {\n    private boolean visited;\n    \n    protected Map<String, Object> entries = new java.util.HashMap<String, Object>();\n\n    \n    protected List<String> order = new java.util.ArrayList<String>();\n\n    \n    public PDFDictionary() {\n        super();\n    }\n\n    \n    public PDFDictionary(PDFObject parent) {\n        super(parent);\n    }\n\n    \n    public void put(String name, Object value) {\n        if (value instanceof PDFObject) {\n            PDFObject pdfObj = (PDFObject)value;\n            if (!pdfObj.hasObjectNumber()) {\n                pdfObj.setParent(this);\n            }\n        }\n        if (!entries.containsKey(name)) {\n            this.order.add(name);\n        }\n        this.entries.put(name, value);\n    }\n\n    \n    public void put(String name, int value) {\n        if (!entries.containsKey(name)) {\n            this.order.add(name);\n        }\n        this.entries.put(name, value);\n    }\n\n    \n    public Object get(String name) {\n        return this.entries.get(name);\n    }\n\n    \n    @Override\n    public int output(OutputStream stream) throws IOException {\n        CountingOutputStream cout = new CountingOutputStream(stream);\n        StringBuilder textBuffer = new StringBuilder(64);\n        writeDictionary(cout, textBuffer);\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        return cout.getCount();\n    }\n\n    \n    protected void writeDictionary(OutputStream out, StringBuilder textBuffer) throws IOException {\n        textBuffer.append(\"<<\");\n        boolean compact = (this.order.size() <= 2);\n        for (String key : this.order) {\n            if (compact) {\n                textBuffer.append(' ');\n            } else {\n                textBuffer.append(\"\\n  \");\n            }\n            textBuffer.append(PDFName.escapeName(key));\n            textBuffer.append(' ');\n            Object obj = this.entries.get(key);\n            formatObject(obj, out, textBuffer);\n        }\n        if (compact) {\n            textBuffer.append(' ');\n        } else {\n            textBuffer.append('\\n');\n        }\n        textBuffer.append(\">>\");\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        if (!visited) {\n            visited = true;\n            Map<String, Object> childrenMap = new HashMap<String, Object>(entries);\n            childrenMap.remove(\"Parent\");\n            getChildren(childrenMap.values(), children);\n            visited = false;\n        }\n    }\n\n    public static void getChildren(Collection<Object> values, Set<PDFObject> children) {\n        for (Object x : values) {\n            if (x instanceof PDFReference) {\n                x = ((PDFReference) x).getObject();\n            }\n            if (x instanceof PDFObject) {\n                if (((PDFObject) x).hasObjectNumber()) {\n                    children.add((PDFObject) x);\n                }\n                ((PDFObject) x).getChildren(children);\n            }\n        }\n    }\n\n    public Set<String> keySet() {\n        return entries.keySet();\n    }\n\n    \n    public boolean containsKey(String name) {\n        return this.entries.containsKey(name);\n    }\n\n    \n    public void remove(String name) {\n        entries.remove(name);\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.io.output.CountingOutputStream;\n\npublic class PDFDictionary extends PDFObject {\n    private boolean visited;\n    \n    protected Map<String, Object> entries = new java.util.HashMap<String, Object>();\n    protected List<String> order = new java.util.ArrayList<String>();\n\n    public PDFDictionary() {\n        super();\n    }\n\n    public PDFDictionary(PDFObject parent) {\n        super(parent);\n    }\n\n    public void put(String name, Object value) {\n        if (value instanceof PDFObject) {\n            PDFObject pdfObj = (PDFObject)value;\n            if (!pdfObj.hasObjectNumber()) {\n                pdfObj.setParent(this);\n            }\n        }\n        if (!entries.containsKey(name)) {\n            this.order.add(name);\n        }\n        this.entries.put(name, value);\n    }\n\n    public void put(String name, int value) {\n        if (!entries.containsKey(name)) {\n            this.order.add(name);\n        }\n        this.entries.put(name, value);\n    }\n\n    public Object get(String name) {\n        return this.entries.get(name);\n    }\n\n    @Override\n    public int output(OutputStream stream) throws IOException {\n        CountingOutputStream cout = new CountingOutputStream(stream);\n        StringBuilder textBuffer = new StringBuilder(64);\n        writeDictionary(cout, textBuffer);\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        return cout.getCount();\n    }\n\n    \n    protected void writeDictionary(OutputStream out, StringBuilder textBuffer) throws IOException {\n        textBuffer.append(\"<<\");\n        boolean compact = (this.order.size() <= 2);\n        for (String key : this.order) {\n            if (compact) {\n                textBuffer.append(' ');\n            } else {\n                textBuffer.append(\"\\n  \");\n            }\n            textBuffer.append(PDFName.escapeName(key));\n            textBuffer.append(' ');\n            \n            \n            Object obj = this.entries.get(key);\n            formatObject(obj, out, textBuffer);\n        }\n        if (compact) {\n            textBuffer.append(' ');\n        } else {\n            textBuffer.append('\\n');\n        }\n        textBuffer.append(\">>\");\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        if (!visited) {\n            visited = true;\n            \n            for (Map.Entry<String, Object> entry : entries.entrySet()) {\n                if (\"Parent\".equals(entry.getKey())) {\n                    continue;\n                }\n                Object value = entry.getValue();\n                getChildrenSingle(value, children);\n            }\n            visited = false;\n        }\n    }\n\n    \n    private static void getChildrenSingle(Object value, Set<PDFObject> children) {\n        if (value instanceof PDFReference) {\n            value = ((PDFReference) value).getObject();\n        }\n        if (value instanceof PDFObject) {\n            if (((PDFObject) value).hasObjectNumber()) {\n                children.add((PDFObject) value);\n            }\n            ((PDFObject) value).getChildren(children);\n        }\n    }\n\n    public static void getChildren(Collection<Object> values, Set<PDFObject> children) {\n        for (Object x : values) {\n            if (x instanceof PDFReference) {\n                x = ((PDFReference) x).getObject();\n            }\n            if (x instanceof PDFObject) {\n                if (((PDFObject) x).hasObjectNumber()) {\n                    children.add((PDFObject) x);\n                }\n                ((PDFObject) x).getChildren(children);\n            }\n        }\n    }\n\n    public Set<String> keySet() {\n        return entries.keySet();\n    }\n\n    public boolean containsKey(String name) {\n        return this.entries.containsKey(name);\n    }\n\n    public void remove(String name) {\n        entries.remove(name);\n    }\n}"
    ],
    "2": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.io.output.CountingOutputStream;\n\npublic class PDFDictionary extends PDFObject {\n    private boolean visited;\n    \n    \n    protected Map<String, Object> entries = new LinkedHashMap<>();\n\n    public PDFDictionary() {\n        super();\n    }\n\n    public PDFDictionary(PDFObject parent) {\n        super(parent);\n    }\n\n    public void put(String name, Object value) {\n        if (value instanceof PDFObject) {\n            PDFObject pdfObj = (PDFObject)value;\n            if (!pdfObj.hasObjectNumber()) {\n                pdfObj.setParent(this);\n            }\n        }\n        this.entries.put(name, value);\n    }\n\n    public void put(String name, int value) {\n        this.entries.put(name, value);\n    }\n\n    public Object get(String name) {\n        return this.entries.get(name);\n    }\n\n    @Override\n    public int output(OutputStream stream) throws IOException {\n        CountingOutputStream cout = new CountingOutputStream(stream);\n        StringBuilder textBuffer = new StringBuilder(64);\n        writeDictionary(cout, textBuffer);\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        return cout.getCount();\n    }\n\n    protected void writeDictionary(OutputStream out, StringBuilder textBuffer) throws IOException {\n        textBuffer.append(\"<<\");\n        boolean compact = (entries.size() <= 2);\n        for (Map.Entry<String, Object> entry : entries.entrySet()) {\n            String key = entry.getKey();\n            Object obj = entry.getValue();\n            if (compact) {\n                textBuffer.append(' ');\n            } else {\n                textBuffer.append(\"\\n  \");\n            }\n            textBuffer.append(PDFName.escapeName(key));\n            textBuffer.append(' ');\n            formatObject(obj, out, textBuffer);\n        }\n        if (compact) {\n            textBuffer.append(' ');\n        } else {\n            textBuffer.append('\\n');\n        }\n        textBuffer.append(\">>\");\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        if (!visited) {\n            visited = true;\n            for (Map.Entry<String, Object> entry : entries.entrySet()) {\n                if (\"Parent\".equals(entry.getKey())) {\n                    continue;\n                }\n                Object value = entry.getValue();\n                getChildrenSingle(value, children);\n            }\n            visited = false;\n        }\n    }\n\n    private static void getChildrenSingle(Object value, Set<PDFObject> children) {\n        if (value instanceof PDFReference) {\n            value = ((PDFReference) value).getObject();\n        }\n        if (value instanceof PDFObject) {\n            if (((PDFObject) value).hasObjectNumber()) {\n                children.add((PDFObject) value);\n            }\n            ((PDFObject) value).getChildren(children);\n        }\n    }\n\n    public static void getChildren(Collection<Object> values, Set<PDFObject> children) {\n        for (Object x : values) {\n            if (x instanceof PDFReference) {\n                x = ((PDFReference) x).getObject();\n            }\n            if (x instanceof PDFObject) {\n                if (((PDFObject) x).hasObjectNumber()) {\n                    children.add((PDFObject) x);\n                }\n                ((PDFObject) x).getChildren(children);\n            }\n        }\n    }\n\n    public Set<String> keySet() {\n        return entries.keySet();\n    }\n\n    public boolean containsKey(String name) {\n        return this.entries.containsKey(name);\n    }\n\n    public void remove(String name) {\n        entries.remove(name);\n    }\n}\n"
    ]
}