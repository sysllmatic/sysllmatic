{
    "0": [
        "\n\n\n\npackage org.apache.fop.fo;\n\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.xml.sax.Attributes;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.QName;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fo.properties.CommonAbsolutePosition;\nimport org.apache.fop.fo.properties.CommonAural;\nimport org.apache.fop.fo.properties.CommonBorderPaddingBackground;\nimport org.apache.fop.fo.properties.CommonFont;\nimport org.apache.fop.fo.properties.CommonHyphenation;\nimport org.apache.fop.fo.properties.CommonMarginBlock;\nimport org.apache.fop.fo.properties.CommonMarginInline;\nimport org.apache.fop.fo.properties.CommonRelativePosition;\nimport org.apache.fop.fo.properties.CommonTextDecoration;\nimport org.apache.fop.fo.properties.Property;\nimport org.apache.fop.fo.properties.PropertyMaker;\n\n\npublic abstract class PropertyList {\n\n    private static boolean[] inheritableProperty;\n\n    static {\n        inheritableProperty = new boolean[Constants.PROPERTY_COUNT + 1];\n        PropertyMaker maker = null;\n        for (int prop = 1; prop <= Constants.PROPERTY_COUNT; prop++) {\n            maker = findMaker(prop);\n            inheritableProperty[prop] = (maker != null && maker.isInherited());\n        }\n    }\n\n    \n    protected PropertyList parentPropertyList;\n    private FObj fobj;\n\n    private static Log log = LogFactory.getLog(PropertyList.class);\n\n    private final UnknownPropertyHandler unknownPropertyHandler = new UnknownPropertyHandler();\n\n    \n    public PropertyList(FObj fObjToAttach, PropertyList parentPropertyList) {\n        this.fobj = fObjToAttach;\n        this.parentPropertyList = parentPropertyList;\n    }\n\n    \n    public FObj getFObj() {\n        return this.fobj;\n    }\n\n    \n    public FObj getParentFObj() {\n        if (parentPropertyList != null) {\n            return parentPropertyList.getFObj();\n        } else {\n            return null;\n        }\n    }\n\n    \n    public void validatePropertyValue(String propertyValue, Property output, Property property) {\n        unknownPropertyHandler.validatePropertyValue(propertyValue, output, property);\n    }\n\n    \n    public Map<String, Property> getUnknownPropertyValues() {\n        return unknownPropertyHandler.getUnknownPropertyValues();\n    }\n\n    \n    public PropertyList getParentPropertyList() {\n        return parentPropertyList;\n    }\n\n    \n    public Property getExplicitOrShorthand(int propId) throws PropertyException {\n        \n        Property p = getExplicit(propId);\n        if (p == null) {\n            p = getShorthand(propId);\n        }\n        return p;\n    }\n\n    \n    private static class UnknownPropertyHandler {\n\n        \n        private Map<String, Property> unknownPropertyValues = new HashMap<String, Property>();\n\n        \n        private Set<Property> knownProperties = new HashSet<Property>();\n\n        void validatePropertyValue(String propertyValue, Property output, Property property) {\n            if (!knownProperties.contains(property) && output == null) {\n                if (propertyValue != null) {\n                    unknownPropertyValues.put(propertyValue, property);\n                }\n            } else {\n                knownProperties.add(property);\n            }\n        }\n\n        Map<String, Property> getUnknownPropertyValues() {\n            return unknownPropertyValues;\n        }\n    }\n\n    \n    public abstract Property getExplicit(int propId);\n\n    \n    public abstract void putExplicit(int propId, Property value);\n\n    \n    public Property getInherited(int propId) throws PropertyException {\n\n        if (isInherited(propId)) {\n            return getFromParent(propId);\n        } else {\n            \n            return makeProperty(propId);\n        }\n    }\n\n    \n    public Property get(int propId) throws PropertyException {\n        return get(propId, true, true);\n    }\n\n    \n    public Property get(int propId, boolean bTryInherit,\n                         boolean bTryDefault) throws PropertyException {\n\n        PropertyMaker propertyMaker = findMaker(propId & Constants.PROPERTY_MASK);\n        if (propertyMaker != null) {\n            return propertyMaker.get(propId & Constants.COMPOUND_MASK, this,\n                                         bTryInherit, bTryDefault);\n        }\n        return null;\n    }\n\n    \n    public Property getNearestSpecified(int propId) throws PropertyException {\n        Property p = null;\n        PropertyList pList = parentPropertyList;\n\n        while (pList != null) {\n            p = pList.getExplicit(propId);\n            if (p != null) {\n                return p;\n            } else {\n                pList = pList.parentPropertyList;\n            }\n        }\n\n        \n        \n        return makeProperty(propId);\n    }\n\n    \n    public Property getFromParent(int propId) throws PropertyException {\n        if (parentPropertyList != null) {\n            return parentPropertyList.get(propId);\n        } else {\n            return makeProperty(propId);\n        }\n    }\n\n    \n    public int selectFromWritingMode(int lrtb, int rltb, int tbrl, int tblr) {\n        int propID;\n        try {\n            switch (get(Constants.PR_WRITING_MODE).getEnum()) {\n            case Constants.EN_LR_TB:\n                propID = lrtb;\n                break;\n            case Constants.EN_RL_TB:\n                propID = rltb;\n                break;\n            case Constants.EN_TB_RL:\n                propID = tbrl;\n                break;\n            case Constants.EN_TB_LR:\n                propID = tblr;\n                break;\n            default:\n            propID = -1;\n                break;\n            }\n        } catch (PropertyException e) {\n            propID = -1;\n        }\n        return propID;\n    }\n\n    private String addAttributeToList(Attributes attributes,\n                                    String attributeName) throws ValidationException {\n        String attributeValue = attributes.getValue(attributeName);\n        if (attributeValue != null) {\n            convertAttributeToProperty(attributes, attributeName, attributeValue);\n        }\n        return attributeValue;\n    }\n\n    \n    public void addAttributesToList(Attributes attributes)\n                    throws ValidationException {\n        \n        addAttributeToList(attributes, \"writing-mode\");\n\n        \n        addAttributeToList(attributes, \"column-number\");\n        addAttributeToList(attributes, \"number-columns-spanned\");\n\n        \n        String checkValue = addAttributeToList(attributes, \"font\");\n        if (checkValue == null || \"\".equals(checkValue)) {\n            \n            addAttributeToList(attributes, \"font-size\");\n        }\n\n        String attributeNS;\n        String attributeName;\n        String attributeValue;\n        FOUserAgent userAgent = getFObj().getUserAgent();\n        for (int i = 0; i < attributes.getLength(); i++) {\n            \n            attributeNS = attributes.getURI(i);\n            attributeName = attributes.getQName(i);\n            attributeValue = attributes.getValue(i);\n            if (attributeNS == null || attributeNS.length() == 0\n                    || \"xml:lang\".equals(attributeName)\n                    || \"xml:base\".equals(attributeName)) {\n                convertAttributeToProperty(attributes, attributeName, attributeValue);\n            } else if (!userAgent.isNamespaceIgnored(attributeNS)) {\n                ElementMapping mapping = userAgent.getElementMappingRegistry().getElementMapping(\n                        attributeNS);\n                QName attr = new QName(attributeNS, attributeName);\n                if (mapping != null) {\n                    if (mapping.isAttributeProperty(attr)\n                            && mapping.getStandardPrefix() != null) {\n                        convertAttributeToProperty(attributes,\n                                mapping.getStandardPrefix() + \":\" + attr.getLocalName(),\n                                attributeValue);\n                    } else {\n                        getFObj().addForeignAttribute(attr, attributeValue);\n                    }\n                } else {\n                    handleInvalidProperty(attr);\n                }\n            }\n        }\n    }\n\n    \n    protected boolean isValidPropertyName(String propertyName) {\n\n        int propId = FOPropertyMapping.getPropertyId(\n                        findBasePropertyName(propertyName));\n        int subpropId = FOPropertyMapping.getSubPropertyId(\n                        findSubPropertyName(propertyName));\n\n        return !(propId == -1\n                || (subpropId == -1\n                && findSubPropertyName(propertyName) != null));\n    }\n\n    public Property getPropertyForAttribute(Attributes attributes, String attributeName, String attributeValue)\n            throws FOPException {\n        if (attributeValue != null) {\n            if (attributeName.startsWith(\"xmlns:\") || \"xmlns\".equals(attributeName)) {\n                return null;\n            }\n            String basePropertyName = findBasePropertyName(attributeName);\n            String subPropertyName = findSubPropertyName(attributeName);\n\n            int propId = FOPropertyMapping.getPropertyId(basePropertyName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(subPropertyName);\n\n            if (propId == -1 || (subpropId == -1 && subPropertyName != null)) {\n                return null;\n            }\n\n            return getExplicit(propId);\n        }\n        return null;\n    }\n\n    \n    private void convertAttributeToProperty(Attributes attributes,\n                                            String attributeName,\n                                            String attributeValue)\n                    throws ValidationException {\n\n        if (attributeName.startsWith(\"xmlns:\")\n                || \"xmlns\".equals(attributeName)) {\n            \n            return;\n        }\n\n        if (attributeValue != null) {\n            \n            String basePropertyName = findBasePropertyName(attributeName);\n            String subPropertyName = findSubPropertyName(attributeName);\n\n            int propId = FOPropertyMapping.getPropertyId(basePropertyName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(subPropertyName);\n\n            if (propId == -1\n                    || (subpropId == -1 && subPropertyName != null)) {\n                handleInvalidProperty(new QName(null, attributeName));\n            }\n            FObj parentFO = fobj.findNearestAncestorFObj();\n\n            PropertyMaker propertyMaker = findMaker(propId);\n            if (propertyMaker == null) {\n                log.warn(\"No PropertyMaker registered for \" + attributeName\n                        + \". Ignoring property.\");\n                return;\n            }\n\n            try {\n                Property prop = null;\n                if (subPropertyName == null) { \n                    \n                    if (getExplicit(propId) != null) {\n                        return;\n                    }\n                    prop = propertyMaker.make(this, attributeValue, parentFO);\n                } else { \n                    Property baseProperty\n                        = findBaseProperty(attributes, parentFO, propId,\n                                basePropertyName, propertyMaker);\n                    prop = propertyMaker.make(baseProperty, subpropId,\n                            this, attributeValue, parentFO);\n                }\n                if (prop != null) {\n                    putExplicit(propId, prop);\n                }\n            } catch (PropertyException e) {\n                fobj.getFOValidationEventProducer().invalidPropertyValue(this, fobj.getName(),\n                        attributeName, attributeValue, e, fobj.locator);\n            }\n        }\n    }\n\n    private Property findBaseProperty(Attributes attributes,\n                                      FObj parentFO,\n                                      int propId,\n                                      String basePropertyName,\n                                      PropertyMaker propertyMaker)\n            throws PropertyException {\n\n        \n\n        Property baseProperty = getExplicit(propId);\n\n        if (baseProperty != null) {\n            return baseProperty;\n        }\n\n        \n        String basePropertyValue = attributes.getValue(basePropertyName);\n\n        if (basePropertyValue != null && propertyMaker != null) {\n            baseProperty = propertyMaker.make(this, basePropertyValue,\n                                              parentFO);\n            return baseProperty;\n        }\n\n        return null;  \n    }\n\n    \n    protected void handleInvalidProperty(QName attr)\n                    throws ValidationException {\n        if (!attr.getQName().startsWith(\"xmlns\")) {\n            fobj.getFOValidationEventProducer().invalidProperty(this, fobj.getName(),\n                    attr, true, fobj.locator);\n        }\n    }\n\n    \n    protected static String findBasePropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String basePropertyName = attributeName;\n        if (separatorCharIndex > -1) {\n            basePropertyName = attributeName.substring(0, separatorCharIndex);\n        }\n        return basePropertyName;\n    }\n\n    \n    protected static String findSubPropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String subpropertyName = null;\n        if (separatorCharIndex > -1) {\n            subpropertyName = attributeName.substring(separatorCharIndex + 1);\n        }\n        return subpropertyName;\n    }\n\n    \n    private Property getShorthand(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n\n        if (propertyMaker != null) {\n            return propertyMaker.getShorthand(this);\n        } else {\n            \n            return null;\n        }\n    }\n\n    \n    private Property makeProperty(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n        if (propertyMaker != null) {\n            return propertyMaker.make(this);\n        } else {\n            \n            \n        }\n        return null;\n    }\n\n    \n    private boolean isInherited(int propId) {\n        return inheritableProperty[propId];\n    }\n\n    \n    private static PropertyMaker findMaker(int propId) {\n        if (propId < 1 || propId > Constants.PROPERTY_COUNT) {\n            return null;\n        } else {\n            return FObj.getPropertyMakerFor(propId);\n        }\n    }\n\n    \n    public CommonBorderPaddingBackground getBorderPaddingBackgroundProps()\n                throws PropertyException {\n        return CommonBorderPaddingBackground.getInstance(this);\n    }\n\n    \n    public CommonHyphenation getHyphenationProps() throws PropertyException {\n        return CommonHyphenation.getInstance(this);\n    }\n\n    \n    public CommonMarginBlock getMarginBlockProps() throws PropertyException {\n        return new CommonMarginBlock(this);\n    }\n\n    \n    public CommonMarginInline getMarginInlineProps() throws PropertyException {\n        return new CommonMarginInline(this);\n    }\n\n    \n    public CommonAural getAuralProps() throws PropertyException {\n        CommonAural props = new CommonAural(this);\n        return props;\n    }\n\n    \n    public CommonRelativePosition getRelativePositionProps() throws PropertyException {\n        return new CommonRelativePosition(this);\n    }\n\n    \n    public CommonAbsolutePosition getAbsolutePositionProps() throws PropertyException {\n        return new CommonAbsolutePosition(this);\n    }\n\n    \n    public CommonFont getFontProps() throws PropertyException {\n        return CommonFont.getInstance(this);\n    }\n\n    \n    public CommonTextDecoration getTextDecorationProps() throws PropertyException {\n        return CommonTextDecoration.createFromPropertyList(this);\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.fo;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.xml.sax.Attributes;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.QName;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fo.properties.CommonAbsolutePosition;\nimport org.apache.fop.fo.properties.CommonAural;\nimport org.apache.fop.fo.properties.CommonBorderPaddingBackground;\nimport org.apache.fop.fo.properties.CommonFont;\nimport org.apache.fop.fo.properties.CommonHyphenation;\nimport org.apache.fop.fo.properties.CommonMarginBlock;\nimport org.apache.fop.fo.properties.CommonMarginInline;\nimport org.apache.fop.fo.properties.CommonRelativePosition;\nimport org.apache.fop.fo.properties.CommonTextDecoration;\nimport org.apache.fop.fo.properties.Property;\nimport org.apache.fop.fo.properties.PropertyMaker;\n\npublic abstract class PropertyList {\n\n    private static boolean[] inheritableProperty;\n\n    static {\n        inheritableProperty = new boolean[Constants.PROPERTY_COUNT + 1];\n        PropertyMaker maker = null;\n        for (int prop = 1; prop <= Constants.PROPERTY_COUNT; prop++) {\n            maker = findMaker(prop);\n            inheritableProperty[prop] = (maker != null && maker.isInherited());\n        }\n    }\n\n    protected PropertyList parentPropertyList;\n    private FObj fobj;\n\n    private static Log log = LogFactory.getLog(PropertyList.class);\n\n    private final UnknownPropertyHandler unknownPropertyHandler = new UnknownPropertyHandler();\n\n    public PropertyList(FObj fObjToAttach, PropertyList parentPropertyList) {\n        this.fobj = fObjToAttach;\n        this.parentPropertyList = parentPropertyList;\n    }\n\n    public FObj getFObj() {\n        return this.fobj;\n    }\n\n    public FObj getParentFObj() {\n        if (parentPropertyList != null) {\n            return parentPropertyList.getFObj();\n        } else {\n            return null;\n        }\n    }\n\n    public void validatePropertyValue(String propertyValue, Property output, Property property) {\n        unknownPropertyHandler.validatePropertyValue(propertyValue, output, property);\n    }\n\n    public Map<String, Property> getUnknownPropertyValues() {\n        return unknownPropertyHandler.getUnknownPropertyValues();\n    }\n\n    public PropertyList getParentPropertyList() {\n        return parentPropertyList;\n    }\n\n    public Property getExplicitOrShorthand(int propId) throws PropertyException {\n        Property p = getExplicit(propId);\n        if (p == null) {\n            p = getShorthand(propId);\n        }\n        return p;\n    }\n\n    private static class UnknownPropertyHandler {\n        \n        private final Map<String, Property> unknownPropertyValues = new HashMap<>();\n        private final Set<Property> knownProperties = new HashSet<>();\n\n        void validatePropertyValue(String propertyValue, Property output, Property property) {\n            if (!knownProperties.contains(property) && output == null) {\n                if (propertyValue != null) {\n                    unknownPropertyValues.put(propertyValue, property);\n                }\n            } else {\n                knownProperties.add(property);\n            }\n        }\n\n        Map<String, Property> getUnknownPropertyValues() {\n            return unknownPropertyValues;\n        }\n    }\n\n    public abstract Property getExplicit(int propId);\n    public abstract void putExplicit(int propId, Property value);\n\n    public Property getInherited(int propId) throws PropertyException {\n        if (isInherited(propId)) {\n            return getFromParent(propId);\n        } else {\n            return makeProperty(propId);\n        }\n    }\n\n    public Property get(int propId) throws PropertyException {\n        return get(propId, true, true);\n    }\n\n    public Property get(int propId, boolean bTryInherit, boolean bTryDefault) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId & Constants.PROPERTY_MASK);\n        if (propertyMaker != null) {\n            return propertyMaker.get(propId & Constants.COMPOUND_MASK, this, bTryInherit, bTryDefault);\n        }\n        return null;\n    }\n\n    public Property getNearestSpecified(int propId) throws PropertyException {\n        Property p = null;\n        PropertyList pList = parentPropertyList;\n        while (pList != null) {\n            p = pList.getExplicit(propId);\n            if (p != null) {\n                return p;\n            } else {\n                pList = pList.parentPropertyList;\n            }\n        }\n        return makeProperty(propId);\n    }\n\n    public Property getFromParent(int propId) throws PropertyException {\n        if (parentPropertyList != null) {\n            return parentPropertyList.get(propId);\n        } else {\n            return makeProperty(propId);\n        }\n    }\n\n    public int selectFromWritingMode(int lrtb, int rltb, int tbrl, int tblr) {\n        int propID;\n        try {\n            switch (get(Constants.PR_WRITING_MODE).getEnum()) {\n            case Constants.EN_LR_TB:\n                propID = lrtb;\n                break;\n            case Constants.EN_RL_TB:\n                propID = rltb;\n                break;\n            case Constants.EN_TB_RL:\n                propID = tbrl;\n                break;\n            case Constants.EN_TB_LR:\n                propID = tblr;\n                break;\n            default:\n                propID = -1;\n                break;\n            }\n        } catch (PropertyException e) {\n            propID = -1;\n        }\n        return propID;\n    }\n\n    private String addAttributeToList(Attributes attributes, String attributeName) throws ValidationException {\n        String attributeValue = attributes.getValue(attributeName);\n        if (attributeValue != null) {\n            convertAttributeToProperty(attributes, attributeName, attributeValue);\n        }\n        return attributeValue;\n    }\n\n    public void addAttributesToList(Attributes attributes) throws ValidationException {\n        addAttributeToList(attributes, \"writing-mode\");\n        addAttributeToList(attributes, \"column-number\");\n        addAttributeToList(attributes, \"number-columns-spanned\");\n        String checkValue = addAttributeToList(attributes, \"font\");\n        if (checkValue == null || \"\".equals(checkValue)) {\n            addAttributeToList(attributes, \"font-size\");\n        }\n\n        FOUserAgent userAgent = getFObj().getUserAgent();\n        final int attrLen = attributes.getLength();\n        \n        String attributeNS, attributeName, attributeValue;\n        QName attrQName = null;\n        for (int i = 0; i < attrLen; i++) {\n            attributeNS = attributes.getURI(i);\n            attributeName = attributes.getQName(i);\n            attributeValue = attributes.getValue(i);\n            if (attributeNS == null || attributeNS.length() == 0\n                    || \"xml:lang\".equals(attributeName)\n                    || \"xml:base\".equals(attributeName)) {\n                convertAttributeToProperty(attributes, attributeName, attributeValue);\n            } else if (!userAgent.isNamespaceIgnored(attributeNS)) {\n                ElementMapping mapping = userAgent.getElementMappingRegistry().getElementMapping(attributeNS);\n                attrQName = null;\n                if (mapping != null) {\n                    attrQName = new QName(attributeNS, attributeName);\n                    if (mapping.isAttributeProperty(attrQName) && mapping.getStandardPrefix() != null) {\n                        String propName = mapping.getStandardPrefix() + \":\" + attrQName.getLocalName();\n                        convertAttributeToProperty(attributes, propName, attributeValue);\n                    } else {\n                        getFObj().addForeignAttribute(attrQName, attributeValue);\n                    }\n                } else {\n                    attrQName = new QName(attributeNS, attributeName);\n                    handleInvalidProperty(attrQName);\n                }\n            }\n        }\n    }\n\n    protected boolean isValidPropertyName(String propertyName) {\n        int propId = FOPropertyMapping.getPropertyId(findBasePropertyName(propertyName));\n        int subpropId = FOPropertyMapping.getSubPropertyId(findSubPropertyName(propertyName));\n        return !(propId == -1 || (subpropId == -1 && findSubPropertyName(propertyName) != null));\n    }\n\n    public Property getPropertyForAttribute(Attributes attributes, String attributeName, String attributeValue)\n            throws FOPException {\n        if (attributeValue != null) {\n            if (attributeName.startsWith(\"xmlns:\") || \"xmlns\".equals(attributeName)) {\n                return null;\n            }\n            String basePropertyName = findBasePropertyName(attributeName);\n            String subPropertyName = findSubPropertyName(attributeName);\n            int propId = FOPropertyMapping.getPropertyId(basePropertyName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(subPropertyName);\n            if (propId == -1 || (subpropId == -1 && subPropertyName != null)) {\n                return null;\n            }\n            return getExplicit(propId);\n        }\n        return null;\n    }\n\n    private void convertAttributeToProperty(Attributes attributes,\n                                            String attributeName,\n                                            String attributeValue)\n                    throws ValidationException {\n\n        if (attributeName.startsWith(\"xmlns:\")\n                || \"xmlns\".equals(attributeName)) {\n            return;\n        }\n\n        if (attributeValue != null) {\n            String basePropertyName = findBasePropertyName(attributeName);\n            String subPropertyName = findSubPropertyName(attributeName);\n            int propId = FOPropertyMapping.getPropertyId(basePropertyName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(subPropertyName);\n            if (propId == -1\n                    || (subpropId == -1 && subPropertyName != null)) {\n                handleInvalidProperty(new QName(null, attributeName));\n            }\n            FObj parentFO = fobj.findNearestAncestorFObj();\n            PropertyMaker propertyMaker = findMaker(propId);\n            if (propertyMaker == null) {\n                log.warn(\"No PropertyMaker registered for \" + attributeName\n                        + \". Ignoring property.\");\n                return;\n            }\n            try {\n                Property prop = null;\n                if (subPropertyName == null) {\n                    if (getExplicit(propId) != null) {\n                        return;\n                    }\n                    prop = propertyMaker.make(this, attributeValue, parentFO);\n                } else {\n                    Property baseProperty = findBaseProperty(attributes, parentFO, propId, basePropertyName, propertyMaker);\n                    prop = propertyMaker.make(baseProperty, subpropId,\n                            this, attributeValue, parentFO);\n                }\n                if (prop != null) {\n                    putExplicit(propId, prop);\n                }\n            } catch (PropertyException e) {\n                fobj.getFOValidationEventProducer().invalidPropertyValue(this, fobj.getName(),\n                        attributeName, attributeValue, e, fobj.locator);\n            }\n        }\n    }\n\n    private Property findBaseProperty(Attributes attributes,\n                                      FObj parentFO,\n                                      int propId,\n                                      String basePropertyName,\n                                      PropertyMaker propertyMaker)\n            throws PropertyException {\n        Property baseProperty = getExplicit(propId);\n        if (baseProperty != null) {\n            return baseProperty;\n        }\n        String basePropertyValue = attributes.getValue(basePropertyName);\n        if (basePropertyValue != null && propertyMaker != null) {\n            baseProperty = propertyMaker.make(this, basePropertyValue,\n                                              parentFO);\n            return baseProperty;\n        }\n        return null;\n    }\n\n    protected void handleInvalidProperty(QName attr)\n                    throws ValidationException {\n        if (!attr.getQName().startsWith(\"xmlns\")) {\n            fobj.getFOValidationEventProducer().invalidProperty(this, fobj.getName(),\n                    attr, true, fobj.locator);\n        }\n    }\n\n    protected static String findBasePropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String basePropertyName = attributeName;\n        if (separatorCharIndex > -1) {\n            basePropertyName = attributeName.substring(0, separatorCharIndex);\n        }\n        return basePropertyName;\n    }\n\n    protected static String findSubPropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String subpropertyName = null;\n        if (separatorCharIndex > -1) {\n            subpropertyName = attributeName.substring(separatorCharIndex + 1);\n        }\n        return subpropertyName;\n    }\n\n    private Property getShorthand(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n        if (propertyMaker != null) {\n            return propertyMaker.getShorthand(this);\n        } else {\n            return null;\n        }\n    }\n\n    private Property makeProperty(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n        if (propertyMaker != null) {\n            return propertyMaker.make(this);\n        }\n        return null;\n    }\n\n    private boolean isInherited(int propId) {\n        return inheritableProperty[propId];\n    }\n\n    private static PropertyMaker findMaker(int propId) {\n        if (propId < 1 || propId > Constants.PROPERTY_COUNT) {\n            return null;\n        } else {\n            return FObj.getPropertyMakerFor(propId);\n        }\n    }\n\n    public CommonBorderPaddingBackground getBorderPaddingBackgroundProps()\n                throws PropertyException {\n        return CommonBorderPaddingBackground.getInstance(this);\n    }\n\n    public CommonHyphenation getHyphenationProps() throws PropertyException {\n        return CommonHyphenation.getInstance(this);\n    }\n\n    public CommonMarginBlock getMarginBlockProps() throws PropertyException {\n        return new CommonMarginBlock(this);\n    }\n\n    public CommonMarginInline getMarginInlineProps() throws PropertyException {\n        return new CommonMarginInline(this);\n    }\n\n    public CommonAural getAuralProps() throws PropertyException {\n        return new CommonAural(this);\n    }\n\n    public CommonRelativePosition getRelativePositionProps() throws PropertyException {\n        return new CommonRelativePosition(this);\n    }\n\n    public CommonAbsolutePosition getAbsolutePositionProps() throws PropertyException {\n        return new CommonAbsolutePosition(this);\n    }\n\n    public CommonFont getFontProps() throws PropertyException {\n        return CommonFont.getInstance(this);\n    }\n\n    public CommonTextDecoration getTextDecorationProps() throws PropertyException {\n        return CommonTextDecoration.createFromPropertyList(this);\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.fo;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.xml.sax.Attributes;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.xmlgraphics.util.QName;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.fo.expr.PropertyException;\nimport org.apache.fop.fo.properties.*;\n\npublic abstract class PropertyList {\n\n    private static boolean[] inheritableProperty;\n\n    \n    private final Map<Integer, Property> inheritedCache = new HashMap<>();\n\n    static {\n        inheritableProperty = new boolean[Constants.PROPERTY_COUNT + 1];\n        PropertyMaker maker;\n        for (int prop = 1; prop <= Constants.PROPERTY_COUNT; prop++) {\n            maker = findMaker(prop);\n            inheritableProperty[prop] = (maker != null && maker.isInherited());\n        }\n    }\n\n    protected PropertyList parentPropertyList;\n    private FObj fobj;\n\n    private static Log log = LogFactory.getLog(PropertyList.class);\n    private final UnknownPropertyHandler unknownPropertyHandler = new UnknownPropertyHandler();\n\n    public PropertyList(FObj fObjToAttach, PropertyList parentPropertyList) {\n        this.fobj = fObjToAttach;\n        this.parentPropertyList = parentPropertyList;\n    }\n\n    public FObj getFObj() {\n        return this.fobj;\n    }\n\n    public FObj getParentFObj() {\n        return parentPropertyList != null ? parentPropertyList.getFObj() : null;\n    }\n\n    public void validatePropertyValue(String propertyValue, Property output, Property property) {\n        unknownPropertyHandler.validatePropertyValue(propertyValue, output, property);\n    }\n\n    public Map<String, Property> getUnknownPropertyValues() {\n        return unknownPropertyHandler.getUnknownPropertyValues();\n    }\n\n    public PropertyList getParentPropertyList() {\n        return parentPropertyList;\n    }\n\n    public Property getExplicitOrShorthand(int propId) throws PropertyException {\n        Property p = getExplicit(propId);\n        if (p == null) {\n            p = getShorthand(propId);\n        }\n        return p;\n    }\n\n    private static class UnknownPropertyHandler {\n        private final Map<String, Property> unknownPropertyValues = new HashMap<>();\n        private final Set<Property> knownProperties = new HashSet<>();\n\n        void validatePropertyValue(String propertyValue, Property output, Property property) {\n            if (!knownProperties.contains(property) && output == null) {\n                if (propertyValue != null) {\n                    unknownPropertyValues.put(propertyValue, property);\n                }\n            } else {\n                knownProperties.add(property);\n            }\n        }\n\n        Map<String, Property> getUnknownPropertyValues() {\n            return unknownPropertyValues;\n        }\n    }\n\n    public abstract Property getExplicit(int propId);\n    public abstract void putExplicit(int propId, Property value);\n\n    public Property getInherited(int propId) throws PropertyException {\n        if (isInherited(propId)) {\n            return getFromParent(propId);\n        } else {\n            return makeProperty(propId);\n        }\n    }\n\n    public Property get(int propId) throws PropertyException {\n        return get(propId, true, true);\n    }\n\n    public Property get(int propId, boolean bTryInherit, boolean bTryDefault) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId & Constants.PROPERTY_MASK);\n        if (propertyMaker != null) {\n            return propertyMaker.get(propId & Constants.COMPOUND_MASK, this, bTryInherit, bTryDefault);\n        }\n        return null;\n    }\n\n    public Property getNearestSpecified(int propId) throws PropertyException {\n        Property p = null;\n        PropertyList pList = parentPropertyList;\n        while (pList != null) {\n            p = pList.getExplicit(propId);\n            if (p != null) {\n                return p;\n            } else {\n                pList = pList.parentPropertyList;\n            }\n        }\n        return makeProperty(propId);\n    }\n\n    \n    public Property getFromParent(int propId) throws PropertyException {\n        Property cached = inheritedCache.get(propId);\n        if (cached != null) {\n            return cached;\n        }\n        Property result;\n        if (parentPropertyList != null) {\n            result = parentPropertyList.get(propId);\n        } else {\n            result = makeProperty(propId);\n        }\n        inheritedCache.put(propId, result);\n        return result;\n    }\n\n    public int selectFromWritingMode(int lrtb, int rltb, int tbrl, int tblr) {\n        int propID;\n        try {\n            switch (get(Constants.PR_WRITING_MODE).getEnum()) {\n            case Constants.EN_LR_TB:\n                propID = lrtb;\n                break;\n            case Constants.EN_RL_TB:\n                propID = rltb;\n                break;\n            case Constants.EN_TB_RL:\n                propID = tbrl;\n                break;\n            case Constants.EN_TB_LR:\n                propID = tblr;\n                break;\n            default:\n                propID = -1;\n                break;\n            }\n        } catch (PropertyException e) {\n            propID = -1;\n        }\n        return propID;\n    }\n\n    \n    private static class ParsedPropertyName {\n        final String baseName;\n        final String subName;\n        ParsedPropertyName(String attributeName) {\n            int idx = attributeName.indexOf('.');\n            if (idx > -1) {\n                baseName = attributeName.substring(0, idx);\n                subName = attributeName.substring(idx + 1);\n            } else {\n                baseName = attributeName;\n                subName = null;\n            }\n        }\n    }\n\n    private String addAttributeToList(Attributes attributes, String attributeName) throws ValidationException {\n        String attributeValue = attributes.getValue(attributeName);\n        if (attributeValue != null) {\n            convertAttributeToProperty(attributes, attributeName, attributeValue);\n        }\n        return attributeValue;\n    }\n\n    public void addAttributesToList(Attributes attributes) throws ValidationException {\n        addAttributeToList(attributes, \"writing-mode\");\n        addAttributeToList(attributes, \"column-number\");\n        addAttributeToList(attributes, \"number-columns-spanned\");\n        String checkValue = addAttributeToList(attributes, \"font\");\n        if (checkValue == null || \"\".equals(checkValue)) {\n            addAttributeToList(attributes, \"font-size\");\n        }\n\n        FOUserAgent userAgent = getFObj().getUserAgent();\n        final int attrLen = attributes.getLength();\n        String attributeNS, attributeName, attributeValue;\n        QName attrQName = null;\n        for (int i = 0; i < attrLen; i++) {\n            attributeNS = attributes.getURI(i);\n            attributeName = attributes.getQName(i);\n            attributeValue = attributes.getValue(i);\n            if (attributeNS == null || attributeNS.length() == 0\n                    || \"xml:lang\".equals(attributeName)\n                    || \"xml:base\".equals(attributeName)) {\n                convertAttributeToProperty(attributes, attributeName, attributeValue);\n            } else if (!userAgent.isNamespaceIgnored(attributeNS)) {\n                ElementMapping mapping = userAgent.getElementMappingRegistry().getElementMapping(attributeNS);\n                attrQName = null;\n                if (mapping != null) {\n                    attrQName = new QName(attributeNS, attributeName);\n                    if (mapping.isAttributeProperty(attrQName) && mapping.getStandardPrefix() != null) {\n                        String propName = mapping.getStandardPrefix() + \":\" + attrQName.getLocalName();\n                        convertAttributeToProperty(attributes, propName, attributeValue);\n                    } else {\n                        getFObj().addForeignAttribute(attrQName, attributeValue);\n                    }\n                } else {\n                    attrQName = new QName(attributeNS, attributeName);\n                    handleInvalidProperty(attrQName);\n                }\n            }\n        }\n    }\n\n    protected boolean isValidPropertyName(String propertyName) {\n        ParsedPropertyName parsed = new ParsedPropertyName(propertyName);\n        int propId = FOPropertyMapping.getPropertyId(parsed.baseName);\n        int subpropId = FOPropertyMapping.getSubPropertyId(parsed.subName);\n        return !(propId == -1 || (subpropId == -1 && parsed.subName != null));\n    }\n\n    public Property getPropertyForAttribute(Attributes attributes, String attributeName, String attributeValue)\n            throws FOPException {\n        if (attributeValue != null) {\n            if (attributeName.startsWith(\"xmlns:\") || \"xmlns\".equals(attributeName)) {\n                return null;\n            }\n            ParsedPropertyName parsed = new ParsedPropertyName(attributeName);\n            int propId = FOPropertyMapping.getPropertyId(parsed.baseName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(parsed.subName);\n            if (propId == -1 || (subpropId == -1 && parsed.subName != null)) {\n                return null;\n            }\n            return getExplicit(propId);\n        }\n        return null;\n    }\n\n    private void convertAttributeToProperty(Attributes attributes,\n                                            String attributeName,\n                                            String attributeValue)\n                    throws ValidationException {\n        if (attributeName.startsWith(\"xmlns:\") || \"xmlns\".equals(attributeName)) {\n            return;\n        }\n        if (attributeValue != null) {\n            ParsedPropertyName parsed = new ParsedPropertyName(attributeName);\n            int propId = FOPropertyMapping.getPropertyId(parsed.baseName);\n            int subpropId = FOPropertyMapping.getSubPropertyId(parsed.subName);\n            if (propId == -1 || (subpropId == -1 && parsed.subName != null)) {\n                handleInvalidProperty(new QName(null, attributeName));\n            }\n            FObj parentFO = fobj.findNearestAncestorFObj();\n            PropertyMaker propertyMaker = findMaker(propId);\n            if (propertyMaker == null) {\n                log.warn(\"No PropertyMaker registered for \" + attributeName + \". Ignoring property.\");\n                return;\n            }\n            try {\n                Property prop = null;\n                if (parsed.subName == null) {\n                    if (getExplicit(propId) != null) {\n                        return;\n                    }\n                    prop = propertyMaker.make(this, attributeValue, parentFO);\n                } else {\n                    Property baseProperty = findBaseProperty(attributes, parentFO, propId, parsed.baseName, propertyMaker);\n                    prop = propertyMaker.make(baseProperty, subpropId, this, attributeValue, parentFO);\n                }\n                if (prop != null) {\n                    putExplicit(propId, prop);\n                }\n            } catch (PropertyException e) {\n                fobj.getFOValidationEventProducer().invalidPropertyValue(this, fobj.getName(),\n                        attributeName, attributeValue, e, fobj.locator);\n            }\n        }\n    }\n\n    private Property findBaseProperty(Attributes attributes, FObj parentFO, int propId, String basePropertyName, PropertyMaker propertyMaker)\n            throws PropertyException {\n        Property baseProperty = getExplicit(propId);\n        if (baseProperty != null) {\n            return baseProperty;\n        }\n        String basePropertyValue = attributes.getValue(basePropertyName);\n        if (basePropertyValue != null && propertyMaker != null) {\n            baseProperty = propertyMaker.make(this, basePropertyValue, parentFO);\n            return baseProperty;\n        }\n        return null;\n    }\n\n    protected void handleInvalidProperty(QName attr) throws ValidationException {\n        if (!attr.getQName().startsWith(\"xmlns\")) {\n            fobj.getFOValidationEventProducer().invalidProperty(this, fobj.getName(),\n                    attr, true, fobj.locator);\n        }\n    }\n\n    protected static String findBasePropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String basePropertyName = attributeName;\n        if (separatorCharIndex > -1) {\n            basePropertyName = attributeName.substring(0, separatorCharIndex);\n        }\n        return basePropertyName;\n    }\n\n    protected static String findSubPropertyName(String attributeName) {\n        int separatorCharIndex = attributeName.indexOf('.');\n        String subpropertyName = null;\n        if (separatorCharIndex > -1) {\n            subpropertyName = attributeName.substring(separatorCharIndex + 1);\n        }\n        return subpropertyName;\n    }\n\n    private Property getShorthand(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n        if (propertyMaker != null) {\n            return propertyMaker.getShorthand(this);\n        } else {\n            return null;\n        }\n    }\n\n    private Property makeProperty(int propId) throws PropertyException {\n        PropertyMaker propertyMaker = findMaker(propId);\n        if (propertyMaker != null) {\n            return propertyMaker.make(this);\n        }\n        return null;\n    }\n\n    private boolean isInherited(int propId) {\n        return inheritableProperty[propId];\n    }\n\n    private static PropertyMaker findMaker(int propId) {\n        if (propId < 1 || propId > Constants.PROPERTY_COUNT) {\n            return null;\n        } else {\n            return FObj.getPropertyMakerFor(propId);\n        }\n    }\n\n    \n    protected void clearInheritedCache() {\n        inheritedCache.clear();\n    }\n\n    public CommonBorderPaddingBackground getBorderPaddingBackgroundProps() throws PropertyException {\n        return CommonBorderPaddingBackground.getInstance(this);\n    }\n    public CommonHyphenation getHyphenationProps() throws PropertyException {\n        return CommonHyphenation.getInstance(this);\n    }\n    public CommonMarginBlock getMarginBlockProps() throws PropertyException {\n        return new CommonMarginBlock(this);\n    }\n    public CommonMarginInline getMarginInlineProps() throws PropertyException {\n        return new CommonMarginInline(this);\n    }\n    public CommonAural getAuralProps() throws PropertyException {\n        return new CommonAural(this);\n    }\n    public CommonRelativePosition getRelativePositionProps() throws PropertyException {\n        return new CommonRelativePosition(this);\n    }\n    public CommonAbsolutePosition getAbsolutePositionProps() throws PropertyException {\n        return new CommonAbsolutePosition(this);\n    }\n    public CommonFont getFontProps() throws PropertyException {\n        return CommonFont.getInstance(this);\n    }\n    public CommonTextDecoration getTextDecorationProps() throws PropertyException {\n        return CommonTextDecoration.createFromPropertyList(this);\n    }\n}\n"
    ]
}