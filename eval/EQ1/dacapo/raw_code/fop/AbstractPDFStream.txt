{
    "0": [
        "\n\n\n\npackage org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Set;\n\nimport org.apache.commons.io.output.CountingOutputStream;\n\nimport org.apache.fop.util.CloseBlockerOutputStream;\n\n\npublic abstract class AbstractPDFStream extends PDFObject {\n\n    private final PDFDictionary dictionary;\n\n    \n    private PDFFilterList filters;\n\n    private boolean encodeOnTheFly;\n\n    private PDFNumber refLength = new PDFNumber();\n\n    protected AbstractPDFStream() {\n        this(true);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary) {\n        this(dictionary, true);\n    }\n\n    protected AbstractPDFStream(boolean encodeOnTheFly) {\n        this(new PDFDictionary(), encodeOnTheFly);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary, boolean encodeOnTheFly) {\n        this.dictionary = dictionary;\n        dictionary.setParent(this);\n        this.encodeOnTheFly = encodeOnTheFly;\n    }\n\n    protected final PDFDictionary getDictionary() {\n        return dictionary;\n    }\n\n    public Object get(String key) {\n        return dictionary.get(key);\n    }\n\n    \n    public void put(String key, Object value) {\n        dictionary.put(key, value);\n    }\n\n    \n    protected void setupFilterList() {\n        if (multipleFiltersAllowed() && !getFilterList().isInitialized()) {\n            getFilterList().addDefaultFilters(\n                getDocumentSafely().getFilterMap(),\n                getDefaultFilterName());\n        }\n        prepareImplicitFilters();\n        getDocument().applyEncryption(this);\n    }\n\n    \n    protected String getDefaultFilterName() {\n        return PDFFilterList.DEFAULT_FILTER;\n    }\n\n    \n    public PDFFilterList getFilterList() {\n        if (this.filters == null) {\n            if (getDocument() == null) {\n                this.filters = new PDFFilterList();\n            } else {\n                this.filters = new PDFFilterList(getDocument().isEncryptionActive());\n            }\n            boolean hasFilterEntries = (get(\"Filter\") != null);\n            if (hasFilterEntries) {\n                this.filters.setDisableAllFilters(true);\n            }\n        }\n        return this.filters;\n    }\n\n    \n    protected abstract int getSizeHint() throws IOException;\n\n    \n    protected abstract void outputRawStreamData(OutputStream out)\n            throws IOException;\n\n    \n    protected int outputStreamData(StreamCache encodedStream, OutputStream out) throws IOException {\n        int length = 0;\n        byte[] p = encode(\"\\nstream\\n\");\n        out.write(p);\n        length += p.length;\n\n        encodedStream.outputContents(out);\n        length += encodedStream.getSize();\n\n        p = encode(\"\\nendstream\");\n        out.write(p);\n        length += p.length;\n        return length;\n    }\n\n    \n    protected StreamCache encodeStream() throws IOException {\n        \n        final StreamCache encodedStream = StreamCacheFactory.getInstance()\n                .createStreamCache(getSizeHint());\n        OutputStream filteredOutput\n                = getFilterList().applyFilters(encodedStream.getOutputStream());\n        outputRawStreamData(filteredOutput);\n        filteredOutput.flush();\n        filteredOutput.close();\n        return encodedStream;\n    }\n\n    \n    protected int encodeAndWriteStream(OutputStream out, PDFNumber refLength)\n                throws IOException {\n        int bytesWritten = 0;\n        \n        byte[] buf = encode(\"\\nstream\\n\");\n        out.write(buf);\n        bytesWritten += buf.length;\n\n        \n        CloseBlockerOutputStream cbout = new CloseBlockerOutputStream(out);\n        CountingOutputStream cout = new CountingOutputStream(cbout);\n        OutputStream filteredOutput = getFilterList().applyFilters(cout);\n        outputRawStreamData(filteredOutput);\n        filteredOutput.close();\n        refLength.setNumber(cout.getCount());\n        bytesWritten += cout.getCount();\n\n        \n        buf = encode(\"\\nendstream\");\n        out.write(buf);\n        bytesWritten += buf.length;\n\n        return bytesWritten;\n    }\n\n    \n    @Override\n    public int output(OutputStream stream) throws IOException {\n        setupFilterList();\n\n        CountingOutputStream cout = new CountingOutputStream(stream);\n        StringBuilder textBuffer = new StringBuilder(64);\n\n        StreamCache encodedStream = null;\n        final Object lengthEntry;\n        if (encodeOnTheFly) {\n            if (!refLength.hasObjectNumber()) {\n                registerChildren();\n            }\n            lengthEntry = refLength;\n        } else {\n            encodedStream = encodeStream();\n            lengthEntry = encodedStream.getSize();\n        }\n\n        populateStreamDict(lengthEntry);\n        dictionary.writeDictionary(cout, textBuffer);\n\n        \n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        if (encodedStream == null) {\n            encodeAndWriteStream(cout, refLength);\n        } else {\n            outputStreamData(encodedStream, cout);\n            encodedStream.clear(); \n        }\n\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        return cout.getCount();\n    }\n\n    @Override\n    public void setDocument(PDFDocument doc) {\n        dictionary.setDocument(doc);\n        super.setDocument(doc);\n    }\n\n    \n    protected void populateStreamDict(Object lengthEntry) {\n        put(\"Length\", lengthEntry);\n        if (!getFilterList().isDisableAllFilters()) {\n            getFilterList().putFilterDictEntries(dictionary);\n        }\n    }\n\n    \n    protected void prepareImplicitFilters() {\n        \n    }\n\n    \n    protected boolean multipleFiltersAllowed() {\n        return true;\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        dictionary.getChildren(children);\n        if (encodeOnTheFly) {\n            children.add(refLength);\n        }\n    }\n\n    public void registerChildren() {\n        if (encodeOnTheFly) {\n            getDocument().registerObject(refLength);\n        }\n    }\n}\n"
    ],
    "1": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.BufferedOutputStream;\nimport java.util.Set;\n\nimport org.apache.commons.io.output.CountingOutputStream;\nimport org.apache.fop.util.CloseBlockerOutputStream;\n\npublic abstract class AbstractPDFStream extends PDFObject {\n\n    private static final byte[] STREAM_HEADER = encodeStatic(\"\\nstream\\n\");\n    private static final byte[] STREAM_FOOTER = encodeStatic(\"\\nendstream\");\n\n    \n    private static byte[] encodeStatic(String s) {\n        \n        \n        \n        try {\n            return s.getBytes(\"ISO-8859-1\");\n        } catch (Exception e) {\n            \n            return s.getBytes();\n        }\n    }\n\n    private final PDFDictionary dictionary;\n    private PDFFilterList filters;\n    private boolean encodeOnTheFly;\n    private PDFNumber refLength = new PDFNumber();\n\n    protected AbstractPDFStream() {\n        this(true);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary) {\n        this(dictionary, true);\n    }\n\n    protected AbstractPDFStream(boolean encodeOnTheFly) {\n        this(new PDFDictionary(), encodeOnTheFly);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary, boolean encodeOnTheFly) {\n        this.dictionary = dictionary;\n        dictionary.setParent(this);\n        this.encodeOnTheFly = encodeOnTheFly;\n    }\n\n    protected final PDFDictionary getDictionary() {\n        return dictionary;\n    }\n\n    public Object get(String key) {\n        return dictionary.get(key);\n    }\n\n    public void put(String key, Object value) {\n        dictionary.put(key, value);\n    }\n\n    protected void setupFilterList() {\n        if (multipleFiltersAllowed() && !getFilterList().isInitialized()) {\n            getFilterList().addDefaultFilters(\n                getDocumentSafely().getFilterMap(),\n                getDefaultFilterName());\n        }\n        prepareImplicitFilters();\n        getDocument().applyEncryption(this);\n    }\n\n    protected String getDefaultFilterName() {\n        return PDFFilterList.DEFAULT_FILTER;\n    }\n\n    public PDFFilterList getFilterList() {\n        if (this.filters == null) {\n            if (getDocument() == null) {\n                this.filters = new PDFFilterList();\n            } else {\n                this.filters = new PDFFilterList(getDocument().isEncryptionActive());\n            }\n            boolean hasFilterEntries = (get(\"Filter\") != null);\n            if (hasFilterEntries) {\n                this.filters.setDisableAllFilters(true);\n            }\n        }\n        return this.filters;\n    }\n\n    protected abstract int getSizeHint() throws IOException;\n\n    protected abstract void outputRawStreamData(OutputStream out)\n            throws IOException;\n\n    protected int outputStreamData(StreamCache encodedStream, OutputStream out) throws IOException {\n        int length = 0;\n        out.write(STREAM_HEADER);\n        length += STREAM_HEADER.length;\n\n        encodedStream.outputContents(out);\n        length += encodedStream.getSize();\n\n        out.write(STREAM_FOOTER);\n        length += STREAM_FOOTER.length;\n        return length;\n    }\n\n    protected StreamCache encodeStream() throws IOException {\n        final StreamCache encodedStream = StreamCacheFactory.getInstance()\n                .createStreamCache(getSizeHint());\n        OutputStream filteredOutput\n                = getFilterList().applyFilters(encodedStream.getOutputStream());\n        outputRawStreamData(filteredOutput);\n        filteredOutput.flush();\n        filteredOutput.close();\n        return encodedStream;\n    }\n\n    protected int encodeAndWriteStream(OutputStream out, PDFNumber refLength)\n                throws IOException {\n        int bytesWritten = 0;\n\n        out.write(STREAM_HEADER);\n        bytesWritten += STREAM_HEADER.length;\n\n        CloseBlockerOutputStream cbout = new CloseBlockerOutputStream(out);\n        CountingOutputStream cout = new CountingOutputStream(cbout);\n        OutputStream filteredOutput = getFilterList().applyFilters(cout);\n        outputRawStreamData(filteredOutput);\n        filteredOutput.close();\n        refLength.setNumber(cout.getCount());\n        bytesWritten += cout.getCount();\n\n        out.write(STREAM_FOOTER);\n        bytesWritten += STREAM_FOOTER.length;\n\n        return bytesWritten;\n    }\n\n    @Override\n    public int output(OutputStream stream) throws IOException {\n        setupFilterList();\n\n        \n        OutputStream bufferedStream = (stream instanceof BufferedOutputStream) ? stream : new BufferedOutputStream(stream, 8192);\n        CountingOutputStream cout = new CountingOutputStream(bufferedStream);\n        \n        StringBuilder textBuffer = new StringBuilder(128);\n\n        StreamCache encodedStream = null;\n        final Object lengthEntry;\n        if (encodeOnTheFly) {\n            if (!refLength.hasObjectNumber()) {\n                registerChildren();\n            }\n            lengthEntry = refLength;\n        } else {\n            encodedStream = encodeStream();\n            lengthEntry = encodedStream.getSize();\n        }\n\n        populateStreamDict(lengthEntry);\n        dictionary.writeDictionary(cout, textBuffer);\n\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        if (encodedStream == null) {\n            encodeAndWriteStream(cout, refLength);\n        } else {\n            outputStreamData(encodedStream, cout);\n            encodedStream.clear(); \n        }\n\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        cout.flush(); \n        return cout.getCount();\n    }\n\n    @Override\n    public void setDocument(PDFDocument doc) {\n        dictionary.setDocument(doc);\n        super.setDocument(doc);\n    }\n\n    protected void populateStreamDict(Object lengthEntry) {\n        put(\"Length\", lengthEntry);\n        if (!getFilterList().isDisableAllFilters()) {\n            getFilterList().putFilterDictEntries(dictionary);\n        }\n    }\n\n    protected void prepareImplicitFilters() {\n        \n    }\n\n    protected boolean multipleFiltersAllowed() {\n        return true;\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        dictionary.getChildren(children);\n        if (encodeOnTheFly) {\n            children.add(refLength);\n        }\n    }\n\n    public void registerChildren() {\n        if (encodeOnTheFly) {\n            getDocument().registerObject(refLength);\n        }\n    }\n\n    \n}\n"
    ],
    "2": [
        "package org.apache.fop.pdf;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.BufferedOutputStream;\nimport java.util.Set;\nimport java.nio.charset.StandardCharsets;\n\nimport org.apache.commons.io.output.CountingOutputStream;\nimport org.apache.fop.util.CloseBlockerOutputStream;\n\n\npublic abstract class AbstractPDFStream extends PDFObject {\n\n    \n    private static final int DEFAULT_BUFFER_SIZE = 16 * 1024; \n\n    \n    private static final byte[] STREAM_HEADER = encodeStatic(\"\\nstream\\n\");\n    private static final byte[] STREAM_FOOTER = encodeStatic(\"\\nendstream\");\n\n    \n    private static byte[] encodeStatic(String s) {\n        return s.getBytes(StandardCharsets.ISO_8859_1);\n    }\n\n    private final PDFDictionary dictionary;\n    \n    private volatile PDFFilterList filters;\n    private boolean encodeOnTheFly;\n    private PDFNumber refLength = new PDFNumber();\n\n    protected AbstractPDFStream() {\n        this(true);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary) {\n        this(dictionary, true);\n    }\n\n    protected AbstractPDFStream(boolean encodeOnTheFly) {\n        this(new PDFDictionary(), encodeOnTheFly);\n    }\n\n    protected AbstractPDFStream(PDFDictionary dictionary, boolean encodeOnTheFly) {\n        this.dictionary = dictionary;\n        dictionary.setParent(this);\n        this.encodeOnTheFly = encodeOnTheFly;\n    }\n\n    protected final PDFDictionary getDictionary() {\n        return dictionary;\n    }\n\n    public Object get(String key) {\n        return dictionary.get(key);\n    }\n\n    public void put(String key, Object value) {\n        dictionary.put(key, value);\n    }\n\n    \n    public PDFFilterList getFilterList() {\n        PDFFilterList localFilters = filters;\n        if (localFilters == null) {\n            synchronized (this) {\n                localFilters = filters;\n                if (localFilters == null) {\n                    if (getDocument() == null) {\n                        localFilters = new PDFFilterList();\n                    } else {\n                        localFilters = new PDFFilterList(getDocument().isEncryptionActive());\n                    }\n                    boolean hasFilterEntries = (get(\"Filter\") != null);\n                    if (hasFilterEntries) {\n                        localFilters.setDisableAllFilters(true);\n                    }\n                    filters = localFilters;\n                }\n            }\n        }\n        return localFilters;\n    }\n\n    protected void setupFilterList() {\n        if (multipleFiltersAllowed() && !getFilterList().isInitialized()) {\n            getFilterList().addDefaultFilters(\n                getDocumentSafely().getFilterMap(),\n                getDefaultFilterName());\n        }\n        prepareImplicitFilters();\n        getDocument().applyEncryption(this);\n    }\n\n    protected String getDefaultFilterName() {\n        return PDFFilterList.DEFAULT_FILTER;\n    }\n\n    protected abstract int getSizeHint() throws IOException;\n    protected abstract void outputRawStreamData(OutputStream out) throws IOException;\n\n    \n    protected int outputStreamData(StreamCache encodedStream, OutputStream out) throws IOException {\n        int length = 0;\n        out.write(STREAM_HEADER);\n        length += STREAM_HEADER.length;\n\n        encodedStream.outputContents(out);\n        length += encodedStream.getSize();\n\n        out.write(STREAM_FOOTER);\n        length += STREAM_FOOTER.length;\n        return length;\n    }\n\n    \n    protected StreamCache encodeStream() throws IOException {\n        final StreamCache encodedStream = StreamCacheFactory.getInstance()\n                .createStreamCache(getSizeHint());\n        OutputStream filteredOutput = getFilterList().applyFilters(encodedStream.getOutputStream());\n        outputRawStreamData(filteredOutput);\n        filteredOutput.flush();\n        filteredOutput.close();\n        return encodedStream;\n    }\n\n    \n    protected int encodeAndWriteStream(OutputStream out, PDFNumber refLength) throws IOException {\n        int bytesWritten = 0;\n        out.write(STREAM_HEADER);\n        bytesWritten += STREAM_HEADER.length;\n\n        CloseBlockerOutputStream cbout = new CloseBlockerOutputStream(out);\n        CountingOutputStream cout = new CountingOutputStream(cbout);\n        OutputStream filteredOutput = getFilterList().applyFilters(cout);\n        outputRawStreamData(filteredOutput);\n        filteredOutput.close();\n        refLength.setNumber(cout.getCount());\n        bytesWritten += cout.getCount();\n\n        out.write(STREAM_FOOTER);\n        bytesWritten += STREAM_FOOTER.length;\n\n        return bytesWritten;\n    }\n\n    \n    @Override\n    public int output(OutputStream stream) throws IOException {\n        setupFilterList();\n\n        \n        OutputStream bufferedStream = (stream instanceof BufferedOutputStream) ? stream : new BufferedOutputStream(stream, DEFAULT_BUFFER_SIZE);\n        CountingOutputStream cout = new CountingOutputStream(bufferedStream);\n        StringBuilder textBuffer = new StringBuilder(128);\n\n        StreamCache encodedStream = null;\n        final Object lengthEntry;\n        if (encodeOnTheFly) {\n            if (!refLength.hasObjectNumber()) {\n                registerChildren();\n            }\n            lengthEntry = refLength;\n        } else {\n            encodedStream = encodeStream();\n            lengthEntry = encodedStream.getSize();\n        }\n\n        populateStreamDict(lengthEntry);\n        dictionary.writeDictionary(cout, textBuffer);\n\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        if (encodedStream == null) {\n            encodeAndWriteStream(cout, refLength);\n        } else {\n            outputStreamData(encodedStream, cout);\n            encodedStream.clear(); \n            encodedStream = null; \n        }\n\n        PDFDocument.flushTextBuffer(textBuffer, cout);\n        cout.flush(); \n        return cout.getCount();\n    }\n\n    @Override\n    public void setDocument(PDFDocument doc) {\n        dictionary.setDocument(doc);\n        super.setDocument(doc);\n    }\n\n    protected void populateStreamDict(Object lengthEntry) {\n        put(\"Length\", lengthEntry);\n        if (!getFilterList().isDisableAllFilters()) {\n            getFilterList().putFilterDictEntries(dictionary);\n        }\n    }\n\n    \n    protected void prepareImplicitFilters() {\n        \n    }\n\n    protected boolean multipleFiltersAllowed() {\n        return true;\n    }\n\n    @Override\n    public void getChildren(Set<PDFObject> children) {\n        dictionary.getChildren(children);\n        if (encodeOnTheFly) {\n            children.add(refLength);\n        }\n    }\n\n    public void registerChildren() {\n        if (encodeOnTheFly) {\n            getDocument().registerObject(refLength);\n        }\n    }\n}\n"
    ]
}