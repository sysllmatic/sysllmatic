{
    "0": [
        "\n\n\n\npackage org.apache.fop.cli;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Vector;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.URIResolver;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\n\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.fop.ResourceEventProducer;\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.Fop;\nimport org.apache.fop.render.awt.viewer.Renderable;\n\n\npublic class InputHandler implements ErrorListener, Renderable {\n\n    \n    protected File sourcefile;\n    private File stylesheet;  \n    private Vector xsltParams; \n    private EntityResolver entityResolver;\n    private URIResolver uriResolver;\n\n    \n    protected Log log = LogFactory.getLog(InputHandler.class);\n\n    \n    public InputHandler(File xmlfile, File xsltfile, Vector params) {\n        sourcefile  = xmlfile;\n        stylesheet = xsltfile;\n        xsltParams = params;\n    }\n\n    \n    public InputHandler(File fofile) {\n        sourcefile = fofile;\n    }\n\n    \n    public void renderTo(FOUserAgent userAgent, String outputFormat, OutputStream out)\n                throws FOPException {\n\n        Fop fop;\n        if (out != null) {\n            fop = userAgent.newFop(outputFormat, out);\n        } else {\n            fop = userAgent.newFop(outputFormat);\n        }\n\n        \n        Result res = new SAXResult(fop.getDefaultHandler());\n\n        transformTo(res);\n    }\n\n    \n    public void renderTo(FOUserAgent userAgent, String outputFormat) throws FOPException {\n        renderTo(userAgent, outputFormat, null);\n    }\n\n    \n    public void transformTo(OutputStream out) throws FOPException {\n        Result res = new StreamResult(out);\n        transformTo(res);\n    }\n\n    \n    protected Source createMainSource() {\n        Source source;\n        InputStream in;\n        String uri;\n        if (this.sourcefile != null) {\n            try {\n                in = new java.io.FileInputStream(this.sourcefile);\n                uri = this.sourcefile.toURI().toASCIIString();\n            } catch (FileNotFoundException e) {\n                \n                return new StreamSource(this.sourcefile);\n            }\n        } else {\n            in = System.in;\n            uri = null;\n        }\n        try {\n            InputSource is = new InputSource(in);\n            is.setSystemId(uri);\n            XMLReader xr = getXMLReader();\n            if (entityResolver != null) {\n                xr.setEntityResolver(entityResolver);\n            }\n            source = new SAXSource(xr, is);\n        } catch (SAXException e) {\n            if (this.sourcefile != null) {\n                source = new StreamSource(this.sourcefile);\n            } else {\n                source = new StreamSource(in, uri);\n            }\n        } catch (ParserConfigurationException e) {\n            if (this.sourcefile != null) {\n                source = new StreamSource(this.sourcefile);\n            } else {\n                source = new StreamSource(in, uri);\n            }\n        }\n        return source;\n    }\n\n    \n    public void createCatalogResolver(FOUserAgent userAgent) {\n        String[] classNames = new String[] {\n                \"org.apache.xml.resolver.tools.CatalogResolver\",\n                \"com.sun.org.apache.xml.internal.resolver.tools.CatalogResolver\"};\n        ResourceEventProducer eventProducer\n            = ResourceEventProducer.Provider.get(userAgent.getEventBroadcaster());\n        Class resolverClass = null;\n        for (int i = 0; i < classNames.length && resolverClass == null; ++i) {\n            try {\n                resolverClass = Class.forName(classNames[i]);\n            } catch (ClassNotFoundException e) {\n                \n            }\n        }\n        if (resolverClass == null) {\n            eventProducer.catalogResolverNotFound(this);\n            return;\n        }\n        try {\n            entityResolver = (EntityResolver) resolverClass.getDeclaredConstructor().newInstance();\n            uriResolver = (URIResolver) resolverClass.getDeclaredConstructor().newInstance();\n        } catch (InstantiationException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage());\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        } catch (IllegalAccessException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage());\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        } catch (NoSuchMethodException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage());\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        } catch (InvocationTargetException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage());\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        }\n    }\n\n    \n    protected Source createXSLTSource() {\n        Source xslt = null;\n        if (this.stylesheet != null) {\n            if (entityResolver != null) {\n                try {\n                    InputSource is = new InputSource(this.stylesheet.getPath());\n                    XMLReader xr = getXMLReader();\n                    xr.setEntityResolver(entityResolver);\n                    xslt = new SAXSource(xr, is);\n                } catch (SAXException e) {\n                    \n                } catch (ParserConfigurationException e) {\n                    \n                }\n            }\n            if (xslt == null) {\n                xslt = new StreamSource(this.stylesheet);\n            }\n        }\n        return xslt;\n    }\n\n    private XMLReader getXMLReader() throws ParserConfigurationException, SAXException {\n        SAXParserFactory spf = SAXParserFactory.newInstance();\n        spf.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n        spf.setFeature(\"http://apache.org/xml/features/xinclude\", true);\n        spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        XMLReader xr = spf.newSAXParser().getXMLReader();\n        return xr;\n    }\n\n    \n    protected void transformTo(Result result) throws FOPException {\n        try {\n            \n            TransformerFactory factory = TransformerFactory.newInstance();\n            Transformer transformer;\n\n            Source xsltSource = createXSLTSource();\n            if (xsltSource == null) {   \n                transformer = factory.newTransformer();\n            } else {    \n                transformer = factory.newTransformer(xsltSource);\n\n                \n                if (xsltParams != null) {\n                    for (int i = 0; i < xsltParams.size(); i += 2) {\n                        transformer.setParameter((String) xsltParams.elementAt(i),\n                            (String) xsltParams.elementAt(i + 1));\n                    }\n                }\n                if (uriResolver != null) {\n                    transformer.setURIResolver(uriResolver);\n                }\n            }\n            transformer.setErrorListener(this);\n\n            \n            Source src = createMainSource();\n\n            \n            transformer.transform(src, result);\n\n        } catch (Exception e) {\n            throw new FOPException(e);\n        }\n    }\n\n    \n\n    \n    public void warning(TransformerException exc) {\n        log.warn(exc.getLocalizedMessage());\n    }\n\n    \n    public void error(TransformerException exc) {\n        log.error(exc.toString());\n    }\n\n    \n    public void fatalError(TransformerException exc)\n            throws TransformerException {\n        throw exc;\n    }\n\n}\n"
    ],
    "1": [
        "package org.apache.fop.cli;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.URIResolver;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.fop.ResourceEventProducer;\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.Fop;\nimport org.apache.fop.render.awt.viewer.Renderable;\n\npublic class InputHandler implements ErrorListener, Renderable {\n\n    protected File sourcefile;\n    private File stylesheet;\n    private List<String> xsltParams;\n    private EntityResolver entityResolver;\n    private URIResolver uriResolver;\n\n    \n    private static final TransformerFactory transformerFactory = TransformerFactory.newInstance();\n    private static final SAXParserFactory saxParserFactory;\n\n    protected Log log = LogFactory.getLog(InputHandler.class);\n\n    static {\n        saxParserFactory = SAXParserFactory.newInstance();\n        try {\n            saxParserFactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n            saxParserFactory.setFeature(\"http://apache.org/xml/features/xinclude\", true);\n            saxParserFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        } catch (Exception e) {\n            \n            e.printStackTrace();\n        }\n    }\n\n    public InputHandler(File xmlfile, File xsltfile, List<String> params) {\n        sourcefile  = xmlfile;\n        stylesheet = xsltfile;\n        xsltParams = params;\n    }\n\n    public InputHandler(File fofile) {\n        sourcefile = fofile;\n    }\n\n    public void renderTo(FOUserAgent userAgent, String outputFormat, OutputStream out)\n                throws FOPException {\n        Fop fop = (out != null) ? userAgent.newFop(outputFormat, out) : userAgent.newFop(outputFormat);\n        Result res = new SAXResult(fop.getDefaultHandler());\n        transformTo(res);\n    }\n\n    public void renderTo(FOUserAgent userAgent, String outputFormat) throws FOPException {\n        renderTo(userAgent, outputFormat, null);\n    }\n\n    public void transformTo(OutputStream out) throws FOPException {\n        Result res = new StreamResult(out);\n        transformTo(res);\n    }\n\n    protected Source createMainSource() {\n        Source source;\n        InputStream in = null;\n        String uri = null;\n        if (this.sourcefile != null) {\n            try {\n                in = new java.io.FileInputStream(this.sourcefile);\n                uri = this.sourcefile.toURI().toASCIIString();\n            } catch (FileNotFoundException e) {\n                return new StreamSource(this.sourcefile);\n            }\n        } else {\n            in = System.in;\n            uri = null;\n        }\n        try {\n            InputSource is = new InputSource(in);\n            is.setSystemId(uri);\n            XMLReader xr = getXMLReader();\n            if (entityResolver != null) {\n                xr.setEntityResolver(entityResolver);\n            }\n            source = new SAXSource(xr, is);\n        } catch (SAXException | ParserConfigurationException e) {\n            if (this.sourcefile != null) {\n                source = new StreamSource(this.sourcefile);\n            } else {\n                source = new StreamSource(in, uri);\n            }\n        }\n        return source;\n    }\n\n    public void createCatalogResolver(FOUserAgent userAgent) {\n        String[] classNames = new String[] {\n                \"org.apache.xml.resolver.tools.CatalogResolver\",\n                \"com.sun.org.apache.xml.internal.resolver.tools.CatalogResolver\"};\n        ResourceEventProducer eventProducer\n            = ResourceEventProducer.Provider.get(userAgent.getEventBroadcaster());\n        Class resolverClass = null;\n        for (int i = 0; i < classNames.length && resolverClass == null; ++i) {\n            try {\n                resolverClass = Class.forName(classNames[i]);\n            } catch (ClassNotFoundException e) {\n                \n            }\n        }\n        if (resolverClass == null) {\n            eventProducer.catalogResolverNotFound(this);\n            return;\n        }\n        try {\n            entityResolver = (EntityResolver) resolverClass.getDeclaredConstructor().newInstance();\n            uriResolver = (URIResolver) resolverClass.getDeclaredConstructor().newInstance();\n        } catch (InstantiationException | IllegalAccessException |\n                 NoSuchMethodException | InvocationTargetException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage());\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        }\n    }\n\n    protected Source createXSLTSource() {\n        Source xslt = null;\n        if (this.stylesheet != null) {\n            if (entityResolver != null) {\n                try {\n                    InputSource is = new InputSource(this.stylesheet.getPath());\n                    XMLReader xr = getXMLReader();\n                    xr.setEntityResolver(entityResolver);\n                    xslt = new SAXSource(xr, is);\n                } catch (SAXException | ParserConfigurationException e) {\n                    \n                }\n            }\n            if (xslt == null) {\n                xslt = new StreamSource(this.stylesheet);\n            }\n        }\n        return xslt;\n    }\n\n    \n    private XMLReader getXMLReader() throws ParserConfigurationException, SAXException {\n        return saxParserFactory.newSAXParser().getXMLReader();\n    }\n\n    protected void transformTo(Result result) throws FOPException {\n        try {\n            Transformer transformer;\n            Source xsltSource = createXSLTSource();\n            if (xsltSource == null) {\n                transformer = transformerFactory.newTransformer();\n            } else {\n                transformer = transformerFactory.newTransformer(xsltSource);\n                if (xsltParams != null) {\n                    for (int i = 0; i < xsltParams.size(); i += 2) {\n                        transformer.setParameter(xsltParams.get(i), xsltParams.get(i + 1));\n                    }\n                }\n                if (uriResolver != null) {\n                    transformer.setURIResolver(uriResolver);\n                }\n            }\n            transformer.setErrorListener(this);\n            Source src = createMainSource();\n            transformer.transform(src, result);\n        } catch (Exception e) {\n            throw new FOPException(e);\n        }\n    }\n\n    public void warning(TransformerException exc) {\n        log.warn(exc.getLocalizedMessage());\n    }\n\n    public void error(TransformerException exc) {\n        log.error(exc.toString());\n    }\n\n    public void fatalError(TransformerException exc)\n            throws TransformerException {\n        throw exc;\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.cli;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Vector;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.URIResolver;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.fop.ResourceEventProducer;\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.Fop;\nimport org.apache.fop.render.awt.viewer.Renderable;\n\npublic class InputHandler implements ErrorListener, Renderable {\n\n    protected File sourcefile;\n    private File stylesheet;\n    private Vector xsltParams;\n    private EntityResolver entityResolver;\n    private URIResolver uriResolver;\n    private Object cachedCatalogResolver; \n\n    \n    private static final ThreadLocal<TransformerFactory> transformerFactory =\n            ThreadLocal.withInitial(TransformerFactory::newInstance);\n    private static final ThreadLocal<SAXParserFactory> saxParserFactory = ThreadLocal.withInitial(() -> {\n        SAXParserFactory spf = SAXParserFactory.newInstance();\n        try {\n            spf.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n            spf.setFeature(\"http://apache.org/xml/features/xinclude\", true);\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return spf;\n    });\n\n    protected Log log = LogFactory.getLog(InputHandler.class);\n\n    public InputHandler(File xmlfile, File xsltfile, Vector params) {\n        sourcefile  = xmlfile;\n        stylesheet = xsltfile;\n        xsltParams = params;\n    }\n\n    public InputHandler(File fofile) {\n        sourcefile = fofile;\n    }\n\n    public void renderTo(FOUserAgent userAgent, String outputFormat, OutputStream out)\n                throws FOPException {\n        Fop fop = (out != null) ? userAgent.newFop(outputFormat, out) : userAgent.newFop(outputFormat);\n        Result res = new SAXResult(fop.getDefaultHandler());\n        transformTo(res);\n    }\n\n    public void renderTo(FOUserAgent userAgent, String outputFormat) throws FOPException {\n        renderTo(userAgent, outputFormat, null);\n    }\n\n    public void transformTo(OutputStream out) throws FOPException {\n        Result res = new StreamResult(out);\n        transformTo(res);\n    }\n\n    \n    protected Source createMainSource() {\n        if (this.sourcefile != null) {\n            try {\n                InputStream in = new BufferedInputStream(new FileInputStream(this.sourcefile));\n                InputSource is = new InputSource(in);\n                is.setSystemId(this.sourcefile.toURI().toASCIIString());\n                XMLReader xr = getXMLReader();\n                if (entityResolver != null) {\n                    xr.setEntityResolver(entityResolver);\n                }\n                SAXSource saxSource = new SAXSource(xr, is);\n                \n                saxSource.setInputSource(is);\n                return saxSource;\n            } catch (IOException | SAXException | ParserConfigurationException e) {\n                log.error(\"Error creating main source\", e);\n                return new StreamSource(this.sourcefile);\n            }\n        } else {\n            \n            InputSource is = new InputSource(System.in);\n            is.setSystemId(null);\n            try {\n                XMLReader xr = getXMLReader();\n                if (entityResolver != null) {\n                    xr.setEntityResolver(entityResolver);\n                }\n                SAXSource saxSource = new SAXSource(xr, is);\n                saxSource.setInputSource(is);\n                return saxSource;\n            } catch (SAXException | ParserConfigurationException e) {\n                log.error(\"Error creating main source from System.in\", e);\n                return new StreamSource(System.in);\n            }\n        }\n    }\n\n    public void createCatalogResolver(FOUserAgent userAgent) {\n        if (cachedCatalogResolver != null) {\n            if (cachedCatalogResolver instanceof EntityResolver) {\n                entityResolver = (EntityResolver) cachedCatalogResolver;\n            }\n            if (cachedCatalogResolver instanceof URIResolver) {\n                uriResolver = (URIResolver) cachedCatalogResolver;\n            }\n            return;\n        }\n        String[] classNames = new String[] {\n            \"org.apache.xml.resolver.tools.CatalogResolver\",\n            \"com.sun.org.apache.xml.internal.resolver.tools.CatalogResolver\"\n        };\n        ResourceEventProducer eventProducer = ResourceEventProducer.Provider.get(userAgent.getEventBroadcaster());\n        Class<?> resolverClass = null;\n        for (String className : classNames) {\n            try {\n                resolverClass = Class.forName(className);\n                break;\n            } catch (ClassNotFoundException e) {\n                \n            }\n        }\n        if (resolverClass == null) {\n            eventProducer.catalogResolverNotFound(this);\n            return;\n        }\n        try {\n            Object resolverInstance = resolverClass.getDeclaredConstructor().newInstance();\n            if (resolverInstance instanceof EntityResolver) {\n                entityResolver = (EntityResolver) resolverInstance;\n            }\n            if (resolverInstance instanceof URIResolver) {\n                uriResolver = (URIResolver) resolverInstance;\n            }\n            cachedCatalogResolver = resolverInstance; \n        } catch (InstantiationException | IllegalAccessException |\n                 NoSuchMethodException | InvocationTargetException e) {\n            log.error(\"Error creating the catalog resolver: \" + e.getMessage(), e);\n            eventProducer.catalogResolverNotCreated(this, e.getMessage());\n        }\n    }\n\n    protected Source createXSLTSource() {\n        if (this.stylesheet != null) {\n            if (entityResolver != null) {\n                try (InputStream in = new BufferedInputStream(new FileInputStream(this.stylesheet))) {\n                    InputSource is = new InputSource(in);\n                    is.setSystemId(this.stylesheet.toURI().toASCIIString());\n                    XMLReader xr = getXMLReader();\n                    xr.setEntityResolver(entityResolver);\n                    SAXSource saxSource = new SAXSource(xr, is);\n                    saxSource.setInputSource(is);\n                    return saxSource;\n                } catch (IOException | SAXException | ParserConfigurationException e) {\n                    log.error(\"Error creating XSLT source with entity resolver\", e);\n                }\n            }\n            return new StreamSource(this.stylesheet);\n        }\n        return null;\n    }\n\n    private XMLReader getXMLReader() throws ParserConfigurationException, SAXException {\n        return saxParserFactory.get().newSAXParser().getXMLReader();\n    }\n\n    protected void transformTo(Result result) throws FOPException {\n        try {\n            Transformer transformer;\n            Source xsltSource = createXSLTSource();\n            if (xsltSource == null) {\n                transformer = transformerFactory.get().newTransformer();\n            } else {\n                transformer = transformerFactory.get().newTransformer(xsltSource);\n                if (xsltParams != null) {\n                    for (int i = 0; i + 1 < xsltParams.size(); i += 2) {\n                        transformer.setParameter(\n                            String.valueOf(xsltParams.elementAt(i)),\n                            String.valueOf(xsltParams.elementAt(i + 1))\n                        );\n                    }\n                }\n                if (uriResolver != null) {\n                    transformer.setURIResolver(uriResolver);\n                }\n            }\n            transformer.setErrorListener(this);\n            Source src = createMainSource();\n            transformer.transform(src, result);\n        } catch (Exception e) {\n            log.error(\"Transformation error\", e);\n            throw new FOPException(e);\n        }\n    }\n\n    public void warning(TransformerException exc) {\n        log.warn(exc.getLocalizedMessage(), exc);\n    }\n\n    public void error(TransformerException exc) {\n        log.error(exc.toString(), exc);\n    }\n\n    public void fatalError(TransformerException exc)\n            throws TransformerException {\n        throw exc;\n    }\n}\n"
    ]
}