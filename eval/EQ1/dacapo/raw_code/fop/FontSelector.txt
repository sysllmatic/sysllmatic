{
    "0": [
        "\n\n\n\npackage org.apache.fop.fonts;\n\nimport org.apache.fop.datatypes.PercentBaseContext;\nimport org.apache.fop.fo.FONode;\nimport org.apache.fop.fo.FOText;\nimport org.apache.fop.fo.flow.Character;\nimport org.apache.fop.fo.properties.CommonFont;\nimport org.apache.fop.util.CharUtilities;\n\n\npublic final class FontSelector {\n    private FontSelector() {\n        \n    }\n\n    private static Font selectFontForCharacter(char c, FONode fonode,\n            CommonFont commonFont, PercentBaseContext context) {\n        FontInfo fi = fonode.getFOEventHandler().getFontInfo();\n        FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        for (FontTriplet fontkey : fontkeys) {\n            Font font = fi.getFontInstance(fontkey, commonFont.fontSize\n                    .getValue(context));\n            if (font.hasChar(c)) {\n                return font;\n            }\n        }\n        return fi.getFontInstance(fontkeys[0], commonFont.fontSize\n                .getValue(context));\n\n    }\n\n    \n    public static Font selectFontForCharacter(Character fobj,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(fobj.getCharacter(), fobj,\n                fobj.getCommonFont(), context);\n    }\n\n    \n    public static Font selectFontForCharacterInText(char c, FOText text,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(c, text, text\n                .getCommonFont(), context);\n    }\n\n    \n    public static Font selectFontForCharactersInText(CharSequence charSeq,\n            int firstIndex, int breakIndex, FOText text,\n            PercentBaseContext context) {\n\n        final FontInfo fi = text.getFOEventHandler().getFontInfo();\n        final CommonFont commonFont = text.getCommonFont();\n        final FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        final int numFonts = fontkeys.length;\n        final Font[] fonts = new Font[numFonts];\n        final int[] fontCount = new int[numFonts];\n\n        for (int fontnum = 0; fontnum < numFonts; fontnum++) {\n            final Font font = fi.getFontInstance(fontkeys[fontnum],\n                    commonFont.fontSize.getValue(context));\n            fonts[fontnum] = font;\n\n            int numCodePoints = 0;\n            for (int cp : CharUtilities.codepointsIter(charSeq, firstIndex, breakIndex)) {\n                numCodePoints++;\n\n                if (font.hasCodePoint(cp)) {\n                    fontCount[fontnum]++;\n                }\n            }\n\n            \n            if (fontCount[fontnum] == numCodePoints) {\n                return font;\n            }\n        }\n\n        Font font = fonts[0];\n        int max = fontCount[0];\n\n        for (int fontnum = 1; fontnum < numFonts; fontnum++) {\n            final int curCount = fontCount[fontnum];\n            if (curCount > max) {\n                font = fonts[fontnum];\n                max = curCount;\n            }\n        }\n        return font;\n    }\n\n}\n"
    ],
    "1": [
        "package org.apache.fop.fonts;\n\nimport org.apache.fop.datatypes.PercentBaseContext;\nimport org.apache.fop.fo.FONode;\nimport org.apache.fop.fo.FOText;\nimport org.apache.fop.fo.flow.Character;\nimport org.apache.fop.fo.properties.CommonFont;\nimport org.apache.fop.util.CharUtilities;\n\npublic final class FontSelector {\n    private FontSelector() {\n        \n    }\n\n    private static Font selectFontForCharacter(char c, FONode fonode,\n            CommonFont commonFont, PercentBaseContext context) {\n        FontInfo fi = fonode.getFOEventHandler().getFontInfo();\n        FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        int fontSize = commonFont.fontSize.getValue(context);\n        for (FontTriplet fontkey : fontkeys) {\n            Font font = fi.getFontInstance(fontkey, fontSize);\n            if (font.hasChar(c)) {\n                return font;\n            }\n        }\n        return fi.getFontInstance(fontkeys[0], fontSize);\n    }\n\n    public static Font selectFontForCharacter(Character fobj,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(fobj.getCharacter(), fobj,\n                fobj.getCommonFont(), context);\n    }\n\n    public static Font selectFontForCharacterInText(char c, FOText text,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(c, text, text\n                .getCommonFont(), context);\n    }\n\n    public static Font selectFontForCharactersInText(CharSequence charSeq,\n            int firstIndex, int breakIndex, FOText text,\n            PercentBaseContext context) {\n\n        final FontInfo fi = text.getFOEventHandler().getFontInfo();\n        final CommonFont commonFont = text.getCommonFont();\n        final FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        final int numFonts = fontkeys.length;\n        final int fontSize = commonFont.fontSize.getValue(context);\n        final Font[] fonts = new Font[numFonts];\n        for (int i = 0; i < numFonts; i++) {\n            fonts[i] = fi.getFontInstance(fontkeys[i], fontSize);\n        }\n\n        final int[] fontCount = new int[numFonts];\n        int numCodePoints = 0;\n        \n        for (int cp : CharUtilities.codepointsIter(charSeq, firstIndex, breakIndex)) {\n            numCodePoints++;\n            boolean found = false;\n            for (int fontnum = 0; fontnum < numFonts; fontnum++) {\n                if (fonts[fontnum].hasCodePoint(cp)) {\n                    fontCount[fontnum]++;\n                    found = true;\n                    break; \n                }\n            }\n        }\n\n        \n        for (int fontnum = 0; fontnum < numFonts; fontnum++) {\n            if (fontCount[fontnum] == numCodePoints) {\n                return fonts[fontnum];\n            }\n        }\n        \n        Font font = fonts[0];\n        int max = fontCount[0];\n        for (int fontnum = 1; fontnum < numFonts; fontnum++) {\n            if (fontCount[fontnum] > max) {\n                font = fonts[fontnum];\n                max = fontCount[fontnum];\n            }\n        }\n        return font;\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.fonts;\n\nimport org.apache.fop.datatypes.PercentBaseContext;\nimport org.apache.fop.fo.FONode;\nimport org.apache.fop.fo.FOText;\nimport org.apache.fop.fo.flow.Character;\nimport org.apache.fop.fo.properties.CommonFont;\nimport org.apache.fop.util.CharUtilities;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic final class FontSelector {\n    private FontSelector() {\n        \n    }\n\n    \n    private static final ConcurrentHashMap<FontTriplet, Map<Integer, Font>> fontCache = new ConcurrentHashMap<>();\n\n    private static Font getCachedFont(FontInfo fi, FontTriplet triplet, int size) {\n        Map<Integer, Font> sizeMap = fontCache.computeIfAbsent(triplet, t -> new ConcurrentHashMap<>());\n        return sizeMap.computeIfAbsent(size, s -> fi.getFontInstance(triplet, s));\n    }\n\n    private static Font selectFontForCharacter(char c, FONode fonode,\n            CommonFont commonFont, PercentBaseContext context) {\n        FontInfo fi = fonode.getFOEventHandler().getFontInfo();\n        FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        int fontSize = commonFont.fontSize.getValue(context);\n        for (FontTriplet fontkey : fontkeys) {\n            Font font = getCachedFont(fi, fontkey, fontSize);\n            if (font.hasChar(c)) {\n                return font;\n            }\n        }\n        return getCachedFont(fi, fontkeys[0], fontSize);\n    }\n\n    public static Font selectFontForCharacter(Character fobj,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(fobj.getCharacter(), fobj,\n                fobj.getCommonFont(), context);\n    }\n\n    public static Font selectFontForCharacterInText(char c, FOText text,\n            PercentBaseContext context) {\n        return FontSelector.selectFontForCharacter(c, text, text\n                .getCommonFont(), context);\n    }\n\n    public static Font selectFontForCharactersInText(CharSequence charSeq,\n            int firstIndex, int breakIndex, FOText text,\n            PercentBaseContext context) {\n\n        final FontInfo fi = text.getFOEventHandler().getFontInfo();\n        final CommonFont commonFont = text.getCommonFont();\n        final FontTriplet[] fontkeys = commonFont.getFontState(fi);\n        final int numFonts = fontkeys.length;\n        final int fontSize = commonFont.fontSize.getValue(context);\n        final Font[] fonts = new Font[numFonts];\n        for (int i = 0; i < numFonts; i++) {\n            fonts[i] = getCachedFont(fi, fontkeys[i], fontSize);\n        }\n\n        final int[] fontCount = new int[numFonts];\n\n        \n        Set<Integer> uniqueCodepoints = new HashSet<>();\n        for (int cp : CharUtilities.codepointsIter(charSeq, firstIndex, breakIndex)) {\n            uniqueCodepoints.add(cp);\n        }\n        int numCodePoints = uniqueCodepoints.size();\n\n        \n        Map<Font, Map<Integer, Boolean>> codepointCoverageCache = new HashMap<>();\n        for (int i = 0; i < numFonts; i++) {\n            codepointCoverageCache.put(fonts[i], new HashMap<>());\n        }\n\n        for (int cp : uniqueCodepoints) {\n            boolean found = false;\n            for (int fontnum = 0; fontnum < numFonts; fontnum++) {\n                Font font = fonts[fontnum];\n                Map<Integer, Boolean> coverage = codepointCoverageCache.get(font);\n                Boolean has = coverage.get(cp);\n                if (has == null) {\n                    has = font.hasCodePoint(cp);\n                    coverage.put(cp, has);\n                }\n                if (has) {\n                    fontCount[fontnum]++;\n                    found = true;\n                    break;\n                }\n            }\n        }\n\n        \n        for (int fontnum = 0; fontnum < numFonts; fontnum++) {\n            if (fontCount[fontnum] == numCodePoints) {\n                return fonts[fontnum];\n            }\n        }\n\n        \n        Font font = fonts[0];\n        int max = fontCount[0];\n        for (int fontnum = 1; fontnum < numFonts; fontnum++) {\n            if (fontCount[fontnum] > max) {\n                font = fonts[fontnum];\n                max = fontCount[fontnum];\n            }\n        }\n        return font;\n    }\n}\n"
    ]
}