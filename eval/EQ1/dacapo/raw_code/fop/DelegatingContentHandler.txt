{
    "0": [
        "\n\n\n\npackage org.apache.fop.util;\n\nimport java.io.IOException;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.DTDHandler;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.LexicalHandler;\n\n\npublic class DelegatingContentHandler\n        implements EntityResolver, DTDHandler, ContentHandler, LexicalHandler, ErrorHandler {\n\n    private ContentHandler delegate;\n    private EntityResolver entityResolver;\n    private DTDHandler dtdHandler;\n    private LexicalHandler lexicalHandler;\n    private ErrorHandler errorHandler;\n\n    \n    public DelegatingContentHandler() {\n        \n    }\n\n    \n    public DelegatingContentHandler(ContentHandler handler) {\n        setDelegateContentHandler(handler);\n        if (handler instanceof EntityResolver) {\n            setDelegateEntityResolver((EntityResolver)handler);\n        }\n        if (handler instanceof DTDHandler) {\n            setDelegateDTDHandler((DTDHandler)handler);\n        }\n        if (handler instanceof LexicalHandler) {\n            setDelegateLexicalHandler((LexicalHandler)handler);\n        }\n        if (handler instanceof ErrorHandler) {\n            setDelegateErrorHandler((ErrorHandler)handler);\n        }\n    }\n\n    \n    public ContentHandler getDelegateContentHandler() {\n        return this.delegate;\n    }\n\n    \n    public void setDelegateContentHandler(ContentHandler handler) {\n        this.delegate = handler;\n    }\n\n    \n    public void setDelegateEntityResolver(EntityResolver resolver) {\n        this.entityResolver = resolver;\n    }\n\n    \n    public void setDelegateDTDHandler(DTDHandler handler) {\n        this.dtdHandler = handler;\n    }\n\n    \n    public void setDelegateLexicalHandler(LexicalHandler handler) {\n        this.lexicalHandler = handler;\n    }\n\n    \n    public void setDelegateErrorHandler(ErrorHandler handler) {\n        this.errorHandler = handler;\n    }\n\n    \n\n    \n    public InputSource resolveEntity(String publicId, String systemId)\n            throws SAXException, IOException {\n        if (entityResolver != null) {\n            return entityResolver.resolveEntity(publicId, systemId);\n        } else {\n            return null;\n        }\n    }\n\n    \n\n    \n    public void notationDecl(String name, String publicId, String systemId) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.notationDecl(name, publicId, systemId);\n        }\n    }\n\n    \n    public void unparsedEntityDecl(String name, String publicId, String systemId,\n            String notationName) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.unparsedEntityDecl(name, publicId, systemId, notationName);\n        }\n    }\n\n    \n\n    \n    public void setDocumentLocator(Locator locator) {\n        delegate.setDocumentLocator(locator);\n    }\n\n    \n    public void startDocument() throws SAXException {\n        delegate.startDocument();\n    }\n\n    \n    public void endDocument() throws SAXException {\n        delegate.endDocument();\n    }\n\n    \n    public void startPrefixMapping(String prefix, String uri) throws SAXException {\n        delegate.startPrefixMapping(prefix, uri);\n    }\n\n    \n    public void endPrefixMapping(String prefix) throws SAXException {\n        delegate.endPrefixMapping(prefix);\n    }\n\n    \n    public void startElement(String uri, String localName, String qName,\n                Attributes atts) throws SAXException {\n        delegate.startElement(uri, localName, qName, atts);\n    }\n\n    \n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        delegate.endElement(uri, localName, qName);\n    }\n\n    \n    public void characters(char[] ch, int start, int length) throws SAXException {\n        delegate.characters(ch, start, length);\n    }\n\n    \n    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n        delegate.ignorableWhitespace(ch, start, length);\n    }\n\n    \n    public void processingInstruction(String target, String data) throws SAXException {\n        delegate.processingInstruction(target, data);\n    }\n\n    \n    public void skippedEntity(String name) throws SAXException {\n        delegate.skippedEntity(name);\n    }\n\n    \n\n    \n    public void startDTD(String name, String publicId, String systemId) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startDTD(name, publicId, systemId);\n        }\n\n    }\n\n    \n    public void endDTD() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endDTD();\n        }\n    }\n\n    \n    public void startEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startEntity(name);\n        }\n    }\n\n    \n    public void endEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endEntity(name);\n        }\n    }\n\n    \n    public void startCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startCDATA();\n        }\n    }\n\n    \n    public void endCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endCDATA();\n        }\n    }\n\n    \n    public void comment(char[] ch, int start, int length) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.comment(ch, start, length);\n        }\n    }\n\n    \n\n    \n    public void warning(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.warning(exception);\n        }\n    }\n\n    \n    public void error(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.error(exception);\n        }\n    }\n\n    \n    public void fatalError(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.fatalError(exception);\n        }\n    }\n\n}\n"
    ],
    "1": [
        "package org.apache.fop.util;\n\nimport java.io.IOException;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.DTDHandler;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.LexicalHandler;\n\npublic class DelegatingContentHandler\n        implements EntityResolver, DTDHandler, ContentHandler, LexicalHandler, ErrorHandler {\n\n    private ContentHandler delegate;\n    private EntityResolver entityResolver;\n    private DTDHandler dtdHandler;\n    private LexicalHandler lexicalHandler;\n    private ErrorHandler errorHandler;\n\n    public DelegatingContentHandler() {\n    }\n\n    public DelegatingContentHandler(ContentHandler handler) {\n        setDelegateContentHandler(handler);\n        if (handler instanceof EntityResolver) {\n            setDelegateEntityResolver((EntityResolver) handler);\n        }\n        if (handler instanceof DTDHandler) {\n            setDelegateDTDHandler((DTDHandler) handler);\n        }\n        if (handler instanceof LexicalHandler) {\n            setDelegateLexicalHandler((LexicalHandler) handler);\n        }\n        if (handler instanceof ErrorHandler) {\n            setDelegateErrorHandler((ErrorHandler) handler);\n        }\n    }\n\n    public ContentHandler getDelegateContentHandler() {\n        return this.delegate;\n    }\n\n    public void setDelegateContentHandler(ContentHandler handler) {\n        this.delegate = handler;\n    }\n\n    public void setDelegateEntityResolver(EntityResolver resolver) {\n        this.entityResolver = resolver;\n    }\n\n    public void setDelegateDTDHandler(DTDHandler handler) {\n        this.dtdHandler = handler;\n    }\n\n    public void setDelegateLexicalHandler(LexicalHandler handler) {\n        this.lexicalHandler = handler;\n    }\n\n    public void setDelegateErrorHandler(ErrorHandler handler) {\n        this.errorHandler = handler;\n    }\n\n    public InputSource resolveEntity(String publicId, String systemId)\n            throws SAXException, IOException {\n        if (entityResolver != null) {\n            return entityResolver.resolveEntity(publicId, systemId);\n        }\n        return null;\n    }\n\n    public void notationDecl(String name, String publicId, String systemId) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.notationDecl(name, publicId, systemId);\n        }\n    }\n\n    public void unparsedEntityDecl(String name, String publicId, String systemId,\n            String notationName) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.unparsedEntityDecl(name, publicId, systemId, notationName);\n        }\n    }\n\n    public void setDocumentLocator(Locator locator) {\n        if (delegate != null) {\n            delegate.setDocumentLocator(locator);\n        }\n    }\n\n    public void startDocument() throws SAXException {\n        if (delegate != null) {\n            delegate.startDocument();\n        }\n    }\n\n    public void endDocument() throws SAXException {\n        if (delegate != null) {\n            delegate.endDocument();\n        }\n    }\n\n    public void startPrefixMapping(String prefix, String uri) throws SAXException {\n        if (delegate != null) {\n            delegate.startPrefixMapping(prefix, uri);\n        }\n    }\n\n    public void endPrefixMapping(String prefix) throws SAXException {\n        if (delegate != null) {\n            delegate.endPrefixMapping(prefix);\n        }\n    }\n\n    public void startElement(String uri, String localName, String qName,\n                Attributes atts) throws SAXException {\n        if (delegate != null) {\n            delegate.startElement(uri, localName, qName, atts);\n        }\n    }\n\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        if (delegate != null) {\n            delegate.endElement(uri, localName, qName);\n        }\n    }\n\n    public void characters(char[] ch, int start, int length) throws SAXException {\n        if (delegate != null) {\n            delegate.characters(ch, start, length);\n        }\n    }\n\n    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n        if (delegate != null) {\n            delegate.ignorableWhitespace(ch, start, length);\n        }\n    }\n\n    public void processingInstruction(String target, String data) throws SAXException {\n        if (delegate != null) {\n            delegate.processingInstruction(target, data);\n        }\n    }\n\n    public void skippedEntity(String name) throws SAXException {\n        if (delegate != null) {\n            delegate.skippedEntity(name);\n        }\n    }\n\n    public void startDTD(String name, String publicId, String systemId) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startDTD(name, publicId, systemId);\n        }\n    }\n\n    public void endDTD() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endDTD();\n        }\n    }\n\n    public void startEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startEntity(name);\n        }\n    }\n\n    public void endEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endEntity(name);\n        }\n    }\n\n    public void startCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startCDATA();\n        }\n    }\n\n    public void endCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endCDATA();\n        }\n    }\n\n    public void comment(char[] ch, int start, int length) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.comment(ch, start, length);\n        }\n    }\n\n    public void warning(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.warning(exception);\n        }\n    }\n\n    public void error(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.error(exception);\n        }\n    }\n\n    public void fatalError(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.fatalError(exception);\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.util;\n\nimport java.io.IOException;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.DTDHandler;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.LexicalHandler;\n\n\npublic class DelegatingContentHandler\n        implements EntityResolver, DTDHandler, ContentHandler, LexicalHandler, ErrorHandler {\n\n    private ContentHandler delegate;\n    private EntityResolver entityResolver;\n    private DTDHandler dtdHandler;\n    private LexicalHandler lexicalHandler;\n    private ErrorHandler errorHandler;\n\n    public DelegatingContentHandler() {\n    }\n\n    public DelegatingContentHandler(ContentHandler handler) {\n        setDelegateContentHandler(handler);\n        if (handler instanceof EntityResolver) {\n            setDelegateEntityResolver((EntityResolver) handler);\n        }\n        if (handler instanceof DTDHandler) {\n            setDelegateDTDHandler((DTDHandler) handler);\n        }\n        if (handler instanceof LexicalHandler) {\n            setDelegateLexicalHandler((LexicalHandler) handler);\n        }\n        if (handler instanceof ErrorHandler) {\n            setDelegateErrorHandler((ErrorHandler) handler);\n        }\n    }\n\n    public ContentHandler getDelegateContentHandler() {\n        return this.delegate;\n    }\n\n    public void setDelegateContentHandler(ContentHandler handler) {\n        this.delegate = handler;\n    }\n\n    public void setDelegateEntityResolver(EntityResolver resolver) {\n        this.entityResolver = resolver;\n    }\n\n    public void setDelegateDTDHandler(DTDHandler handler) {\n        this.dtdHandler = handler;\n    }\n\n    public void setDelegateLexicalHandler(LexicalHandler handler) {\n        this.lexicalHandler = handler;\n    }\n\n    public void setDelegateErrorHandler(ErrorHandler handler) {\n        this.errorHandler = handler;\n    }\n\n    public InputSource resolveEntity(String publicId, String systemId)\n            throws SAXException, IOException {\n        if (entityResolver != null) {\n            return entityResolver.resolveEntity(publicId, systemId);\n        }\n        return null;\n    }\n\n    public void notationDecl(String name, String publicId, String systemId) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.notationDecl(name, publicId, systemId);\n        }\n    }\n\n    public void unparsedEntityDecl(String name, String publicId, String systemId,\n            String notationName) throws SAXException {\n        if (dtdHandler != null) {\n            dtdHandler.unparsedEntityDecl(name, publicId, systemId, notationName);\n        }\n    }\n\n    \n    private ContentHandler requireDelegate() {\n        if (delegate == null) {\n            throw new IllegalStateException(\"ContentHandler delegate is not set\");\n        }\n        return delegate;\n    }\n\n    public void setDocumentLocator(Locator locator) {\n        requireDelegate().setDocumentLocator(locator);\n    }\n\n    public void startDocument() throws SAXException {\n        requireDelegate().startDocument();\n    }\n\n    public void endDocument() throws SAXException {\n        requireDelegate().endDocument();\n    }\n\n    public void startPrefixMapping(String prefix, String uri) throws SAXException {\n        requireDelegate().startPrefixMapping(prefix, uri);\n    }\n\n    public void endPrefixMapping(String prefix) throws SAXException {\n        requireDelegate().endPrefixMapping(prefix);\n    }\n\n    public void startElement(String uri, String localName, String qName,\n                Attributes atts) throws SAXException {\n        requireDelegate().startElement(uri, localName, qName, atts);\n    }\n\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        requireDelegate().endElement(uri, localName, qName);\n    }\n\n    public void characters(char[] ch, int start, int length) throws SAXException {\n        requireDelegate().characters(ch, start, length);\n    }\n\n    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n        requireDelegate().ignorableWhitespace(ch, start, length);\n    }\n\n    public void processingInstruction(String target, String data) throws SAXException {\n        requireDelegate().processingInstruction(target, data);\n    }\n\n    public void skippedEntity(String name) throws SAXException {\n        requireDelegate().skippedEntity(name);\n    }\n\n    public void startDTD(String name, String publicId, String systemId) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startDTD(name, publicId, systemId);\n        }\n    }\n\n    public void endDTD() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endDTD();\n        }\n    }\n\n    public void startEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startEntity(name);\n        }\n    }\n\n    public void endEntity(String name) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endEntity(name);\n        }\n    }\n\n    public void startCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.startCDATA();\n        }\n    }\n\n    public void endCDATA() throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.endCDATA();\n        }\n    }\n\n    public void comment(char[] ch, int start, int length) throws SAXException {\n        if (lexicalHandler != null) {\n            lexicalHandler.comment(ch, start, length);\n        }\n    }\n\n    public void warning(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.warning(exception);\n        }\n    }\n\n    public void error(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.error(exception);\n        }\n    }\n\n    public void fatalError(SAXParseException exception) throws SAXException {\n        if (errorHandler != null) {\n            errorHandler.fatalError(exception);\n        }\n    }\n}\n"
    ]
}