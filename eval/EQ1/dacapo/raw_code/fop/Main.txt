{
    "0": [
        "\n\n\n\npackage org.apache.fop.cli;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.List;\n\nimport org.apache.commons.io.IOUtils;\n\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.MimeConstants;\n\n\npublic final class Main {\n\n    private Main() {\n    }\n\n    \n    public static URL[] getJARList() throws MalformedURLException {\n        String fopHome = System.getProperty(\"fop.home\");\n        File baseDir;\n        if (fopHome != null) {\n            baseDir = new File(fopHome).getAbsoluteFile();\n        } else {\n            baseDir = new File(\".\").getAbsoluteFile().getParentFile();\n        }\n        File buildDir;\n        if (\"build\".equals(baseDir.getName())) {\n            buildDir = baseDir;\n            baseDir = baseDir.getParentFile();\n        } else {\n            buildDir = new File(baseDir, \"build\");\n        }\n        File fopJar = new File(buildDir, \"fop.jar\");\n        if (!fopJar.exists()) {\n            fopJar = new File(baseDir, \"fop.jar\");\n        }\n        if (!fopJar.exists()) {\n            throw new RuntimeException(\"fop.jar not found in directory: \"\n                    + baseDir.getAbsolutePath() + \" (or below)\");\n        }\n        List jars = new java.util.ArrayList();\n        jars.add(fopJar.toURI().toURL());\n        File[] files;\n        FileFilter filter = new FileFilter() {\n            public boolean accept(File pathname) {\n                return pathname.getName().endsWith(\".jar\");\n            }\n        };\n        File libDir = new File(baseDir, \"lib\");\n        if (!libDir.exists()) {\n            libDir = baseDir;\n        }\n        files = libDir.listFiles(filter);\n        if (files != null) {\n            for (File file : files) {\n                jars.add(file.toURI().toURL());\n            }\n        }\n        String optionalLib = System.getProperty(\"fop.optional.lib\");\n        if (optionalLib != null) {\n            files = new File(optionalLib).listFiles(filter);\n            if (files != null) {\n                for (File file : files) {\n                    jars.add(file.toURI().toURL());\n                }\n            }\n        }\n        URL[] urls = (URL[])jars.toArray(new URL[jars.size()]);\n        \n        return urls;\n    }\n\n    \n    public static boolean checkDependencies() {\n        try {\n            \n            Class clazz = Class.forName(\"org.apache.commons.io.IOUtils\");\n            return (clazz != null);\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    \n    public static void startFOPWithDynamicClasspath(String[] args) {\n        try {\n            final URL[] urls = getJARList();\n            \n            \n            ClassLoader loader = (ClassLoader)\n                AccessController.doPrivileged(new PrivilegedAction() {\n                    public Object run() {\n                        return new java.net.URLClassLoader(urls, null);\n                    }\n                });\n            Thread.currentThread().setContextClassLoader(loader);\n            Class clazz = Class.forName(\"org.apache.fop.cli.Main\", true, loader);\n            \n            Method mainMethod = clazz.getMethod(\"startFOP\", new Class[] {String[].class});\n            mainMethod.invoke(null, new Object[] {args});\n        } catch (Exception e) {\n            System.err.println(\"Unable to start FOP:\");\n            e.printStackTrace();\n            \n            System.exit(-1);\n        }\n    }\n\n    \n    public static void startFOP(String[] args) {\n        \n        \n        \n        CommandLineOptions options = null;\n        FOUserAgent foUserAgent = null;\n        OutputStream out = null;\n\n        try {\n            options = new CommandLineOptions();\n            if (!options.parse(args)) {\n                \n                System.exit(0);\n            }\n\n            foUserAgent = options.getFOUserAgent();\n            String outputFormat = options.getOutputFormat();\n\n            try {\n                if (options.getOutputFile() != null) {\n                    out = new java.io.BufferedOutputStream(\n                            new java.io.FileOutputStream(options.getOutputFile()));\n                    foUserAgent.setOutputFile(options.getOutputFile());\n                } else if (options.isOutputToStdOut()) {\n                    out = new java.io.BufferedOutputStream(System.out);\n                }\n                if (!MimeConstants.MIME_XSL_FO.equals(outputFormat)) {\n                    options.getInputHandler().renderTo(foUserAgent, outputFormat, out);\n                } else {\n                    options.getInputHandler().transformTo(out);\n                }\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n\n            \n            \n            \n            \n            \n            \n        } catch (Exception e) {\n            if (options != null) {\n                options.getLogger().error(\"Exception\", e);\n                if (options.getOutputFile() != null) {\n                    options.getOutputFile().delete();\n                }\n            }\n            System.exit(1);\n        }\n    }\n\n    \n    public static void main(String[] args) {\n        if (checkDependencies()) {\n            startFOP(args);\n        } else {\n            startFOPWithDynamicClasspath(args);\n        }\n    }\n\n}\n"
    ],
    "1": [
        "package org.apache.fop.cli;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.MimeConstants;\n\npublic final class Main {\n\n    private Main() {\n    }\n\n    public static URL[] getJARList() throws MalformedURLException {\n        String fopHome = System.getProperty(\"fop.home\");\n        File baseDir;\n        if (fopHome != null) {\n            baseDir = new File(fopHome).getAbsoluteFile();\n        } else {\n            baseDir = new File(\".\").getAbsoluteFile().getParentFile();\n        }\n        File buildDir;\n        if (\"build\".equals(baseDir.getName())) {\n            buildDir = baseDir;\n            baseDir = baseDir.getParentFile();\n        } else {\n            buildDir = new File(baseDir, \"build\");\n        }\n        File fopJar = new File(buildDir, \"fop.jar\");\n        if (!fopJar.exists()) {\n            fopJar = new File(baseDir, \"fop.jar\");\n        }\n        if (!fopJar.exists()) {\n            throw new RuntimeException(\"fop.jar not found in directory: \"\n                    + baseDir.getAbsolutePath() + \" (or below)\");\n        }\n        \n        List<URL> jars = new ArrayList<>();\n        jars.add(fopJar.toURI().toURL());\n        File[] files;\n        FileFilter filter = new FileFilter() {\n            public boolean accept(File pathname) {\n                return pathname.getName().endsWith(\".jar\");\n            }\n        };\n        File libDir = new File(baseDir, \"lib\");\n        if (!libDir.exists()) {\n            libDir = baseDir;\n        }\n        files = libDir.listFiles(filter);\n        if (files != null) {\n            for (File file : files) {\n                URL url = file.toURI().toURL();\n                jars.add(url);\n            }\n        }\n        String optionalLib = System.getProperty(\"fop.optional.lib\");\n        if (optionalLib != null) {\n            File optionalLibDir = new File(optionalLib);\n            files = optionalLibDir.listFiles(filter);\n            if (files != null) {\n                for (File file : files) {\n                    URL url = file.toURI().toURL();\n                    jars.add(url);\n                }\n            }\n        }\n        \n        return jars.toArray(new URL[0]);\n    }\n\n    public static boolean checkDependencies() {\n        try {\n            Class<?> clazz = Class.forName(\"org.apache.commons.io.IOUtils\");\n            return (clazz != null);\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public static void startFOPWithDynamicClasspath(String[] args) {\n        try {\n            final URL[] urls = getJARList();\n            ClassLoader loader = (ClassLoader)\n                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                    public Object run() {\n                        return new java.net.URLClassLoader(urls, null);\n                    }\n                });\n            Thread.currentThread().setContextClassLoader(loader);\n            Class<?> clazz = Class.forName(\"org.apache.fop.cli.Main\", true, loader);\n            Method mainMethod = clazz.getMethod(\"startFOP\", new Class[] {String[].class});\n            mainMethod.invoke(null, new Object[] {args});\n        } catch (Exception e) {\n            System.err.println(\"Unable to start FOP:\");\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }\n\n    public static void startFOP(String[] args) {\n        CommandLineOptions options = null;\n        FOUserAgent foUserAgent = null;\n        OutputStream out = null;\n        try {\n            options = new CommandLineOptions();\n            if (!options.parse(args)) {\n                System.exit(0);\n            }\n            foUserAgent = options.getFOUserAgent();\n            String outputFormat = options.getOutputFormat();\n            try {\n                if (options.getOutputFile() != null) {\n                    out = new java.io.BufferedOutputStream(\n                            new java.io.FileOutputStream(options.getOutputFile()));\n                    foUserAgent.setOutputFile(options.getOutputFile());\n                } else if (options.isOutputToStdOut()) {\n                    out = new java.io.BufferedOutputStream(System.out);\n                }\n                if (!MimeConstants.MIME_XSL_FO.equals(outputFormat)) {\n                    options.getInputHandler().renderTo(foUserAgent, outputFormat, out);\n                } else {\n                    options.getInputHandler().transformTo(out);\n                }\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n        } catch (Exception e) {\n            if (options != null) {\n                options.getLogger().error(\"Exception\", e);\n                if (options.getOutputFile() != null) {\n                    options.getOutputFile().delete();\n                }\n            }\n            System.exit(1);\n        }\n    }\n\n    public static void main(String[] args) {\n        if (checkDependencies()) {\n            startFOP(args);\n        } else {\n            startFOPWithDynamicClasspath(args);\n        }\n    }\n}\n"
    ],
    "2": [
        "package org.apache.fop.cli;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.MimeConstants;\n\npublic final class Main {\n\n    private Main() {\n    }\n\n    \n    private static final FileFilter JAR_FILTER = new FileFilter() {\n        @Override\n        public boolean accept(File pathname) {\n            return pathname.getName().endsWith(\".jar\");\n        }\n    };\n\n    public static URL[] getJARList() throws MalformedURLException {\n        String fopHome = System.getProperty(\"fop.home\");\n        File baseDir;\n        if (fopHome != null) {\n            baseDir = new File(fopHome).getAbsoluteFile();\n        } else {\n            baseDir = new File(\".\").getAbsoluteFile().getParentFile();\n        }\n        File buildDir;\n        if (\"build\".equals(baseDir.getName())) {\n            buildDir = baseDir;\n            baseDir = baseDir.getParentFile();\n        } else {\n            buildDir = new File(baseDir, \"build\");\n        }\n        File fopJar = new File(buildDir, \"fop.jar\");\n        if (!fopJar.exists()) {\n            fopJar = new File(baseDir, \"fop.jar\");\n        }\n        if (!fopJar.exists()) {\n            throw new RuntimeException(\"fop.jar not found in directory: \"\n                    + baseDir.getAbsolutePath() + \" (or below)\");\n        }\n\n        Set<URL> jars = new LinkedHashSet<>();\n        jars.add(fopJar.toURI().toURL());\n        File[] files;\n        File libDir = new File(baseDir, \"lib\");\n        if (!libDir.exists()) {\n            libDir = baseDir;\n        }\n        files = libDir.listFiles(JAR_FILTER);\n        if (files != null) {\n            for (File file : files) {\n                jars.add(file.toURI().toURL());\n            }\n        }\n        String optionalLib = System.getProperty(\"fop.optional.lib\");\n        if (optionalLib != null) {\n            File optionalLibDir = new File(optionalLib);\n            files = optionalLibDir.listFiles(JAR_FILTER);\n            if (files != null) {\n                for (File file : files) {\n                    jars.add(file.toURI().toURL());\n                }\n            }\n        }\n        return jars.toArray(new URL[0]);\n    }\n\n    public static boolean checkDependencies() {\n        try {\n            Class.forName(\"org.apache.commons.io.IOUtils\");\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n\n    public static void startFOPWithDynamicClasspath(String[] args) {\n        try {\n            final URL[] urls = getJARList();\n            ClassLoader loader = (ClassLoader)\n                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                    public Object run() {\n                        return new java.net.URLClassLoader(urls, null);\n                    }\n                });\n            Thread.currentThread().setContextClassLoader(loader);\n            Class<?> clazz = Class.forName(\"org.apache.fop.cli.Main\", true, loader);\n            Method mainMethod = clazz.getMethod(\"startFOP\", new Class[] {String[].class});\n            mainMethod.invoke(null, new Object[] {args});\n        } catch (Exception e) {\n            System.err.println(\"Unable to start FOP:\");\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }\n\n    public static void startFOP(String[] args) {\n        CommandLineOptions options = null;\n        FOUserAgent foUserAgent = null;\n        OutputStream out = null;\n        try {\n            options = new CommandLineOptions();\n            if (!options.parse(args)) {\n                System.exit(0);\n            }\n            foUserAgent = options.getFOUserAgent();\n            String outputFormat = options.getOutputFormat();\n            \n            if (options.getOutputFile() != null) {\n                try (OutputStream fileOut = new FileOutputStream(options.getOutputFile());\n                     OutputStream bufOut = new java.io.BufferedOutputStream(fileOut)) {\n                    out = bufOut;\n                    foUserAgent.setOutputFile(options.getOutputFile());\n                    if (!MimeConstants.MIME_XSL_FO.equals(outputFormat)) {\n                        options.getInputHandler().renderTo(foUserAgent, outputFormat, out);\n                    } else {\n                        options.getInputHandler().transformTo(out);\n                    }\n                }\n            } else if (options.isOutputToStdOut()) {\n                out = System.out;\n                if (!MimeConstants.MIME_XSL_FO.equals(outputFormat)) {\n                    options.getInputHandler().renderTo(foUserAgent, outputFormat, out);\n                } else {\n                    options.getInputHandler().transformTo(out);\n                }\n                out.flush(); \n            }\n        } catch (Exception e) {\n            if (options != null) {\n                options.getLogger().error(\"Exception\", e);\n                if (options.getOutputFile() != null) {\n                    options.getOutputFile().delete();\n                }\n            }\n            System.exit(1);\n        } finally {\n            \n            if (out != null && out != System.out) {\n                IOUtils.closeQuietly(out);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        if (checkDependencies()) {\n            startFOP(args);\n        } else {\n            startFOPWithDynamicClasspath(args);\n        }\n    }\n}\n"
    ]
}