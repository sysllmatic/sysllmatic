{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\nfloat sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}",
        4.724,
        0.133,
        10367498.2,
        21073.6,
        7.491,
        18
    ],
    "1": [
        "#include <stdio.h>\n#include <vector>\n#include <cmath> \nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    float sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0; \n    float msum1 = 0, msum2 = 0, msum3 = 0, msum4 = 0; \n    size_t n = numbers.size();\n    size_t i = 0;\n\n    \n    for (; i + 3 < n; i += 4) {\n        sum1 += numbers[i];\n        sum2 += numbers[i + 1];\n        sum3 += numbers[i + 2];\n        sum4 += numbers[i + 3];\n    }\n    \n    for (; i < n; ++i) {\n        sum1 += numbers[i];\n    }\n\n    float avg = (sum1 + sum2 + sum3 + sum4) / n;\n\n    \n    i = 0;\n    for (; i + 3 < n; i += 4) {\n        msum1 += abs(numbers[i] - avg);\n        msum2 += abs(numbers[i + 1] - avg);\n        msum3 += abs(numbers[i + 2] - avg);\n        msum4 += abs(numbers[i + 3] - avg);\n    }\n    \n    for (; i < n; ++i) {\n        msum1 += abs(numbers[i] - avg);\n    }\n\n    float msum = msum1 + msum2 + msum3 + msum4;\n    return msum / n;\n}",
        1.054,
        0.973,
        1.121,
        1.003,
        0.976,
        41
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <cmath>\n#include <immintrin.h> \n#include <omp.h> \nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    size_t n = numbers.size();\n    if (n == 0) return 0.0f;\n\n    float sum = 0.0f;\n    #pragma omp parallel for reduction(+:sum)\n    for (size_t i = 0; i < n; ++i) {\n        sum += numbers[i];\n    }\n\n    float avg = sum / n;\n\n    float msum = 0.0f;\n    #pragma omp parallel for reduction(+:msum)\n    for (size_t i = 0; i < n; ++i) {\n        msum += fabs(numbers[i] - avg); \n    }\n\n    return msum / n;\n}\n\n",
        0.996,
        1.042,
        0.048,
        0.999,
        1.044,
        28
    ]
}