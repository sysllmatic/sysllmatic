{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\nvector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}",
        9.831,
        0.238,
        414456233.0,
        214688.8,
        4.198,
        13
    ],
    "1": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <stdlib.h>\nusing namespace std;\n\nvector<string> filter_by_prefix(const vector<string>& strings, const string& prefix) {\n    vector<string> out;\n    out.reserve(strings.size()); \n    size_t prefix_len = prefix.length();\n    for (const auto& str : strings) {\n        if (str.compare(0, prefix_len, prefix) == 0) { \n            out.push_back(str);\n        }\n    }\n    return out;\n}\n\n\n\n",
        1.319,
        1.296,
        2.065,
        1.814,
        1.296,
        22
    ],
    "2": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <stdlib.h>\n#include <omp.h>\n#include <cstring>  \nusing namespace std;\n\nvector<string> filter_by_prefix(const vector<string>& strings, const string& prefix) {\n    vector<string> out;\n    size_t prefix_len = prefix.length();\n\n    if (prefix_len == 0) {\n        \n        return out;  \n    }\n\n    \n    out.reserve(strings.size());  \n\n    #pragma omp parallel\n    {\n        vector<string> local_out;\n        local_out.reserve(strings.size() / omp_get_num_threads()); \n\n        #pragma omp for\n        for (size_t i = 0; i < strings.size(); ++i) {\n            if (strncmp(strings[i].c_str(), prefix.c_str(), prefix_len) == 0) {\n                local_out.push_back(strings[i]);\n            }\n        }\n\n        #pragma omp critical\n        out.insert(out.end(), local_out.begin(), local_out.end());\n    }\n\n    return out;\n}\n\n\n",
        1.268,
        1.202,
        0.714,
        1.805,
        1.202,
        42
    ]
}