{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\nstring out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        4.881,
        0.143,
        19658123.0,
        21152.0,
        6.969,
        16
    ],
    "1": [
        "#include <iostream>\n#include <unordered_set>\n#include <string>\n\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    string out = \"\";\n    unordered_set<char> vowels = {'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'};\n    \n    for (int i = word.length() - 2; i >= 1; i--) {\n        if (vowels.find(word[i]) != vowels.end() &&\n            vowels.find(word[i + 1]) == vowels.end() &&\n            vowels.find(word[i - 1]) == vowels.end()) {\n            return out + word[i];\n        }\n    }\n    return out;\n}\n\n",
        1.004,
        1.083,
        0.908,
        1.008,
        1.086,
        20
    ],
    "2": [
        "#include <iostream>\n#include <bitset>\n#include <string>\n\nusing namespace std;\n\nstring get_closest_vowel(const string& word) {\n    if (word.length() < 3) return \"\"; \n\n    string out = \"\";\n    bitset<256> vowel_bits;\n    string vowels = \"AEIOUaeiou\";\n    for (char c : vowels) {\n        vowel_bits.set(static_cast<unsigned char>(c));\n    }\n\n    \n    int n = word.length();\n    bool is_vowel[n];\n    for (int i = 0; i < n; ++i) {\n        is_vowel[i] = vowel_bits[word[i]];\n    }\n\n    for (int i = n - 2; i >= 1; --i) {\n        if (is_vowel[i] && !is_vowel[i + 1] && !is_vowel[i - 1]) {\n            return out + word[i];\n        }\n    }\n    return out;\n}\n\n",
        1.079,
        1.145,
        2.568,
        1.005,
        1.147,
        31
    ]
}