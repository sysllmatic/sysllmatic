{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\nsort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}",
        4.549,
        0.121,
        4338472.0,
        21175.2,
        8.258,
        12
    ],
    "1": [
        "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\nusing namespace std;\n\nint next_smallest(vector<int> lst) {\n    \n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    unordered_set<int> visited;\n    \n    \n    for (int num : lst) {\n        if (visited.find(num) == visited.end()) {\n            minHeap.push(num);\n            visited.insert(num);\n        }\n    }\n\n    if (minHeap.empty()) return -1; \n    \n    \n    int smallest = minHeap.top();\n    minHeap.pop();\n    \n    \n    return minHeap.empty() ? -1 : minHeap.top();\n}\n\n",
        0.953,
        0.93,
        0.926,
        1.002,
        0.93,
        29
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint next_smallest(const vector<int>& lst) {\n    if (lst.empty()) return -1;\n    vector<int> sorted_lst = lst;  \n    sort(sorted_lst.begin(), sorted_lst.end());\n    \n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != sorted_lst[i - 1]) {\n            return sorted_lst[i];\n        }\n    }\n    return -1;\n}\n\n",
        1.012,
        0.948,
        0.939,
        1.004,
        0.948,
        19
    ]
}