{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\nlong long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        4.698,
        0.132,
        11940047.8,
        21079.2,
        7.578,
        13
    ],
    "1": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        float current = lst[i];\n        float rounded = round(current);\n        if ((current - rounded) < 1e-4 && current > 0 && (int)rounded % 2 == 1) {\n            int rounded_int = (int)rounded;\n            sum += rounded_int * rounded_int;\n        }\n    }\n    return sum;\n}",
        1.021,
        1.002,
        1.177,
        0.999,
        1.001,
        18
    ],
    "2": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n#include <omp.h>  \nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    #pragma omp parallel for reduction(+:sum)\n    for (int i = 0; i < lst.size(); i++) {\n        float current = lst[i];\n        int rounded_int = (int)round(current);\n        if ((fabs(current - rounded_int) < 1e-4) && current > 0 && (rounded_int % 2 == 1)) {\n            sum += rounded_int * rounded_int;\n        }\n    }\n    return sum;\n}",
        0.98,
        1.015,
        0.086,
        1.0,
        1.014,
        19
    ]
}