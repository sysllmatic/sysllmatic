{
    "0": [
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\nstring max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        4.951,
        0.136,
        26376226.2,
        21045.6,
        7.319,
        24
    ],
    "1": [
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<set>\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique = 0;\n    for (const string &word : words) {\n        set<char> unique_chars(word.begin(), word.end());\n        int unique_length = unique_chars.size();\n        if (unique_length > max_unique || (unique_length == max_unique && word < max_word)) {\n            max_word = word;\n            max_unique = unique_length;\n        }\n    }\n    return max_word;\n}\n\n",
        0.998,
        1.011,
        0.643,
        1.002,
        1.014,
        20
    ],
    "2": [
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<unordered_set>\n#include<algorithm>\nusing namespace std;\n\nstring find_max(const vector<string>& words) {\n    string max_word = \"\";\n    int max_unique = 0;\n\n    for (const auto& word : words) {\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_length = unique_chars.size();\n\n        if (unique_length > max_unique || (unique_length == max_unique && word < max_word)) {\n            max_word = word;\n            max_unique = unique_length;\n        }\n    }\n    return max_word;\n}\n\n",
        1.01,
        1.009,
        0.812,
        1.001,
        1.012,
        23
    ]
}