{
    "FFT": "public static void main(String[] args) {\n    if (args.length == 0) {\n        int n = 1048576;\n        System.out.println(test(makeRandom(n)) / 1048576);\n    }\n    for (int i = 0; i < args.length; i++) {\n        int n = Integer.parseInt(args[i]);\n        System.out.println(test(makeRandom(n)) / 1048576);\n    }\n}",
    "LU": "public static void main(String[] args) {\n    Random R = new Random(101010); // Given constant\n    int N = 1000; // Given constant\n\n    double[][] A = RandomMatrix(N, N, R);\n    double[][] lu = new double[N][N];\n    int[] pivot = new int[N];\n\n    CopyMatrix(lu, A);\n\n    int status = factor(lu, pivot);\n    if (status != 0) {\n        System.err.println(\"LU factorization failed due to singular matrix.\");\n        return;\n    }\n\n    double[] b = RandomVector(N, R);\n    double[] x = NewVectorCopy(b);\n\n    solve(lu, pivot, x);\n    System.out.println(normabs(b, matvec(A, x)) / N);\n}",
    "MonteCarlo": "public static void main(String[] args) {\n    int cycles = 1073741824;\n    double result = integrate(cycles);\n    System.out.println(result);\n}",
    "SOR": "public static void main(String[] args) {\n    final int SOR_SIZE = 100;\n    final long cycles = 65536;      // Fixed number of iterations.\n    double omega = 1.25;            // Relaxation factor\n\n    // Create a random matrix of dimensions SOR_SIZE x SOR_SIZE.\n    double[][] G = randomMatrix(SOR_SIZE, SOR_SIZE);\n\n    // Execute the SOR algorithm.\n    execute(omega, G, cycles);\n\n    // Compute the error between the two matrices (should be 0.0 for a matrix of random values)\n    double[][] G_baseline = randomMatrix(SOR_SIZE, SOR_SIZE);\n    double error = 0.0;\n    for (int i = 0; i < SOR_SIZE; i++) {\n        error += normabs(G[i], G_baseline[i]);\n    }\n\n    // Print the error result\n    System.out.println(error * 1.0e-6);\n}",
    "SparseCompRow": "public static void main(String[] args) {\n    int N = 1000;              // Size of the vector / number of rows.\n    int nz = 10000;            // Total number of nonzeros in the matrix.\n    long cycles = 524288;      // Fixed cycles\n    long seed = 101010;\n\n    Random rand1 = new Random(seed);\n    Random rand2 = new Random(seed + 1);\n\n    double[] x = randomVector(N, rand1);\n\n    int nr = nz / N;\n    int anz = nr * N;\n    double[] val = randomVector(anz, rand2);\n    int[] col = new int[anz];\n    int[] row = new int[N + 1];\n    row[0] = 0;\n    for (int r = 0; r < N; r++) {\n        int rowr = row[r];\n        row[r + 1] = rowr + nr;\n        int step = r / nr;\n        if (step < 1) step = 1;\n        for (int i = 0; i < nr; i++) {\n            col[rowr + i] = i * step;\n        }\n    }\n\n    double[] yTest = new double[N];\n    double[] yRef = new double[N];\n\n    matmult(yTest, val, row, col, x, cycles);\n    matmult(yRef, val, row, col, x, 1);\n\n    double difference = normabs(yTest, yRef);\n    System.out.println(difference);\n}"
}
