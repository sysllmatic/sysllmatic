{
    "0": [
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\nint a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}",
        4.669,
        0.131,
        4588436.8,
        21066.4,
        7.631,
        23
    ],
    "1": [
        "#include <stdio.h>\n#include <string>\n#include <cstdlib> \nusing namespace std;\n\n\nvoid parse_fraction(const string& fraction, int& numerator, int& denominator) {\n    size_t slash_pos = fraction.find('/');\n    if (slash_pos != string::npos) {\n        numerator = atoi(fraction.substr(0, slash_pos).c_str());\n        denominator = atoi(fraction.substr(slash_pos + 1).c_str());\n    }\n}\n\nbool simplify(const string& x, const string& n) {\n    int a, b, c, d;\n    parse_fraction(x, a, b);\n    parse_fraction(n, c, d);\n    return (a * c) % (b * d) == 0;\n}\n\n",
        1.018,
        1.067,
        1.002,
        0.998,
        1.066,
        21
    ]
}