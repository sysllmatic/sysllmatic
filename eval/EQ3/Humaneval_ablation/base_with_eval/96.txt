{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\nvector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        8.049,
        0.131,
        38860761.6,
        21134.4,
        7.608,
        20
    ],
    "1": [
        "#include <stdio.h>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    vector<bool> is_prime(n, true);\n    vector<int> out;\n\n    if (n <= 2) return out;\n\n    is_prime[0] = is_prime[1] = false; \n\n    for (int i = 2; i < sqrt(n); ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            out.push_back(i);\n        }\n    }\n    return out;\n}\n\n\n",
        1.083,
        1.013,
        1.972,
        1.003,
        1.015,
        30
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\nconst int MAX_LIMIT = 1000000; \n\nvector<int> count_up_to(int n) {\n    if (n <= 2) return {};\n    vector<int> out;\n    bitset<MAX_LIMIT> is_prime; \n    is_prime.set();\n    is_prime[0] = is_prime[1] = 0; \n\n    int limit = static_cast<int>(sqrt(n));\n    for (int i = 2; i <= limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                is_prime[j] = 0;\n            }\n        }\n    }\n\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            out.push_back(i);\n        }\n    }\n    return out;\n}\n\n",
        1.042,
        1.025,
        3.279,
        1.005,
        1.027,
        32
    ]
}