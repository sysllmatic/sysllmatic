{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}",
        4.83,
        0.126,
        8780796.2,
        20975.2,
        7.896,
        11
    ],
    "1": [
        "#include <vector>\n#include <algorithm> \n#include <cmath> \n#include <cassert> \n#include <iostream>\n\nfloat median(std::vector<float> l) { \n    size_t n = l.size();\n    if (n == 0) return 0.0f; \n\n    size_t mid = n / 2;\n\n    \n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n    float median_value = l[mid];\n\n    if (n % 2 == 0) {\n        \n        std::nth_element(l.begin(), l.begin() + mid - 1, l.end());\n        median_value = 0.5f * (median_value + l[mid - 1]);\n    }\n\n    return median_value;\n}\n\n",
        0.889,
        0.953,
        0.915,
        0.994,
        0.956,
        25
    ],
    "2": [
        "#include <vector>\n#include <algorithm> \n#include <cmath> \n#include <cassert> \n#include <iostream>\n\nfloat median(std::vector<float> l) {\n    size_t n = l.size();\n    if (n == 0) return 0.0f; \n\n    size_t mid = n / 2;\n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n    float median_value = l[mid];\n\n    if (n % 2 == 0) {\n        \n        auto max_it = std::max_element(l.begin(), l.begin() + mid);\n        median_value = 0.5f * (median_value + *max_it);\n    }\n\n    return median_value;\n}\n\n",
        1.065,
        0.966,
        0.987,
        0.992,
        0.97,
        23
    ]
}