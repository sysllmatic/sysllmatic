{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\nlong long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        4.837,
        0.133,
        12005606.2,
        21068.0,
        7.483,
        13
    ],
    "1": [
        "#include <iostream> \n#include <vector>\n#include <cmath> \nusing namespace std;\n\nlong long double_the_difference(const vector<float>& lst) {\n    long long sum = 0;\n    for (auto value : lst) {\n        float rounded_value = std::round(value);\n        if (std::fabs(value - rounded_value) < 1e-4) {\n            int rounded_int = static_cast<int>(rounded_value);\n            if (rounded_int > 0 && rounded_int % 2 == 1) {\n                sum += static_cast<long long>(rounded_int) * rounded_int;\n            }\n        }\n    }\n    return sum;\n}",
        0.997,
        1.028,
        1.05,
        1.001,
        1.032,
        18
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(const vector<float>& lst) {\n    long long sum = 0;\n\n    for (const auto& value : lst) {\n        float rounded_value = std::round(value);\n        if (std::fabs(value - rounded_value) < 1e-4) {\n            int rounded_int = static_cast<int>(rounded_value);\n            if (rounded_int > 0 && rounded_int % 2 == 1) {\n                sum += static_cast<long long>(rounded_int) * rounded_int;\n            }\n        }\n    }\n\n    return sum;\n}\n\n",
        0.979,
        1.035,
        1.045,
        0.997,
        1.038,
        21
    ]
}