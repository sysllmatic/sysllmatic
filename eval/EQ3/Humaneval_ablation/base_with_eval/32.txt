{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\ndouble ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}",
        4.654,
        0.134,
        10788690.0,
        21062.4,
        7.453,
        33
    ],
    "1": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <math.h>\n#include <stdlib.h>\nusing namespace std;\n\ndouble poly(const vector<double>& xs, double x) {\n    double result = 0.0;\n    \n    for (int i = xs.size() - 1; i >= 0; --i) {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n\ndouble find_zero(const vector<double>& xs) {\n    double ans = 0.0;\n    double value = poly(xs, ans);\n    double tolerance = 1e-6;\n    int max_iterations = 1000; \n    int iteration_count = 0;\n    \n    while (abs(value) > tolerance && iteration_count < max_iterations) {\n        double driv = 0.0;\n        \n        for (int i = xs.size() - 1; i > 0; --i) {\n            driv = driv * ans + xs[i] * i;\n        }\n        \n        \n        if (driv == 0) break;\n        \n        ans -= value / driv;\n        value = poly(xs, ans);\n        ++iteration_count;\n    }\n    return ans;\n}",
        1.008,
        0.949,
        1.3,
        1.001,
        0.949,
        39
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <math.h>\n#include <stdlib.h>\nusing namespace std;\n\n\nvector<double> compute_derivative(const vector<double>& xs) {\n    vector<double> deriv_coeffs(xs.size() - 1);\n    for (int i = 1; i < xs.size(); ++i) {\n        deriv_coeffs[i-1] = xs[i] * i;\n    }\n    return deriv_coeffs;\n}\n\ndouble poly(const vector<double>& xs, double x) {\n    double result = 0.0;\n    for (int i = xs.size() - 1; i >= 0; --i) {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n\ndouble find_zero(const vector<double>& xs) {\n    double ans = 0.0;\n    double value = poly(xs, ans);\n    double tolerance = 1e-6;\n    int max_iterations = 1000;\n    int iteration_count = 0;\n    double epsilon = 1e-12; \n\n    \n    vector<double> deriv_coeffs = compute_derivative(xs);\n    \n    while (abs(value) > tolerance && iteration_count < max_iterations) {\n        double driv = 0.0;\n        \n        for (int i = deriv_coeffs.size() - 1; i >= 0; --i) {\n            driv = driv * ans + deriv_coeffs[i];\n        }\n        \n        \n        if (abs(driv) < epsilon) break;\n        \n        ans -= value / driv;\n        value = poly(xs, ans);\n        ++iteration_count;\n    }\n    return ans;\n}",
        0.998,
        0.983,
        1.169,
        1.005,
        0.983,
        51
    ]
}