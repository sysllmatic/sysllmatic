{
    "0": [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        4.626,
        0.12,
        3014028.8,
        21111.2,
        8.337,
        24
    ],
    "1": [
        "#include<stdio.h>\n#include<stdlib.h>\n\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    if (num <= 3) return 1;\n    if (num % 2 == 0 || num % 3 == 0) return 0;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n\nint prime_fib(int n) {\n    if (n <= 0) return -1; \n    int f1 = 1, f2 = 2;\n    int count = 0;\n    while (count < n) {\n        int f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        if (is_prime(f1)) {\n            count++;\n        }\n        if (count == n) {\n            return f1;\n        }\n    }\n    return -1; \n}\n\n",
        1.071,
        1.0,
        0.964,
        0.999,
        0.998,
        31
    ],
    "2": [
        "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    if (n <= 0) return -1;\n    int f1 = 1, f2 = 2;\n    int count = 0;\n    int* memo_primes = (int*)malloc(n * sizeof(int)); \n    int memo_count = 0;\n\n    while (count < n) {\n        int f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        if (is_prime(f1)) {\n            if (memo_count < n) { \n                memo_primes[memo_count++] = f1;\n            }\n            count++;\n        }\n        if (count == n) {\n            int result = f1;\n            free(memo_primes); \n            return result;\n        }\n    }\n    free(memo_primes); \n    return -1;\n}\n\n",
        0.972,
        0.936,
        1.013,
        0.999,
        0.934,
        43
    ]
}