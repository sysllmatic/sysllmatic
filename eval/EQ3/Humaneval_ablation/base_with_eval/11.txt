{
    "0": [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}",
        4.738,
        0.14,
        4607004.8,
        21010.4,
        7.146,
        29
    ],
    "1": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(const string &a, const string &b) {\n    size_t minLength = min(a.length(), b.length());\n    string output;\n    output.reserve(max(a.length(), b.length())); \n    \n    for (size_t i = 0; i < minLength; ++i) {\n        output += (a[i] == b[i]) ? '0' : '1';\n    }\n    \n    \n    if (a.length() > b.length()) {\n        output += a.substr(minLength);\n    } else if (b.length() > a.length()) {\n        output += b.substr(minLength);\n    }\n    \n    return output;\n}",
        1.014,
        0.999,
        0.927,
        0.998,
        0.997,
        22
    ],
    "2": [
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(const string &a, const string &b) {\n    string output;\n    output.reserve(max(a.size(), b.size())); \n    \n    \n    auto it_a = a.begin(), it_b = b.begin();\n    for (; it_a != a.end() && it_b != b.end(); ++it_a, ++it_b) {\n        output += (*it_a == *it_b) ? '0' : '1';\n    }\n    \n    \n    output.append(it_a, a.end());\n    output.append(it_b, b.end());\n    \n    return output;\n}",
        1.017,
        1.07,
        0.921,
        1.0,
        1.068,
        20
    ]
}