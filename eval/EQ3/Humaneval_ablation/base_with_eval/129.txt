{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}",
        4.566,
        0.133,
        6324143.0,
        21049.6,
        7.491,
        24
    ],
    "1": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int x = -1, y = -1, min;\n    int gridSize = grid.size();\n    \n    \n    for (int i = 0; i < gridSize; ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n                break;  \n            }\n        }\n        if (x != -1) break;  \n    }\n\n    \n    min = gridSize * gridSize;\n\n    \n    if (x > 0) min = std::min(min, grid[x-1][y]);\n    if (x < gridSize - 1) min = std::min(min, grid[x+1][y]);\n    if (y > 0) min = std::min(min, grid[x][y-1]);\n    if (y < grid[x].size() - 1) min = std::min(min, grid[x][y+1]);\n\n    \n    vector<int> out;\n    out.reserve(k);\n\n    \n    for (int i = 0; i < k; ++i) {\n        if (i % 2 == 0) out.push_back(1);\n        else out.push_back(min);\n    }\n\n    return out;\n}",
        1.007,
        1.086,
        1.095,
        0.997,
        1.089,
        42
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int x = -1, y = -1;\n    int gridSize = grid.size();\n    int min = gridSize * gridSize; \n\n    \n    for (int i = 0; i < gridSize && x == -1; ++i) {\n        for (int j = 0; j < grid[i].size(); ++j) {\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n                break;  \n            }\n        }\n    }\n\n    \n    if (x > 0) min = std::min(min, grid[x-1][y]);\n    if (x < gridSize - 1) min = std::min(min, grid[x+1][y]);\n    if (y > 0) min = std::min(min, grid[x][y-1]);\n    if (y < grid[x].size() - 1) min = std::min(min, grid[x][y+1]);\n\n    \n    vector<int> out(k);\n    for (int i = 0; i < k; ++i) {\n        out[i] = (i % 2 == 0) ? 1 : min;\n    }\n\n    return out;\n}",
        1.016,
        1.037,
        1.087,
        0.999,
        1.04,
        35
    ]
}