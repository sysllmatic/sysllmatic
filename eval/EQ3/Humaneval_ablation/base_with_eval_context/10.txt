{
    "0": [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\nint i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}",
        4.54,
        0.124,
        4567838.8,
        21074.4,
        8.072,
        26
    ],
    "1": [
        "#include <iostream>\n#include <string>\n#include <algorithm> \nusing namespace std;\n\nbool is_palindrome(const string &str, int start, int end) {\n    while (start < end) {\n        if (str[start] != str[end]) {\n            return false;\n        }\n        ++start;\n        --end;\n    }\n    return true;\n}\n\nstring make_palindrome(const string &str) {\n    int n = str.length();\n    if (n == 0) return str;\n    for (int i = 0; i < n; ++i) {\n        if (is_palindrome(str, i, n - 1)) {\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    return str; \n}\n\n\n",
        0.779,
        1.049,
        0.975,
        1.001,
        1.047,
        30
    ],
    "2": [
        "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nstring make_palindrome(const string &str) {\n    int n = str.length();\n    if (n == 0) return str;\n\n    string rev_str = str;\n    reverse(rev_str.begin(), rev_str.end());\n    string concat = str + '#' + rev_str;\n\n    vector<int> lps(concat.size(), 0);\n    for (int i = 1, len = 0; i < concat.size();) {\n        if (concat[i] == concat[len]) {\n            lps[i++] = ++len;\n        } else if (len > 0) {\n            len = lps[len - 1];\n        } else {\n            lps[i++] = 0;\n        }\n    }\n\n    int len_palindrome_suffix = lps.back();\n    string prefix = str.substr(0, n - len_palindrome_suffix);\n    reverse(prefix.begin(), prefix.end());\n\n    return str + prefix;\n}\n\n",
        0.985,
        0.954,
        0.968,
        1.006,
        0.952,
        32
    ]
}