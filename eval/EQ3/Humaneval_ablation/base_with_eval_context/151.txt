{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\nlong long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        4.767,
        0.138,
        12131774.6,
        20948.8,
        7.226,
        13
    ],
    "1": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nlong long double_the_difference(const vector<float>& lst) {\n    long long sum = 0;\n    for (const auto& value : lst) {\n        float rounded_value = round(value);\n        if (fabs(value - rounded_value) < 1e-4) {\n            int rounded_int = static_cast<int>(rounded_value);\n            if (rounded_int > 0 && rounded_int % 2 == 1) {\n                sum += static_cast<long long>(rounded_int) * rounded_int;\n            }\n        }\n    }\n    return sum;\n}\n\n",
        0.993,
        1.118,
        1.07,
        0.988,
        1.12,
        20
    ],
    "2": [
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n#include <omp.h>\nusing namespace std;\n\nlong long double_the_difference(const vector<float>& lst) {\n    long long sum = 0;\n    #pragma omp parallel for reduction(+:sum) schedule(static)\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int rounded_int = static_cast<int>(round(lst[i]));\n        if (fabs(lst[i] - rounded_int) < 1e-4 && rounded_int > 0 && (rounded_int % 2 == 1)) {\n            sum += static_cast<long long>(rounded_int) * rounded_int;\n        }\n    }\n    return sum;\n}\n\n",
        1.014,
        1.102,
        0.107,
        0.994,
        1.104,
        19
    ]
}