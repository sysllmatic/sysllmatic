{
    "0": [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        4.337,
        0.113,
        2934389.8,
        20996.0,
        8.837,
        24
    ],
    "1": [
        "#include <stdio.h>\n#include <stdlib.h>\n\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    if (num <= 3) return 1;\n    if (num % 2 == 0 || num % 3 == 0) return 0;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n\nint prime_fib(int n) {\n    int f1 = 1, f2 = 2;\n    int count = 0;\n    while (count < n) {\n        int f_next = f1 + f2;\n        f1 = f2;\n        f2 = f_next;\n\n        if (is_prime(f1)) {\n            count++;\n            if (count == n) return f1;\n        }\n    }\n    return 0; \n}\n\n\n",
        0.958,
        0.942,
        1.016,
        0.997,
        0.942,
        30
    ],
    "2": [
        "#include <stdio.h>\n#include <stdlib.h>\n#include <vector>\n#include <thread>\n#include <mutex>\n\nstd::mutex mtx;\nstd::vector<int> primes_cache;\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nvoid check_prime_fib(int f1, int &count, int n, int &result) {\n    if (is_prime(f1)) {\n        std::lock_guard<std::mutex> guard(mtx);\n        count++;\n        if (count == n) {\n            result = f1;\n        }\n    }\n}\n\nint prime_fib(int n) {\n    int f1 = 1, f2 = 2;\n    int count = 0;\n    int result = 0;\n    std::vector<std::thread> threads;\n\n    while (count < n) {\n        int f_next = f1 + f2;\n        f1 = f2;\n        f2 = f_next;\n\n        threads.push_back(std::thread(check_prime_fib, f1, std::ref(count), n, std::ref(result)));\n\n        for (auto &t : threads) {\n            if (t.joinable()) t.join();\n        }\n        threads.clear();\n    }\n    return result;\n}\n\n",
        0.888,
        0.859,
        0.313,
        0.997,
        0.859,
        50
    ]
}