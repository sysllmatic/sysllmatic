{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}",
        4.769,
        0.132,
        8829275.4,
        21052.0,
        7.566,
        11
    ],
    "1": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm> \n#include <cassert>\n#include <cmath>\nusing namespace std;\n\nfloat median(vector<float> l) { \n    size_t size = l.size();\n    if (size == 0) return 0.0; \n\n    size_t mid = size / 2;\n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n\n    if (size % 2 == 1) {\n        return l[mid];\n    } else {\n        float mid1 = l[mid];\n        std::nth_element(l.begin(), l.begin() + mid - 1, l.end());\n        float mid2 = l[mid - 1];\n        return 0.5 * (mid1 + mid2);\n    }\n}\n\n",
        1.007,
        0.969,
        1.077,
        0.998,
        0.969,
        24
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <cmath>\nusing namespace std;\n\nfloat median(vector<float> l) { \n    size_t size = l.size();\n    if (size == 0) return 0.0; \n\n    size_t mid = size / 2;\n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n    float mid1 = l[mid];\n\n    if (size % 2 == 0) {\n        \n        float max_left = *std::max_element(l.begin(), l.begin() + mid);\n        return 0.5 * (mid1 + max_left);\n    }\n    return mid1;\n}\n\n",
        0.98,
        0.95,
        1.0,
        1.001,
        0.95,
        23
    ]
}