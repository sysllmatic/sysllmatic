{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\nlist_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}",
        7.493,
        0.149,
        80606212.4,
        21048.0,
        6.702,
        22
    ],
    "1": [
        "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\nusing namespace std;\n\ntypedef std::list<boost::any> list_any;\n\nvector<int> filter_integers(const list_any& values) {\n    vector<int> out;\n    for (const auto& element : values) {\n        \n        if (element.type() == typeid(int)) {\n            out.push_back(boost::any_cast<int>(element));\n        }\n    }\n    return out;\n}\n\n\n\n",
        1.49,
        1.107,
        1.773,
        1.003,
        1.107,
        22
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\nusing namespace std;\n\ntypedef std::list<boost::any> list_any;\n\nvector<int> filter_integers(const list_any& values) {\n    vector<int> out;\n    \n    out.reserve(values.size()); \n\n    for (const auto& element : values) {\n        if (element.type() == typeid(int)) {\n            out.push_back(boost::any_cast<int>(element));\n        }\n    }\n\n    return out;\n}\n\n\n\n",
        1.524,
        0.993,
        1.754,
        1.002,
        0.993,
        25
    ]
}