{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\nbool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}",
        5.115,
        0.117,
        2583831.0,
        21096.8,
        8.564,
        13
    ],
    "1": [
        "#include <stdio.h>\n#include <cstdlib>\n\nint x_or_y(int n, int x, int y) {\n    if (n < 2) return y;\n    if (n == 2) return x;  \n    if (n % 2 == 0) return y;  \n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}",
        0.972,
        0.932,
        0.919,
        1.005,
        0.928,
        12
    ],
    "2": [
        "#include <stdio.h>\n#include <vector>\n#include <cmath>\n\n\nstd::vector<int> precompute_primes(int limit) {\n    std::vector<bool> is_prime(limit + 1, true);\n    is_prime[0] = is_prime[1] = false;\n    for (int i = 2; i * i <= limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j <= limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i <= limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n\n    \n    static std::vector<int> small_primes = precompute_primes(1000);\n\n    \n    for (int prime : small_primes) {\n        if (prime * prime > n) break;\n        if (n % prime == 0) return y;\n    }\n\n    \n    for (int i = small_primes.back() + 1; i * i <= n; i += 2) {\n        if (n % i == 0) return y;\n    }\n\n    return x;\n}",
        1.145,
        0.889,
        0.524,
        1.012,
        0.886,
        45
    ]
}