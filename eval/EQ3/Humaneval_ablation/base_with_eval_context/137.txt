{
    "0": [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\ndouble  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}",
        4.732,
        0.136,
        4683000.2,
        21072.8,
        7.325,
        45
    ],
    "1": [
        "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <algorithm>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    auto convert_to_double = [](const boost::any& value) -> double {\n        if (value.type() == typeid(string)) {\n            string s = boost::any_cast<string>(value);\n            std::replace(s.begin(), s.end(), ',', '.');\n            return std::stod(s);\n        } else if (value.type() == typeid(int)) {\n            return static_cast<double>(boost::any_cast<int>(value));\n        } else if (value.type() == typeid(double)) {\n            return boost::any_cast<double>(value);\n        }\n        throw std::invalid_argument(\"Unsupported type\");\n    };\n\n    double numa = convert_to_double(a);\n    double numb = convert_to_double(b);\n\n    if (numa == numb) return string(\"None\");\n    return (numa < numb) ? b : a;\n}\n\n\n",
        1.013,
        1.087,
        1.036,
        0.991,
        1.089,
        31
    ],
    "2": [
        "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <algorithm>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    auto convert_to_double = [](const boost::any& value) -> double {\n        if (value.type() == typeid(string)) {\n            string s = boost::any_cast<string>(value);\n            std::replace(s.begin(), s.end(), ',', '.');\n            return std::stod(s);\n        } else if (value.type() == typeid(int)) {\n            return static_cast<double>(boost::any_cast<int>(value));\n        } else if (value.type() == typeid(double)) {\n            return boost::any_cast<double>(value);\n        }\n        throw std::invalid_argument(\"Unsupported type\");\n    };\n\n    double numa = convert_to_double(a);\n    double numb = convert_to_double(b);\n\n    if (numa == numb) return string(\"None\");\n    return (numa < numb) ? b : a;\n}\n\n\n",
        0.981,
        1.024,
        1.061,
        1.006,
        1.027,
        31
    ]
}