{
    "0": [
        "\n\npackage net.sourceforge.pmd.lang.rule;\n\nimport java.text.MessageFormat;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RuleViolation;\nimport net.sourceforge.pmd.lang.ast.Node;\n\npublic abstract class AbstractRuleViolationFactory implements RuleViolationFactory {\n\n    private static final Object[] NO_ARGS = new Object[0];\n\n    private String cleanup(String message, Object[] args) {\n\n        if (message != null) {\n            \n            \n            final String escapedMessage = StringUtils.replace(message, \"${\", \"$'{'\");\n            return MessageFormat.format(escapedMessage, args != null ? args : NO_ARGS);\n        } else {\n            return message;\n        }\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, Object[] args) {\n\n        String formattedMessage = cleanup(message, args);\n\n        ruleContext.getReport().addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage));\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, int beginLine, int endLine,\n            Object[] args) {\n\n        String formattedMessage = cleanup(message, args);\n\n        ruleContext.getReport()\n                .addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage, beginLine, endLine));\n    }\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message);\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message,\n            int beginLine, int endLine);\n}\n"
    ],
    "1": [
        "package net.sourceforge.pmd.lang.rule;\n\nimport java.text.MessageFormat;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RuleViolation;\nimport net.sourceforge.pmd.lang.ast.Node;\n\npublic abstract class AbstractRuleViolationFactory implements RuleViolationFactory {\n\n    private static final Object[] NO_ARGS = new Object[0];\n\n    private String cleanup(String message, Object[] args) {\n        if (message == null) {\n            return null;\n        }\n        \n        String result = message;\n        if (message.indexOf(\"${\") >= 0) {\n            result = message.replace(\"${\", \"$'{'\" );\n        }\n        \n        boolean hasArgs = args != null && args.length > 0;\n        if (hasArgs || result.indexOf('{') >= 0) {\n            return MessageFormat.format(result, hasArgs ? args : NO_ARGS);\n        } else {\n            return result;\n        }\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, Object[] args) {\n        String formattedMessage = cleanup(message, args);\n        ruleContext.getReport().addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage));\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, int beginLine, int endLine,\n            Object[] args) {\n        String formattedMessage = cleanup(message, args);\n        ruleContext.getReport()\n                .addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage, beginLine, endLine));\n    }\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message);\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message,\n            int beginLine, int endLine);\n}\n"
    ],
    "2": [
        "package net.sourceforge.pmd.lang.rule;\n\nimport java.text.MessageFormat;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RuleViolation;\nimport net.sourceforge.pmd.lang.ast.Node;\n\npublic abstract class AbstractRuleViolationFactory implements RuleViolationFactory {\n\n    private static final Object[] NO_ARGS = new Object[0];\n    \n    \n    private String cleanup(String message, Object[] args) {\n        if (message == null) {\n            return null;\n        }\n        boolean foundDollarBrace = false;\n        boolean foundBrace = false;\n        int len = message.length();\n        \n        for (int i = 0; i < len; i++) {\n            char c = message.charAt(i);\n            if (!foundDollarBrace && c == '$' && i + 1 < len && message.charAt(i+1) == '{') {\n                foundDollarBrace = true;\n            }\n            if (!foundBrace && c == '{') {\n                foundBrace = true;\n            }\n            if (foundDollarBrace && foundBrace) break;\n        }\n        String result = foundDollarBrace ? message.replace(\"${\", \"$'{'\") : message;\n        boolean hasArgs = args != null && args.length > 0;\n        if (hasArgs || foundBrace) {\n            return MessageFormat.format(result, hasArgs ? args : NO_ARGS);\n        } else {\n            return result;\n        }\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, Object[] args) {\n        String formattedMessage = cleanup(message, args);\n        ruleContext.getReport().addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage));\n    }\n\n    @Override\n    public void addViolation(RuleContext ruleContext, Rule rule, Node node, String message, int beginLine, int endLine,\n            Object[] args) {\n        String formattedMessage = cleanup(message, args);\n        ruleContext.getReport()\n                .addRuleViolation(createRuleViolation(rule, ruleContext, node, formattedMessage, beginLine, endLine));\n    }\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message);\n\n    protected abstract RuleViolation createRuleViolation(Rule rule, RuleContext ruleContext, Node node, String message,\n            int beginLine, int endLine);\n}\n"
    ]
}