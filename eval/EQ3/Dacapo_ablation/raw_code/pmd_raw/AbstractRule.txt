{
    "0": [
        "\n\npackage net.sourceforge.pmd.lang.rule;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RulePriority;\nimport net.sourceforge.pmd.lang.Language;\nimport net.sourceforge.pmd.lang.LanguageVersion;\nimport net.sourceforge.pmd.lang.ParserOptions;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.properties.AbstractPropertySource;\nimport net.sourceforge.pmd.properties.PropertyDescriptor;\n\n\npublic abstract class AbstractRule extends AbstractPropertySource implements Rule {\n\n    private Language language;\n    private LanguageVersion minimumLanguageVersion;\n    private LanguageVersion maximumLanguageVersion;\n    private boolean deprecated;\n    private String name = getClass().getName();\n    private String since;\n    private String ruleClass = getClass().getName();\n    private String ruleSetName;\n    private String message;\n    private String description;\n    private List<String> examples = new ArrayList<>();\n    private String externalInfoUrl;\n    private RulePriority priority = RulePriority.LOW;\n    private boolean usesDFA;\n    private boolean usesTypeResolution;\n    private boolean usesMultifile;\n    private List<String> ruleChainVisits = new ArrayList<>();\n\n    public AbstractRule() {\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR);\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR);\n    }\n\n    @Override\n    protected String getPropertySourceType() {\n        return \"rule\";\n    }\n\n    \n    @Deprecated\n    public void deepCopyValuesTo(AbstractRule otherRule) {\n        otherRule.language = language;\n        otherRule.minimumLanguageVersion = minimumLanguageVersion;\n        otherRule.maximumLanguageVersion = maximumLanguageVersion;\n        otherRule.deprecated = deprecated;\n        otherRule.name = name;\n        otherRule.since = since;\n        otherRule.ruleClass = ruleClass;\n        otherRule.ruleSetName = ruleSetName;\n        otherRule.message = message;\n        otherRule.description = description;\n        otherRule.examples = copyExamples();\n        otherRule.externalInfoUrl = externalInfoUrl;\n        otherRule.priority = priority;\n        otherRule.propertyDescriptors = new ArrayList<>(getPropertyDescriptors());\n        otherRule.propertyValuesByDescriptor = copyPropertyValues();\n        otherRule.usesDFA = usesDFA;\n        otherRule.usesTypeResolution = usesTypeResolution;\n        otherRule.usesMultifile = usesMultifile;\n        otherRule.ruleChainVisits = copyRuleChainVisits();\n    }\n\n    private List<String> copyExamples() {\n        return new ArrayList<>(examples);\n    }\n\n    private List<String> copyRuleChainVisits() {\n        return new ArrayList<>(ruleChainVisits);\n    }\n\n    @Override\n    public Language getLanguage() {\n        return language;\n    }\n\n    @Override\n    public void setLanguage(Language language) {\n        if (this.language != null && this instanceof ImmutableLanguage && !this.language.equals(language)) {\n            throw new UnsupportedOperationException(\"The Language for Rule class \" + this.getClass().getName()\n                    + \" is immutable and cannot be changed.\");\n        }\n        this.language = language;\n    }\n\n    @Override\n    public LanguageVersion getMinimumLanguageVersion() {\n        return minimumLanguageVersion;\n    }\n\n    @Override\n    public void setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion) {\n        this.minimumLanguageVersion = minimumLanguageVersion;\n    }\n\n    @Override\n    public LanguageVersion getMaximumLanguageVersion() {\n        return maximumLanguageVersion;\n    }\n\n    @Override\n    public void setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion) {\n        this.maximumLanguageVersion = maximumLanguageVersion;\n    }\n\n    @Override\n    public boolean isDeprecated() {\n        return deprecated;\n    }\n\n    @Override\n    public void setDeprecated(boolean deprecated) {\n        this.deprecated = deprecated;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String getSince() {\n        return since;\n    }\n\n    @Override\n    public void setSince(String since) {\n        this.since = since;\n    }\n\n    @Override\n    public String getRuleClass() {\n        return ruleClass;\n    }\n\n    @Override\n    public void setRuleClass(String ruleClass) {\n        this.ruleClass = ruleClass;\n    }\n\n    @Override\n    public String getRuleSetName() {\n        return ruleSetName;\n    }\n\n    @Override\n    public void setRuleSetName(String ruleSetName) {\n        this.ruleSetName = ruleSetName;\n    }\n\n    @Override\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public List<String> getExamples() {\n        \n        return examples;\n    }\n\n    @Override\n    public void addExample(String example) {\n        examples.add(example);\n    }\n\n    @Override\n    public String getExternalInfoUrl() {\n        return externalInfoUrl;\n    }\n\n    @Override\n    public void setExternalInfoUrl(String externalInfoUrl) {\n        this.externalInfoUrl = externalInfoUrl;\n    }\n\n    @Override\n    public RulePriority getPriority() {\n        return priority;\n    }\n\n    @Override\n    public void setPriority(RulePriority priority) {\n        this.priority = priority;\n    }\n\n    \n    @Override\n    @Deprecated\n    public ParserOptions getParserOptions() {\n        return new ParserOptions();\n    }\n\n    @Override\n    @Deprecated \n    public void setUsesDFA() {\n        setDfa(true);\n    }\n\n    @Override\n    public void setDfa(boolean isDfa) {\n        usesDFA = isDfa;\n    }\n\n    @Override\n    @Deprecated \n    public boolean usesDFA() {\n        return isDfa();\n    }\n\n    @Override\n    public boolean isDfa() {\n        return usesDFA;\n    }\n\n    @Override\n    @Deprecated \n    public void setUsesTypeResolution() {\n        setTypeResolution(true);\n    }\n\n    @Override\n    public void setTypeResolution(boolean usingTypeResolution) {\n        usesTypeResolution = usingTypeResolution;\n    }\n\n    @Override\n    @Deprecated \n    public boolean usesTypeResolution() {\n        return isTypeResolution();\n    }\n\n    @Override\n    public boolean isTypeResolution() {\n        return usesTypeResolution;\n    }\n\n    @Override\n    @Deprecated \n    public void setUsesMultifile() {\n        setMultifile(true);\n    }\n\n    @Override\n    public void setMultifile(boolean multifile) {\n        usesMultifile = multifile;\n    }\n\n    @Override\n    @Deprecated \n    public boolean usesMultifile() {\n        return isMultifile();\n    }\n\n    @Override\n    public boolean isMultifile() {\n        return usesMultifile;\n    }\n\n    @Override\n    @Deprecated \n    public boolean usesRuleChain() {\n        return isRuleChain();\n    }\n\n    @Override\n    public boolean isRuleChain() {\n        return !getRuleChainVisits().isEmpty();\n    }\n\n    @Override\n    public List<String> getRuleChainVisits() {\n        return ruleChainVisits;\n    }\n\n    @Override\n    public void addRuleChainVisit(Class<? extends Node> nodeClass) {\n        if (!nodeClass.getSimpleName().startsWith(\"AST\")) {\n            throw new IllegalArgumentException(\"Node class does not start with 'AST' prefix: \" + nodeClass);\n        }\n        addRuleChainVisit(nodeClass.getSimpleName().substring(\"AST\".length()));\n    }\n\n    @Override\n    public void addRuleChainVisit(String astNodeName) {\n        if (!ruleChainVisits.contains(astNodeName)) {\n            ruleChainVisits.add(astNodeName);\n        }\n    }\n\n    @Override\n    public void start(RuleContext ctx) {\n        \n    }\n\n    @Override\n    public void end(RuleContext ctx) {\n        \n    }\n\n    \n    protected final RuleContext asCtx(Object ctx) {\n        if (ctx instanceof RuleContext) {\n            assert isThisRule(((RuleContext) ctx).getCurrentRule())\n                : \"not an appropriate rule context!\";\n            return (RuleContext) ctx;\n        } else {\n            throw new ClassCastException(\"Unexpected context object! \" + ctx);\n        }\n    }\n\n    private boolean isThisRule(Rule rule) {\n        return rule == this \n            || rule instanceof AbstractDelegateRule && this.isThisRule(((AbstractDelegateRule) rule).getRule());\n    }\n\n    \n    public void addViolation(Object data, Node node) {\n        asCtx(data).addViolation(node);\n    }\n\n    \n    public void addViolation(Object data, Node node, String arg) {\n        asCtx(data).addViolation(node, arg);\n    }\n\n    \n    public void addViolation(Object data, Node node, Object... args) {\n        asCtx(data).addViolation(node, args);\n    }\n\n    \n    public void addViolationWithMessage(Object data, Node node, String message) {\n        asCtx(data).addViolationWithMessage(node, message);\n    }\n\n    \n    public void addViolationWithMessage(Object data, Node node, String message, int beginLine, int endLine) {\n        asCtx(data).addViolationWithPosition(node, beginLine, endLine, message);\n    }\n\n    \n    public void addViolationWithMessage(Object data, Node node, String message, Object[] args) {\n        asCtx(data).addViolationWithMessage(node, message, args);\n    }\n\n    \n    @Override\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false; \n        }\n\n        if (this == o) {\n            return true; \n        }\n\n        boolean equality = getClass() == o.getClass();\n\n        if (equality) {\n            Rule that = (Rule) o;\n            equality = getName().equals(that.getName()) && getPriority().equals(that.getPriority())\n                    && getPropertiesByPropertyDescriptor().equals(that.getPropertiesByPropertyDescriptor());\n        }\n\n        return equality;\n    }\n\n    @Override\n    public int hashCode() {\n        Object propertyValues = getPropertiesByPropertyDescriptor();\n        return getClass().getName().hashCode() + (getName() != null ? getName().hashCode() : 0)\n                + getPriority().hashCode() + (propertyValues != null ? propertyValues.hashCode() : 0);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Rule deepCopy() {\n        Rule rule = null;\n        try {\n            rule = getClass().newInstance();\n        } catch (InstantiationException | IllegalAccessException ignored) {\n            \n            throw new RuntimeException(ignored); \n        }\n        rule.setName(getName());\n        rule.setLanguage(getLanguage());\n        rule.setMinimumLanguageVersion(getMinimumLanguageVersion());\n        rule.setMaximumLanguageVersion(getMaximumLanguageVersion());\n        rule.setSince(getSince());\n        rule.setMessage(getMessage());\n        rule.setRuleSetName(getRuleSetName());\n        rule.setExternalInfoUrl(getExternalInfoUrl());\n        rule.setDfa(isDfa());\n        rule.setTypeResolution(isTypeResolution());\n        rule.setMultifile(isMultifile());\n        rule.setDescription(getDescription());\n        for (final String example : getExamples()) {\n            rule.addExample(example);\n        }\n        rule.setPriority(getPriority());\n        for (final PropertyDescriptor<?> prop : getPropertyDescriptors()) {\n            \n            if (rule.getPropertyDescriptor(prop.name()) == null) {\n                rule.definePropertyDescriptor(prop); \n            }\n\n            if (isPropertyOverridden(prop)) {\n                rule.setProperty((PropertyDescriptor<Object>) prop, getProperty((PropertyDescriptor<Object>) prop));\n            }\n        }\n        return rule;\n    }\n}\n"
    ],
    "1": [
        "package net.sourceforge.pmd.lang.rule;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RulePriority;\nimport net.sourceforge.pmd.lang.Language;\nimport net.sourceforge.pmd.lang.LanguageVersion;\nimport net.sourceforge.pmd.lang.ParserOptions;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.properties.AbstractPropertySource;\nimport net.sourceforge.pmd.properties.PropertyDescriptor;\n\npublic abstract class AbstractRule extends AbstractPropertySource implements Rule {\n    private Language language;\n    private LanguageVersion minimumLanguageVersion;\n    private LanguageVersion maximumLanguageVersion;\n    private boolean deprecated;\n    private String name = getClass().getName();\n    private String since;\n    private String ruleClass = getClass().getName();\n    private String ruleSetName;\n    private String message;\n    private String description;\n    private Set<String> examples = new LinkedHashSet<>();\n    private String externalInfoUrl;\n    private RulePriority priority = RulePriority.LOW;\n    private boolean usesDFA;\n    private boolean usesTypeResolution;\n    private boolean usesMultifile;\n    private Set<String> ruleChainVisits = new LinkedHashSet<>();\n\n    public AbstractRule() {\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR);\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR);\n    }\n\n    @Override\n    protected String getPropertySourceType() {\n        return \"rule\";\n    }\n\n    @Deprecated\n    public void deepCopyValuesTo(AbstractRule otherRule) {\n        otherRule.language = language;\n        otherRule.minimumLanguageVersion = minimumLanguageVersion;\n        otherRule.maximumLanguageVersion = maximumLanguageVersion;\n        otherRule.deprecated = deprecated;\n        otherRule.name = name;\n        otherRule.since = since;\n        otherRule.ruleClass = ruleClass;\n        otherRule.ruleSetName = ruleSetName;\n        otherRule.message = message;\n        otherRule.description = description;\n        otherRule.examples = new LinkedHashSet<>(examples);\n        otherRule.externalInfoUrl = externalInfoUrl;\n        otherRule.priority = priority;\n        otherRule.propertyDescriptors = new ArrayList<>(getPropertyDescriptors());\n        otherRule.propertyValuesByDescriptor = copyPropertyValues();\n        otherRule.usesDFA = usesDFA;\n        otherRule.usesTypeResolution = usesTypeResolution;\n        otherRule.usesMultifile = usesMultifile;\n        otherRule.ruleChainVisits = new LinkedHashSet<>(ruleChainVisits);\n    }\n\n    private List<String> copyExamples() {\n        return new ArrayList<>(examples);\n    }\n\n    private List<String> copyRuleChainVisits() {\n        return new ArrayList<>(ruleChainVisits);\n    }\n\n    @Override\n    public Language getLanguage() {\n        return language;\n    }\n\n    @Override\n    public void setLanguage(Language language) {\n        if (this.language != null && this instanceof ImmutableLanguage && !this.language.equals(language)) {\n            throw new UnsupportedOperationException(\"The Language for Rule class \" + this.getClass().getName()\n                    + \" is immutable and cannot be changed.\");\n        }\n        this.language = language;\n    }\n\n    @Override\n    public LanguageVersion getMinimumLanguageVersion() {\n        return minimumLanguageVersion;\n    }\n\n    @Override\n    public void setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion) {\n        this.minimumLanguageVersion = minimumLanguageVersion;\n    }\n\n    @Override\n    public LanguageVersion getMaximumLanguageVersion() {\n        return maximumLanguageVersion;\n    }\n\n    @Override\n    public void setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion) {\n        this.maximumLanguageVersion = maximumLanguageVersion;\n    }\n\n    @Override\n    public boolean isDeprecated() {\n        return deprecated;\n    }\n\n    @Override\n    public void setDeprecated(boolean deprecated) {\n        this.deprecated = deprecated;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String getSince() {\n        return since;\n    }\n\n    @Override\n    public void setSince(String since) {\n        this.since = since;\n    }\n\n    @Override\n    public String getRuleClass() {\n        return ruleClass;\n    }\n\n    @Override\n    public void setRuleClass(String ruleClass) {\n        this.ruleClass = ruleClass;\n    }\n\n    @Override\n    public String getRuleSetName() {\n        return ruleSetName;\n    }\n\n    @Override\n    public void setRuleSetName(String ruleSetName) {\n        this.ruleSetName = ruleSetName;\n    }\n\n    @Override\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public List<String> getExamples() {\n        return new ArrayList<>(examples);\n    }\n\n    @Override\n    public void addExample(String example) {\n        examples.add(example);\n    }\n\n    @Override\n    public String getExternalInfoUrl() {\n        return externalInfoUrl;\n    }\n\n    @Override\n    public void setExternalInfoUrl(String externalInfoUrl) {\n        this.externalInfoUrl = externalInfoUrl;\n    }\n\n    @Override\n    public RulePriority getPriority() {\n        return priority;\n    }\n\n    @Override\n    public void setPriority(RulePriority priority) {\n        this.priority = priority;\n    }\n\n    @Override\n    @Deprecated\n    public ParserOptions getParserOptions() {\n        return new ParserOptions();\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesDFA() {\n        setDfa(true);\n    }\n\n    @Override\n    public void setDfa(boolean isDfa) {\n        usesDFA = isDfa;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesDFA() {\n        return isDfa();\n    }\n\n    @Override\n    public boolean isDfa() {\n        return usesDFA;\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesTypeResolution() {\n        setTypeResolution(true);\n    }\n\n    @Override\n    public void setTypeResolution(boolean usingTypeResolution) {\n        usesTypeResolution = usingTypeResolution;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesTypeResolution() {\n        return isTypeResolution();\n    }\n\n    @Override\n    public boolean isTypeResolution() {\n        return usesTypeResolution;\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesMultifile() {\n        setMultifile(true);\n    }\n\n    @Override\n    public void setMultifile(boolean multifile) {\n        usesMultifile = multifile;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesMultifile() {\n        return isMultifile();\n    }\n\n    @Override\n    public boolean isMultifile() {\n        return usesMultifile;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesRuleChain() {\n        return isRuleChain();\n    }\n\n    @Override\n    public boolean isRuleChain() {\n        return !ruleChainVisits.isEmpty();\n    }\n\n    @Override\n    public List<String> getRuleChainVisits() {\n        return new ArrayList<>(ruleChainVisits);\n    }\n\n    @Override\n    public void addRuleChainVisit(Class<? extends Node> nodeClass) {\n        String simpleName = nodeClass.getSimpleName();\n        if (!simpleName.startsWith(\"AST\")) {\n            throw new IllegalArgumentException(\"Node class does not start with 'AST' prefix: \" + nodeClass);\n        }\n        addRuleChainVisit(simpleName.substring(\"AST\".length()));\n    }\n\n    @Override\n    public void addRuleChainVisit(String astNodeName) {\n        ruleChainVisits.add(astNodeName);\n    }\n\n    @Override\n    public void start(RuleContext ctx) {\n    }\n\n    @Override\n    public void end(RuleContext ctx) {\n    }\n\n    protected final RuleContext asCtx(Object ctx) {\n        if (ctx instanceof RuleContext) {\n            assert isThisRule(((RuleContext) ctx).getCurrentRule())\n                : \"not an appropriate rule context!\";\n            return (RuleContext) ctx;\n        } else {\n            throw new ClassCastException(\"Unexpected context object! \" + ctx);\n        }\n    }\n\n    private boolean isThisRule(Rule rule) {\n        return rule == this \n            || rule instanceof AbstractDelegateRule && this.isThisRule(((AbstractDelegateRule) rule).getRule());\n    }\n\n    public void addViolation(Object data, Node node) {\n        asCtx(data).addViolation(node);\n    }\n\n    public void addViolation(Object data, Node node, String arg) {\n        asCtx(data).addViolation(node, arg);\n    }\n\n    public void addViolation(Object data, Node node, Object... args) {\n        asCtx(data).addViolation(node, args);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message) {\n        asCtx(data).addViolationWithMessage(node, message);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message, int beginLine, int endLine) {\n        asCtx(data).addViolationWithPosition(node, beginLine, endLine, message);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message, Object[] args) {\n        asCtx(data).addViolationWithMessage(node, message, args);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false; \n        }\n        if (this == o) {\n            return true; \n        }\n        if (getClass() != o.getClass()) {\n            return false;\n        }\n        Rule that = (Rule) o;\n        return getName().equals(that.getName()) && getPriority().equals(that.getPriority())\n                && getPropertiesByPropertyDescriptor().equals(that.getPropertiesByPropertyDescriptor());\n    }\n\n    @Override\n    public int hashCode() {\n        Object propertyValues = getPropertiesByPropertyDescriptor();\n        int result = getClass().getName().hashCode();\n        result = 31 * result + (getName() != null ? getName().hashCode() : 0);\n        result = 31 * result + getPriority().hashCode();\n        result = 31 * result + (propertyValues != null ? propertyValues.hashCode() : 0);\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Rule deepCopy() {\n        Rule rule;\n        try {\n            rule = getClass().getDeclaredConstructor().newInstance();\n        } catch (ReflectiveOperationException ignored) {\n            throw new RuntimeException(ignored); \n        }\n        rule.setName(getName());\n        rule.setLanguage(getLanguage());\n        rule.setMinimumLanguageVersion(getMinimumLanguageVersion());\n        rule.setMaximumLanguageVersion(getMaximumLanguageVersion());\n        rule.setSince(getSince());\n        rule.setMessage(getMessage());\n        rule.setRuleSetName(getRuleSetName());\n        rule.setExternalInfoUrl(getExternalInfoUrl());\n        rule.setDfa(isDfa());\n        rule.setTypeResolution(isTypeResolution());\n        rule.setMultifile(isMultifile());\n        rule.setDescription(getDescription());\n        for (final String example : getExamples()) {\n            rule.addExample(example);\n        }\n        rule.setPriority(getPriority());\n        for (final PropertyDescriptor<?> prop : getPropertyDescriptors()) {\n            if (rule.getPropertyDescriptor(prop.name()) == null) {\n                rule.definePropertyDescriptor(prop); \n            }\n            if (isPropertyOverridden(prop)) {\n                rule.setProperty((PropertyDescriptor<Object>) prop, getProperty((PropertyDescriptor<Object>) prop));\n            }\n        }\n        for (final String visit : getRuleChainVisits()) {\n            rule.addRuleChainVisit(visit);\n        }\n        return rule;\n    }\n}\n"
    ],
    "2": [
        "package net.sourceforge.pmd.lang.rule;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport net.sourceforge.pmd.Rule;\nimport net.sourceforge.pmd.RuleContext;\nimport net.sourceforge.pmd.RulePriority;\nimport net.sourceforge.pmd.lang.Language;\nimport net.sourceforge.pmd.lang.LanguageVersion;\nimport net.sourceforge.pmd.lang.ParserOptions;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.properties.AbstractPropertySource;\nimport net.sourceforge.pmd.properties.PropertyDescriptor;\n\npublic abstract class AbstractRule extends AbstractPropertySource implements Rule {\n    private Language language;\n    private LanguageVersion minimumLanguageVersion;\n    private LanguageVersion maximumLanguageVersion;\n    private boolean deprecated;\n    private String name = getClass().getName();\n    private String since;\n    private String ruleClass = getClass().getName();\n    private String ruleSetName;\n    private String message;\n    private String description;\n    private Set<String> examples;\n    private String externalInfoUrl;\n    private RulePriority priority = RulePriority.LOW;\n    private boolean usesDFA;\n    private boolean usesTypeResolution;\n    private boolean usesMultifile;\n    private Set<String> ruleChainVisits;\n\n    \n    private static final Map<Class<?>, Constructor<?>> CONSTRUCTOR_CACHE = new ConcurrentHashMap<Class<?>, Constructor<?>>();\n\n    public AbstractRule() {\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_REGEX_DESCRIPTOR);\n        definePropertyDescriptor(Rule.VIOLATION_SUPPRESS_XPATH_DESCRIPTOR);\n    }\n\n    @Override\n    protected String getPropertySourceType() {\n        return \"rule\";\n    }\n\n    @Deprecated\n    public void deepCopyValuesTo(AbstractRule otherRule) {\n        otherRule.language = language;\n        otherRule.minimumLanguageVersion = minimumLanguageVersion;\n        otherRule.maximumLanguageVersion = maximumLanguageVersion;\n        otherRule.deprecated = deprecated;\n        otherRule.name = name;\n        otherRule.since = since;\n        otherRule.ruleClass = ruleClass;\n        otherRule.ruleSetName = ruleSetName;\n        otherRule.message = message;\n        otherRule.description = description;\n        otherRule.examples = (examples != null && !examples.isEmpty()) ? new LinkedHashSet<String>(examples) : null;\n        otherRule.externalInfoUrl = externalInfoUrl;\n        otherRule.priority = priority;\n        otherRule.propertyDescriptors = new ArrayList<PropertyDescriptor<?>>(getPropertyDescriptors());\n        otherRule.propertyValuesByDescriptor = copyPropertyValues();\n        otherRule.usesDFA = usesDFA;\n        otherRule.usesTypeResolution = usesTypeResolution;\n        otherRule.usesMultifile = usesMultifile;\n        otherRule.ruleChainVisits = (ruleChainVisits != null && !ruleChainVisits.isEmpty()) ? new LinkedHashSet<String>(ruleChainVisits) : null;\n    }\n\n    private List<String> copyExamples() {\n        return examples == null ? Collections.<String>emptyList() : new ArrayList<String>(examples);\n    }\n\n    private List<String> copyRuleChainVisits() {\n        return ruleChainVisits == null ? Collections.<String>emptyList() : new ArrayList<String>(ruleChainVisits);\n    }\n\n    @Override\n    public Language getLanguage() {\n        return language;\n    }\n\n    @Override\n    public void setLanguage(Language language) {\n        if (this.language != null && this instanceof ImmutableLanguage && !this.language.equals(language)) {\n            throw new UnsupportedOperationException(\"The Language for Rule class \" + this.getClass().getName()\n                    + \" is immutable and cannot be changed.\");\n        }\n        this.language = language;\n    }\n\n    @Override\n    public LanguageVersion getMinimumLanguageVersion() {\n        return minimumLanguageVersion;\n    }\n\n    @Override\n    public void setMinimumLanguageVersion(LanguageVersion minimumLanguageVersion) {\n        this.minimumLanguageVersion = minimumLanguageVersion;\n    }\n\n    @Override\n    public LanguageVersion getMaximumLanguageVersion() {\n        return maximumLanguageVersion;\n    }\n\n    @Override\n    public void setMaximumLanguageVersion(LanguageVersion maximumLanguageVersion) {\n        this.maximumLanguageVersion = maximumLanguageVersion;\n    }\n\n    @Override\n    public boolean isDeprecated() {\n        return deprecated;\n    }\n\n    @Override\n    public void setDeprecated(boolean deprecated) {\n        this.deprecated = deprecated;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String getSince() {\n        return since;\n    }\n\n    @Override\n    public void setSince(String since) {\n        this.since = since;\n    }\n\n    @Override\n    public String getRuleClass() {\n        return ruleClass;\n    }\n\n    @Override\n    public void setRuleClass(String ruleClass) {\n        this.ruleClass = ruleClass;\n    }\n\n    @Override\n    public String getRuleSetName() {\n        return ruleSetName;\n    }\n\n    @Override\n    public void setRuleSetName(String ruleSetName) {\n        this.ruleSetName = ruleSetName;\n    }\n\n    @Override\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public List<String> getExamples() {\n        if (examples == null || examples.isEmpty()) {\n            return Collections.<String>emptyList();\n        }\n        return Collections.unmodifiableList(new ArrayList<String>(examples));\n    }\n\n    @Override\n    public void addExample(String example) {\n        if (examples == null) {\n            examples = new LinkedHashSet<String>();\n        }\n        examples.add(example);\n    }\n\n    @Override\n    public String getExternalInfoUrl() {\n        return externalInfoUrl;\n    }\n\n    @Override\n    public void setExternalInfoUrl(String externalInfoUrl) {\n        this.externalInfoUrl = externalInfoUrl;\n    }\n\n    @Override\n    public RulePriority getPriority() {\n        return priority;\n    }\n\n    @Override\n    public void setPriority(RulePriority priority) {\n        this.priority = priority;\n    }\n\n    @Override\n    @Deprecated\n    public ParserOptions getParserOptions() {\n        return new ParserOptions();\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesDFA() {\n        setDfa(true);\n    }\n\n    @Override\n    public void setDfa(boolean isDfa) {\n        usesDFA = isDfa;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesDFA() {\n        return isDfa();\n    }\n\n    @Override\n    public boolean isDfa() {\n        return usesDFA;\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesTypeResolution() {\n        setTypeResolution(true);\n    }\n\n    @Override\n    public void setTypeResolution(boolean usingTypeResolution) {\n        usesTypeResolution = usingTypeResolution;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesTypeResolution() {\n        return isTypeResolution();\n    }\n\n    @Override\n    public boolean isTypeResolution() {\n        return usesTypeResolution;\n    }\n\n    @Override\n    @Deprecated\n    public void setUsesMultifile() {\n        setMultifile(true);\n    }\n\n    @Override\n    public void setMultifile(boolean multifile) {\n        usesMultifile = multifile;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesMultifile() {\n        return isMultifile();\n    }\n\n    @Override\n    public boolean isMultifile() {\n        return usesMultifile;\n    }\n\n    @Override\n    @Deprecated\n    public boolean usesRuleChain() {\n        return isRuleChain();\n    }\n\n    @Override\n    public boolean isRuleChain() {\n        return ruleChainVisits != null && !ruleChainVisits.isEmpty();\n    }\n\n    @Override\n    public List<String> getRuleChainVisits() {\n        if (ruleChainVisits == null || ruleChainVisits.isEmpty()) {\n            return Collections.<String>emptyList();\n        }\n        return Collections.unmodifiableList(new ArrayList<String>(ruleChainVisits));\n    }\n\n    @Override\n    public void addRuleChainVisit(Class<? extends Node> nodeClass) {\n        String simpleName = nodeClass.getSimpleName();\n        if (!simpleName.startsWith(\"AST\")) {\n            throw new IllegalArgumentException(\"Node class does not start with 'AST' prefix: \" + nodeClass);\n        }\n        addRuleChainVisit(simpleName.substring(\"AST\".length()));\n    }\n\n    @Override\n    public void addRuleChainVisit(String astNodeName) {\n        if (ruleChainVisits == null) {\n            ruleChainVisits = new LinkedHashSet<String>();\n        }\n        ruleChainVisits.add(astNodeName);\n    }\n\n    @Override\n    public void start(RuleContext ctx) {\n    }\n\n    @Override\n    public void end(RuleContext ctx) {\n    }\n\n    protected final RuleContext asCtx(Object ctx) {\n        if (ctx instanceof RuleContext) {\n            assert isThisRule(((RuleContext) ctx).getCurrentRule())\n                : \"not an appropriate rule context!\";\n            return (RuleContext) ctx;\n        } else {\n            throw new ClassCastException(\"Unexpected context object! \" + ctx);\n        }\n    }\n\n    private boolean isThisRule(Rule rule) {\n        return rule == this \n            || rule instanceof AbstractDelegateRule && this.isThisRule(((AbstractDelegateRule) rule).getRule());\n    }\n\n    public void addViolation(Object data, Node node) {\n        asCtx(data).addViolation(node);\n    }\n\n    public void addViolation(Object data, Node node, String arg) {\n        asCtx(data).addViolation(node, arg);\n    }\n\n    public void addViolation(Object data, Node node, Object... args) {\n        asCtx(data).addViolation(node, args);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message) {\n        asCtx(data).addViolationWithMessage(node, message);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message, int beginLine, int endLine) {\n        asCtx(data).addViolationWithPosition(node, beginLine, endLine, message);\n    }\n\n    public void addViolationWithMessage(Object data, Node node, String message, Object[] args) {\n        asCtx(data).addViolationWithMessage(node, message, args);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false; \n        }\n        if (this == o) {\n            return true; \n        }\n        if (getClass() != o.getClass()) {\n            return false;\n        }\n        Rule that = (Rule) o;\n        return getName().equals(that.getName()) && getPriority().equals(that.getPriority())\n                && getPropertiesByPropertyDescriptor().equals(that.getPropertiesByPropertyDescriptor());\n    }\n\n    @Override\n    public int hashCode() {\n        Object propertyValues = getPropertiesByPropertyDescriptor();\n        int result = getClass().getName().hashCode();\n        result = 31 * result + (getName() != null ? getName().hashCode() : 0);\n        result = 31 * result + getPriority().hashCode();\n        result = 31 * result + (propertyValues != null ? propertyValues.hashCode() : 0);\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Rule deepCopy() {\n        Rule rule;\n        Constructor<?> ctor = CONSTRUCTOR_CACHE.get(getClass());\n        if (ctor == null) {\n            try {\n                ctor = getClass().getDeclaredConstructor();\n                ctor.setAccessible(true);\n                CONSTRUCTOR_CACHE.put(getClass(), ctor);\n            } catch (NoSuchMethodException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        try {\n            rule = (Rule) ctor.newInstance();\n        } catch (InstantiationException e) {\n            throw new RuntimeException(e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(e);\n        }\n        rule.setName(getName());\n        rule.setLanguage(getLanguage());\n        rule.setMinimumLanguageVersion(getMinimumLanguageVersion());\n        rule.setMaximumLanguageVersion(getMaximumLanguageVersion());\n        rule.setSince(getSince());\n        rule.setMessage(getMessage());\n        rule.setRuleSetName(getRuleSetName());\n        rule.setExternalInfoUrl(getExternalInfoUrl());\n        rule.setDfa(isDfa());\n        rule.setTypeResolution(isTypeResolution());\n        rule.setMultifile(isMultifile());\n        rule.setDescription(getDescription());\n        for (final String example : getExamples()) {\n            rule.addExample(example);\n        }\n        rule.setPriority(getPriority());\n        for (final PropertyDescriptor<?> prop : getPropertyDescriptors()) {\n            if (rule.getPropertyDescriptor(prop.name()) == null) {\n                rule.definePropertyDescriptor(prop); \n            }\n            if (isPropertyOverridden(prop)) {\n                rule.setProperty((PropertyDescriptor<Object>) prop, getProperty((PropertyDescriptor<Object>) prop));\n            }\n        }\n        for (final String visit : getRuleChainVisits()) {\n            rule.addRuleChainVisit(visit);\n        }\n        return rule;\n    }\n}\n"
    ]
}