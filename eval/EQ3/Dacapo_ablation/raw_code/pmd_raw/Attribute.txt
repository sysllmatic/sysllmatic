{
    "0": [
        "\n\npackage net.sourceforge.pmd.lang.ast.xpath;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\n\nimport net.sourceforge.pmd.annotation.Experimental;\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.lang.ast.xpath.internal.DeprecatedAttribute;\n\n\npublic class Attribute {\n    private static final Object[] EMPTY_OBJ_ARRAY = new Object[0];\n\n    private final Node parent;\n    private final String name;\n    private Method method;\n    private List<?> value;\n    private String stringValue;\n\n    \n    public Attribute(Node parent, String name, Method m) {\n        this.parent = parent;\n        this.name = name;\n        this.method = m;\n    }\n\n    \n    public Attribute(Node parent, String name, String value) {\n        this.parent = parent;\n        this.name = name;\n        this.value = Collections.singletonList(value);\n        this.stringValue = value;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n\n    public Node getParent() {\n        return parent;\n    }\n\n    \n    @Experimental\n    public Class<?> getType() {\n        return method == null ? String.class : method.getReturnType();\n    }\n\n    \n    @InternalApi\n    public String replacementIfDeprecated() {\n        if (method == null) {\n            return null;\n        } else {\n            DeprecatedAttribute annot = method.getAnnotation(DeprecatedAttribute.class);\n            String result = annot != null\n                   ? annot.replaceWith()\n                   : method.isAnnotationPresent(Deprecated.class)\n                     ? DeprecatedAttribute.NO_REPLACEMENT\n                     : null;\n            if (result == null && List.class.isAssignableFrom(method.getReturnType())) {\n                \n                result = DeprecatedAttribute.NO_REPLACEMENT;\n            }\n            return result;\n        }\n    }\n\n    public Object getValue() {\n        if (value != null) {\n            return value.get(0);\n        }\n\n        \n        try {\n            value = Collections.singletonList(method.invoke(parent, EMPTY_OBJ_ARRAY));\n            return value.get(0);\n        } catch (IllegalAccessException | InvocationTargetException iae) {\n            iae.printStackTrace();\n        }\n        return null;\n    }\n\n    public String getStringValue() {\n        if (stringValue != null) {\n            return stringValue;\n        }\n        Object v = getValue();\n\n        stringValue = v == null ? \"\" : String.valueOf(v);\n        return stringValue;\n    }\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        Attribute attribute = (Attribute) o;\n        return Objects.equals(parent, attribute.parent)\n            && Objects.equals(name, attribute.name);\n    }\n\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(parent, name);\n    }\n\n    @Override\n    public String toString() {\n        return name + ':' + getValue() + ':' + parent.getXPathNodeName();\n    }\n}\n"
    ],
    "1": [
        "package net.sourceforge.pmd.lang.ast.xpath;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\n\nimport net.sourceforge.pmd.annotation.Experimental;\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.lang.ast.xpath.internal.DeprecatedAttribute;\n\npublic class Attribute {\n    private static final Object[] EMPTY_OBJ_ARRAY = new Object[0];\n\n    private final Node parent;\n    private final String name;\n    private Method method;\n    private Object value; \n    private String stringValue;\n\n    public Attribute(Node parent, String name, Method m) {\n        this.parent = parent;\n        this.name = name;\n        this.method = m;\n    }\n\n    public Attribute(Node parent, String name, String value) {\n        this.parent = parent;\n        this.name = name;\n        this.value = value;\n        this.stringValue = value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Node getParent() {\n        return parent;\n    }\n\n    @Experimental\n    public Class<?> getType() {\n        return method == null ? String.class : method.getReturnType();\n    }\n\n    @InternalApi\n    public String replacementIfDeprecated() {\n        if (method == null) {\n            return null;\n        } else {\n            DeprecatedAttribute annot = method.getAnnotation(DeprecatedAttribute.class);\n            String result = annot != null\n                   ? annot.replaceWith()\n                   : method.isAnnotationPresent(Deprecated.class)\n                     ? DeprecatedAttribute.NO_REPLACEMENT\n                     : null;\n            if (result == null && java.util.List.class.isAssignableFrom(method.getReturnType())) {\n                result = DeprecatedAttribute.NO_REPLACEMENT;\n            }\n            return result;\n        }\n    }\n\n    public Object getValue() {\n        if (value != null) {\n            return value;\n        }\n        try {\n            value = method.invoke(parent, EMPTY_OBJ_ARRAY);\n            return value;\n        } catch (IllegalAccessException | InvocationTargetException iae) {\n            iae.printStackTrace();\n        }\n        return null;\n    }\n\n    public String getStringValue() {\n        if (stringValue != null) {\n            return stringValue;\n        }\n        Object v = getValue();\n        stringValue = v == null ? \"\" : String.valueOf(v);\n        return stringValue;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        Attribute attribute = (Attribute) o;\n        return Objects.equals(parent, attribute.parent)\n            && Objects.equals(name, attribute.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(parent, name);\n    }\n\n    @Override\n    public String toString() {\n        return name + ':' + getValue() + ':' + parent.getXPathNodeName();\n    }\n}\n"
    ],
    "2": [
        "package net.sourceforge.pmd.lang.ast.xpath;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\n\nimport net.sourceforge.pmd.annotation.Experimental;\nimport net.sourceforge.pmd.annotation.InternalApi;\nimport net.sourceforge.pmd.lang.ast.Node;\nimport net.sourceforge.pmd.lang.ast.xpath.internal.DeprecatedAttribute;\n\npublic class Attribute {\n    private static final Object[] EMPTY_OBJ_ARRAY = new Object[0];\n\n    private final Node parent;\n    private final String name;\n    private final Method method;\n    private volatile Object value; \n    private volatile String stringValue; \n\n    public Attribute(Node parent, String name, Method m) {\n        this.parent = parent;\n        this.name = name;\n        this.method = m;\n    }\n\n    public Attribute(Node parent, String name, String value) {\n        this.parent = parent;\n        this.name = name;\n        this.method = null;\n        this.value = value;\n        this.stringValue = value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Node getParent() {\n        return parent;\n    }\n\n    @Experimental\n    public Class<?> getType() {\n        return method == null ? String.class : method.getReturnType();\n    }\n\n    @InternalApi\n    public String replacementIfDeprecated() {\n        if (method == null) {\n            return null;\n        } else {\n            DeprecatedAttribute annot = method.getAnnotation(DeprecatedAttribute.class);\n            String result = annot != null\n                   ? annot.replaceWith()\n                   : method.isAnnotationPresent(Deprecated.class)\n                     ? DeprecatedAttribute.NO_REPLACEMENT\n                     : null;\n            if (result == null && java.util.List.class.isAssignableFrom(method.getReturnType())) {\n                result = DeprecatedAttribute.NO_REPLACEMENT;\n            }\n            return result;\n        }\n    }\n\n    public Object getValue() {\n        Object v = value;\n        if (v != null) {\n            return v;\n        }\n        if (method == null) {\n            return null;\n        }\n        try {\n            v = method.invoke(parent, EMPTY_OBJ_ARRAY);\n            value = v;\n            return v;\n        } catch (IllegalAccessException | InvocationTargetException iae) {\n            throw new RuntimeException(\"Failed to access attribute method: \" + name, iae);\n        }\n    }\n\n    public String getStringValue() {\n        String sv = stringValue;\n        if (sv != null) {\n            return sv;\n        }\n        Object v = getValue();\n        sv = v == null ? \"\" : String.valueOf(v);\n        stringValue = sv;\n        return sv;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        Attribute attribute = (Attribute) o;\n        return Objects.equals(parent, attribute.parent)\n            && Objects.equals(name, attribute.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(parent, name);\n    }\n\n    @Override\n    public String toString() {\n        return name + ':' + getValue() + ':' + parent.getXPathNodeName();\n    }\n}\n"
    ]
}