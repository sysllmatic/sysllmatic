{
    "0": [
        "\n\npackage net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.zip.Adler32;\nimport java.util.zip.CheckedInputStream;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\nimport net.sourceforge.pmd.RuleSet.RuleSetBuilder;\nimport net.sourceforge.pmd.internal.DOMUtils;\nimport net.sourceforge.pmd.lang.rule.MockRule;\nimport net.sourceforge.pmd.lang.rule.RuleReference;\nimport net.sourceforge.pmd.rules.RuleFactory;\nimport net.sourceforge.pmd.util.ResourceLoader;\n\n\n@Deprecated\npublic class RuleSetFactory {\n\n    private static final Logger LOG = Logger.getLogger(RuleSetFactory.class.getName());\n\n    private static final String DESCRIPTION = \"description\";\n    private static final String UNEXPECTED_ELEMENT = \"Unexpected element <\";\n    private static final String PRIORITY = \"priority\";\n\n    private final ResourceLoader resourceLoader;\n    private final RulePriority minimumPriority;\n    private final boolean warnDeprecated;\n    private final RuleSetFactoryCompatibility compatibilityFilter;\n    private final boolean includeDeprecatedRuleReferences;\n\n    private final Map<RuleSetReferenceId, RuleSet> parsedRulesets = new HashMap<>();\n\n    \n    @Deprecated \n    public RuleSetFactory() {\n        this(new ResourceLoader(), RulePriority.LOW, false, true);\n    }\n\n    \n    @Deprecated \n    public RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(new ResourceLoader(classLoader), minimumPriority, warnDeprecated, enableCompatibility);\n    }\n\n    \n    @Deprecated \n    public RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(resourceLoader, minimumPriority, warnDeprecated, enableCompatibility, false);\n    }\n\n    RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n            final boolean warnDeprecated, final boolean enableCompatibility, boolean includeDeprecatedRuleReferences) {\n        this.resourceLoader = resourceLoader;\n        this.minimumPriority = minimumPriority;\n        this.warnDeprecated = warnDeprecated;\n        this.includeDeprecatedRuleReferences = includeDeprecatedRuleReferences;\n\n        if (enableCompatibility) {\n            this.compatibilityFilter = new RuleSetFactoryCompatibility();\n        } else {\n            this.compatibilityFilter = null;\n        }\n    }\n\n    \n    @Deprecated\n    public RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated) {\n        this(factory.resourceLoader, factory.minimumPriority, warnDeprecated, factory.compatibilityFilter != null);\n    }\n\n\n    \n     RuleSetFactoryCompatibility getCompatibilityFilter() {\n        return compatibilityFilter;\n    }\n\n    \n    @Deprecated\n    public Iterator<RuleSet> getRegisteredRuleSets() throws RuleSetNotFoundException {\n        return toLoader().getStandardRuleSets().iterator();\n    }\n\n    \n    @Deprecated\n    public RuleSets createRuleSets(String referenceString) throws RuleSetNotFoundException {\n        return createRuleSets(RuleSetReferenceId.parse(referenceString));\n    }\n\n    \n    @Deprecated\n    public RuleSets createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds) throws RuleSetNotFoundException {\n        RuleSets ruleSets = new RuleSets();\n        for (RuleSetReferenceId ruleSetReferenceId : ruleSetReferenceIds) {\n            RuleSet ruleSet = createRuleSet(ruleSetReferenceId);\n            ruleSets.addRuleSet(ruleSet);\n        }\n        return ruleSets;\n    }\n\n    \n    @Deprecated\n    public RuleSet createRuleSet(String referenceString) throws RuleSetNotFoundException {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(referenceString);\n        if (references.isEmpty()) {\n            throw new RuleSetNotFoundException(\n                    \"No RuleSetReferenceId can be parsed from the string: <\" + referenceString + '>');\n        }\n        return createRuleSet(references.get(0));\n    }\n\n    \n    @Deprecated\n    public RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId) throws RuleSetNotFoundException {\n        return createRuleSet(ruleSetReferenceId, includeDeprecatedRuleReferences);\n    }\n\n    private RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        return parseRuleSetNode(ruleSetReferenceId, withDeprecatedRuleReferences);\n    }\n\n    \n    @Deprecated\n    public RuleSet createRuleSetCopy(RuleSet original) {\n        RuleSetBuilder builder = new RuleSetBuilder(original);\n        return builder.build();\n    }\n\n    \n    @Deprecated\n    public RuleSet createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules) {\n        return RuleSet.create(name, description, fileName, toPatterns(excludePatterns), toPatterns(includePatterns), rules);\n    }\n\n    private Collection<Pattern> toPatterns(Collection<String> sources) {\n        List<Pattern> result = new ArrayList<>();\n        for (String s : sources) {\n            try {\n                result.add(Pattern.compile(s));\n            } catch (PatternSyntaxException ignored) {\n\n            }\n        }\n        return result;\n    }\n\n    \n    @Deprecated\n    public RuleSet createSingleRuleRuleSet(final Rule rule) {\n        return RuleSet.forSingleRule(rule);\n    }\n\n    \n    private Rule createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        if (ruleSetReferenceId.isAllRules()) {\n            throw new IllegalArgumentException(\n                    \"Cannot parse a single Rule from an all Rule RuleSet reference: <\" + ruleSetReferenceId + \">.\");\n        }\n        RuleSet ruleSet;\n        \n        if (parsedRulesets.containsKey(ruleSetReferenceId)) {\n            ruleSet = parsedRulesets.get(ruleSetReferenceId);\n        } else {\n            ruleSet = createRuleSet(ruleSetReferenceId, withDeprecatedRuleReferences);\n            parsedRulesets.put(ruleSetReferenceId, ruleSet);\n        }\n        return ruleSet.getRuleByName(ruleSetReferenceId.getRuleName());\n    }\n\n    \n    private RuleSet parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        try (CheckedInputStream inputStream = new CheckedInputStream(\n                ruleSetReferenceId.getInputStream(resourceLoader), new Adler32());) {\n            if (!ruleSetReferenceId.isExternal()) {\n                throw new IllegalArgumentException(\n                        \"Cannot parse a RuleSet from a non-external reference: <\" + ruleSetReferenceId + \">.\");\n            }\n            DocumentBuilder builder = createDocumentBuilder();\n            InputSource inputSource;\n            if (compatibilityFilter != null) {\n                inputSource = new InputSource(compatibilityFilter.filterRuleSetFile(inputStream));\n            } else {\n                inputSource = new InputSource(inputStream);\n            }\n            Document document = builder.parse(inputSource);\n            Element ruleSetElement = document.getDocumentElement();\n\n            RuleSetBuilder ruleSetBuilder = new RuleSetBuilder(inputStream.getChecksum().getValue())\n                    .withFileName(ruleSetReferenceId.getRuleSetFileName());\n\n            if (ruleSetElement.hasAttribute(\"name\")) {\n                ruleSetBuilder.withName(ruleSetElement.getAttribute(\"name\"));\n            } else {\n                LOG.warning(\"RuleSet name is missing. Future versions of PMD will require it.\");\n                ruleSetBuilder.withName(\"Missing RuleSet Name\");\n            }\n\n            Set<String> rulesetReferences = new HashSet<>();\n\n            NodeList nodeList = ruleSetElement.getChildNodes();\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                Node node = nodeList.item(i);\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\n                    String nodeName = node.getNodeName();\n                    String text = DOMUtils.parseTextNode(node);\n                    if (DESCRIPTION.equals(nodeName)) {\n                        ruleSetBuilder.withDescription(text);\n                    } else if (\"include-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileInclusions(pattern);\n                    } else if (\"exclude-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileExclusions(pattern);\n                    } else if (\"rule\".equals(nodeName)) {\n                        parseRuleNode(ruleSetReferenceId, ruleSetBuilder, node, withDeprecatedRuleReferences, rulesetReferences);\n                    } else {\n                        throw new IllegalArgumentException(UNEXPECTED_ELEMENT + node.getNodeName()\n                                + \"> encountered as child of <ruleset> element.\");\n                    }\n                }\n            }\n\n            if (!ruleSetBuilder.hasDescription()) {\n                LOG.warning(\"RuleSet description is missing. Future versions of PMD will require it.\");\n                ruleSetBuilder.withDescription(\"Missing description\");\n            }\n\n            ruleSetBuilder.filterRulesByPriority(minimumPriority);\n\n            return ruleSetBuilder.build();\n        } catch (ParserConfigurationException | IOException | SAXException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        }\n    }\n\n    private Pattern parseRegex(String text) {\n        final Pattern pattern;\n        try {\n            pattern = Pattern.compile(text);\n        } catch (PatternSyntaxException pse) {\n            LOG.warning(pse.getMessage());\n            return null;\n        }\n        return pattern;\n    }\n\n\n    private DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n        try {\n            \n            \n            \n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\n            \n            \n            \n            \n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n\n            \n            \n            \n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\n            \n            dbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n            \n            dbf.setXIncludeAware(false);\n            dbf.setExpandEntityReferences(false);\n        } catch (final ParserConfigurationException e) {\n            \n            LOG.log(Level.WARNING, \"Ignored unsupported XML Parser Feature for parsing rulesets\", e);\n        }\n\n        return dbf.newDocumentBuilder();\n    }\n\n    \n    private void parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n                               boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n        if (ruleElement.hasAttribute(\"ref\")) {\n            String ref = ruleElement.getAttribute(\"ref\");\n            RuleSetReferenceId refId = parseReferenceAndWarn(ruleSetBuilder, ref);\n            if (refId != null) {\n                if (refId.isAllRules()) {\n                    parseRuleSetReferenceNode(ruleSetBuilder, ruleElement, ref, refId, rulesetReferences);\n                } else {\n                    parseRuleReferenceNode(ruleSetReferenceId, ruleSetBuilder, ruleNode, ref, refId, withDeprecatedRuleReferences);\n                }\n                return;\n            }\n        }\n        parseSingleRuleNode(ruleSetReferenceId, ruleSetBuilder, ruleNode);\n    }\n\n    \n    private void parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement,\n                                           String ref,\n                                           RuleSetReferenceId ruleSetReferenceId, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        String priority = null;\n        NodeList childNodes = ruleElement.getChildNodes();\n        Set<String> excludedRulesCheck = new HashSet<>();\n        for (int i = 0; i < childNodes.getLength(); i++) {\n            Node child = childNodes.item(i);\n            if (isElementNode(child, \"exclude\")) {\n                Element excludeElement = (Element) child;\n                String excludedRuleName = excludeElement.getAttribute(\"name\");\n                excludedRulesCheck.add(excludedRuleName);\n            } else if (isElementNode(child, PRIORITY)) {\n                priority = DOMUtils.parseTextNode(child).trim();\n            }\n        }\n        final RuleSetReference ruleSetReference = new RuleSetReference(ref, true, excludedRulesCheck);\n\n        \n        \n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n        RuleSet otherRuleSet = ruleSetFactory.createRuleSet(ruleSetReferenceId);\n        List<RuleReference> potentialRules = new ArrayList<>();\n        int countDeprecated = 0;\n        for (Rule rule : otherRuleSet.getRules()) {\n            excludedRulesCheck.remove(rule.getName());\n            if (!ruleSetReference.getExcludes().contains(rule.getName())) {\n                RuleReference ruleReference = new RuleReference(rule, ruleSetReference);\n                \n                if (priority != null) {\n                    ruleReference.setPriority(RulePriority.valueOf(Integer.parseInt(priority)));\n                }\n\n                if (rule.isDeprecated()) {\n                    countDeprecated++;\n                }\n                potentialRules.add(ruleReference);\n            }\n        }\n\n        boolean rulesetDeprecated = false;\n        if (!potentialRules.isEmpty() && potentialRules.size() == countDeprecated) {\n            \n            rulesetDeprecated = true;\n            LOG.warning(\"The RuleSet \" + ref + \" has been deprecated and will be removed in PMD \" + PMDVersion.getNextMajorRelease());\n        }\n\n        for (RuleReference r : potentialRules) {\n            if (rulesetDeprecated || !r.getRule().isDeprecated()) {\n                \n                \n                \n                ruleSetBuilder.addRuleIfNotExists(r);\n            }\n        }\n\n        if (!excludedRulesCheck.isEmpty()) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\n                    \"Unable to exclude rules \" + excludedRulesCheck + \" from ruleset reference \" + ref\n                    + \"; perhaps the rule name is misspelled or the rule doesn't exist anymore?\");\n            }\n        }\n\n        if (rulesetReferences.contains(ref)) {\n            LOG.warning(\"The ruleset \" + ref + \" is referenced multiple times in \\\"\"\n                        + ruleSetBuilder.getName() + \"\\\".\");\n        }\n        rulesetReferences.add(ref);\n    }\n\n    private RuleSetReferenceId parseReferenceAndWarn(RuleSetBuilder ruleSetBuilder, String ref) {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(ref, warnDeprecated);\n        if (references.size() > 1 && warnDeprecated) {\n            LOG.warning(\"Using a comma separated list as a ref attribute is deprecated. \"\n                        + \"All references but the first are ignored. Reference: '\" + ref + \"'\");\n        } else if (references.isEmpty()) {\n            LOG.warning(\"Empty ref attribute in ruleset '\" + ruleSetBuilder.getName() + \"'\");\n            return null;\n        }\n        return references.get(0);\n    }\n\n    \n    private void parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode) {\n        Element ruleElement = (Element) ruleNode;\n\n        \n        \n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n            && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n        Rule rule = new RuleFactory(resourceLoader).buildRule(ruleElement);\n        rule.setRuleSetName(ruleSetBuilder.getName());\n\n        if (warnDeprecated && StringUtils.isBlank(ruleElement.getAttribute(\"language\"))) {\n            LOG.warning(\"Rule \" + ruleSetReferenceId.getRuleSetFileName() + \"/\" + rule.getName() + \" does not mention attribute\"\n                            + \" language='\" + rule.getLanguage().getTerseName() + \"',\"\n                            + \" please mention it explicitly to be compatible with PMD 7\");\n        }\n\n        ruleSetBuilder.addRule(rule);\n    }\n\n\n    \n    private void parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n                                        Node ruleNode, String ref,\n                                        RuleSetReferenceId otherRuleSetReferenceId,\n                                        boolean withDeprecatedRuleReferences) throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n\n        \n        \n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n                && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n\n        \n        \n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n\n        boolean isSameRuleSet = false;\n        if (!otherRuleSetReferenceId.isExternal()\n                && containsRule(ruleSetReferenceId, otherRuleSetReferenceId.getRuleName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(ref, ruleSetReferenceId);\n            isSameRuleSet = true;\n        } else if (otherRuleSetReferenceId.isExternal()\n                && otherRuleSetReferenceId.getRuleSetFileName().equals(ruleSetReferenceId.getRuleSetFileName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(otherRuleSetReferenceId.getRuleName(), ruleSetReferenceId);\n            isSameRuleSet = true;\n        }\n        \n        Rule referencedRule = ruleSetFactory.createRule(otherRuleSetReferenceId, true);\n\n        if (referencedRule == null) {\n            throw new IllegalArgumentException(\"Unable to find referenced rule \" + otherRuleSetReferenceId.getRuleName()\n                    + \"; perhaps the rule name is misspelled?\");\n        }\n\n        if (warnDeprecated && referencedRule.isDeprecated()) {\n            if (referencedRule instanceof RuleReference) {\n                RuleReference ruleReference = (RuleReference) referencedRule;\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                            + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                            + otherRuleSetReferenceId\n                            + \". PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this deprecated Rule name usage.\");\n                }\n            } else if (referencedRule instanceof MockRule) {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it has been removed from PMD and no longer functions.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            } else {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it is scheduled for removal from PMD.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            }\n        }\n\n        RuleSetReference ruleSetReference = new RuleSetReference(otherRuleSetReferenceId.getRuleSetFileName(), false);\n\n        RuleReference ruleReference = new RuleFactory(resourceLoader).decorateRule(referencedRule, ruleSetReference, ruleElement);\n\n        if (warnDeprecated && ruleReference.isDeprecated() && !isSameRuleSet) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                        + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                        + ruleSetReferenceId.getRuleSetFileName() + '/' + ruleReference.getName()\n                        + \". PMD \" + PMDVersion.getNextMajorRelease()\n                        + \" will remove support for this deprecated Rule name usage.\");\n            }\n        }\n\n        if (withDeprecatedRuleReferences || !isSameRuleSet || !ruleReference.isDeprecated()) {\n            Rule existingRule = ruleSetBuilder.getExistingRule(ruleReference);\n            if (existingRule instanceof RuleReference) {\n                RuleReference existingRuleReference = (RuleReference) existingRule;\n                \n                \n                \n                if (existingRuleReference.hasOverriddenAttributes() || !ruleReference.hasOverriddenAttributes()) {\n                    LOG.warning(\"The rule \" + ruleReference.getName() + \" is referenced multiple times in \\\"\"\n                            + ruleSetBuilder.getName() + \"\\\". \"\n                            + \"Only the last rule configuration is used.\");\n                }\n            }\n\n            ruleSetBuilder.addRuleReplaceIfExists(ruleReference);\n        }\n    }\n\n\n    \n    private boolean containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName) {\n        \n        boolean found = false;\n        try (InputStream ruleSet = ruleSetReferenceId.getInputStream(resourceLoader)) {\n            DocumentBuilder builder = createDocumentBuilder();\n            Document document = builder.parse(ruleSet);\n            Element ruleSetElement = document.getDocumentElement();\n\n            NodeList rules = ruleSetElement.getElementsByTagName(\"rule\");\n            for (int i = 0; i < rules.getLength(); i++) {\n                Element rule = (Element) rules.item(i);\n                if (rule.hasAttribute(\"name\") && rule.getAttribute(\"name\").equals(ruleName)) {\n                    found = true;\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return found;\n    }\n\n    private static boolean isElementNode(Node node, String name) {\n        return node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(name);\n    }\n\n    \n    private boolean isRuleName(Element ruleElement, String ruleName) {\n        if (ruleElement.hasAttribute(\"name\")) {\n            return ruleElement.getAttribute(\"name\").equals(ruleName);\n        } else if (ruleElement.hasAttribute(\"ref\")) {\n            RuleSetReferenceId ruleSetReferenceId = RuleSetReferenceId.parse(ruleElement.getAttribute(\"ref\")).get(0);\n            return ruleSetReferenceId.getRuleName() != null && ruleSetReferenceId.getRuleName().equals(ruleName);\n        } else {\n            return false;\n        }\n    }\n\n\n    \n    public RuleSetLoader toLoader() {\n        return new RuleSetLoader().loadResourcesWith(resourceLoader)\n                                  .filterAbovePriority(minimumPriority)\n                                  .warnDeprecated(warnDeprecated)\n                                  .enableCompatibility(compatibilityFilter != null)\n                                  .includeDeprecatedRuleReferences(includeDeprecatedRuleReferences);\n    }\n\n\n}\n"
    ],
    "1": [
        "package net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.zip.Adler32;\nimport java.util.zip.CheckedInputStream;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\nimport net.sourceforge.pmd.RuleSet.RuleSetBuilder;\nimport net.sourceforge.pmd.internal.DOMUtils;\nimport net.sourceforge.pmd.lang.rule.MockRule;\nimport net.sourceforge.pmd.lang.rule.RuleReference;\nimport net.sourceforge.pmd.rules.RuleFactory;\nimport net.sourceforge.pmd.util.ResourceLoader;\n\n@Deprecated\npublic class RuleSetFactory {\n\n    private static final Logger LOG = Logger.getLogger(RuleSetFactory.class.getName());\n    private static final String DESCRIPTION = \"description\";\n    private static final String UNEXPECTED_ELEMENT = \"Unexpected element <\";\n    private static final String PRIORITY = \"priority\";\n\n    private final ResourceLoader resourceLoader;\n    private final RulePriority minimumPriority;\n    private final boolean warnDeprecated;\n    private final RuleSetFactoryCompatibility compatibilityFilter;\n    private final boolean includeDeprecatedRuleReferences;\n\n    private final Map<RuleSetReferenceId, RuleSet> parsedRulesets = new HashMap<RuleSetReferenceId, RuleSet>();\n    \n    private final Map<RuleSetReferenceId, Document> parsedDocuments = new HashMap<RuleSetReferenceId, Document>();\n\n    \n    private static final DocumentBuilderFactory SHARED_DBF = createSharedDocumentBuilderFactory();\n    \n    private static final ThreadLocal DOCUMENT_BUILDER_THREAD_LOCAL = new ThreadLocal() {\n        @Override\n        protected Object initialValue() {\n            try {\n                return SHARED_DBF.newDocumentBuilder();\n            } catch (ParserConfigurationException e) {\n                throw new RuntimeException(\"Failed to create DocumentBuilder\", e);\n            }\n        }\n    };\n\n    private static DocumentBuilderFactory createSharedDocumentBuilderFactory() {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            dbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n            dbf.setXIncludeAware(false);\n            dbf.setExpandEntityReferences(false);\n        } catch (ParserConfigurationException e) {\n            LOG.log(Level.WARNING, \"Ignored unsupported XML Parser Feature for parsing rulesets\", e);\n        }\n        return dbf;\n    }\n\n    @Deprecated\n    public RuleSetFactory() {\n        this(new ResourceLoader(), RulePriority.LOW, false, true);\n    }\n\n    @Deprecated\n    public RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(new ResourceLoader(classLoader), minimumPriority, warnDeprecated, enableCompatibility);\n    }\n\n    @Deprecated\n    public RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(resourceLoader, minimumPriority, warnDeprecated, enableCompatibility, false);\n    }\n\n    RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n            final boolean warnDeprecated, final boolean enableCompatibility, boolean includeDeprecatedRuleReferences) {\n        this.resourceLoader = resourceLoader;\n        this.minimumPriority = minimumPriority;\n        this.warnDeprecated = warnDeprecated;\n        this.includeDeprecatedRuleReferences = includeDeprecatedRuleReferences;\n\n        if (enableCompatibility) {\n            this.compatibilityFilter = new RuleSetFactoryCompatibility();\n        } else {\n            this.compatibilityFilter = null;\n        }\n    }\n\n    @Deprecated\n    public RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated) {\n        this(factory.resourceLoader, factory.minimumPriority, warnDeprecated, factory.compatibilityFilter != null);\n    }\n\n    RuleSetFactoryCompatibility getCompatibilityFilter() {\n        return compatibilityFilter;\n    }\n\n    @Deprecated\n    public Iterator<RuleSet> getRegisteredRuleSets() throws RuleSetNotFoundException {\n        return toLoader().getStandardRuleSets().iterator();\n    }\n\n    @Deprecated\n    public RuleSets createRuleSets(String referenceString) throws RuleSetNotFoundException {\n        return createRuleSets(RuleSetReferenceId.parse(referenceString));\n    }\n\n    @Deprecated\n    public RuleSets createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds) throws RuleSetNotFoundException {\n        RuleSets ruleSets = new RuleSets();\n        for (RuleSetReferenceId ruleSetReferenceId : ruleSetReferenceIds) {\n            RuleSet ruleSet = createRuleSet(ruleSetReferenceId);\n            ruleSets.addRuleSet(ruleSet);\n        }\n        return ruleSets;\n    }\n\n    @Deprecated\n    public RuleSet createRuleSet(String referenceString) throws RuleSetNotFoundException {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(referenceString);\n        if (references.isEmpty()) {\n            throw new RuleSetNotFoundException(\n                    \"No RuleSetReferenceId can be parsed from the string: <\" + referenceString + '>'\n            );\n        }\n        return createRuleSet(references.get(0));\n    }\n\n    @Deprecated\n    public RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId) throws RuleSetNotFoundException {\n        return createRuleSet(ruleSetReferenceId, includeDeprecatedRuleReferences);\n    }\n\n    private RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        \n        RuleSet cached = parsedRulesets.get(ruleSetReferenceId);\n        if (cached != null) {\n            return cached;\n        }\n        RuleSet rs = parseRuleSetNode(ruleSetReferenceId, withDeprecatedRuleReferences);\n        parsedRulesets.put(ruleSetReferenceId, rs);\n        return rs;\n    }\n\n    @Deprecated\n    public RuleSet createRuleSetCopy(RuleSet original) {\n        RuleSetBuilder builder = new RuleSetBuilder(original);\n        return builder.build();\n    }\n\n    @Deprecated\n    public RuleSet createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules) {\n        return RuleSet.create(name, description, fileName, toPatterns(excludePatterns), toPatterns(includePatterns), rules);\n    }\n\n    private Collection<Pattern> toPatterns(Collection<String> sources) {\n        List<Pattern> result = new ArrayList<Pattern>();\n        for (String s : sources) {\n            try {\n                result.add(Pattern.compile(s));\n            } catch (PatternSyntaxException ignored) {\n            }\n        }\n        return result;\n    }\n\n    @Deprecated\n    public RuleSet createSingleRuleRuleSet(final Rule rule) {\n        return RuleSet.forSingleRule(rule);\n    }\n\n    private Rule createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        if (ruleSetReferenceId.isAllRules()) {\n            throw new IllegalArgumentException(\n                    \"Cannot parse a single Rule from an all Rule RuleSet reference: <\" + ruleSetReferenceId + \">.\");\n        }\n        RuleSet ruleSet = createRuleSet(ruleSetReferenceId, withDeprecatedRuleReferences);\n        return ruleSet.getRuleByName(ruleSetReferenceId.getRuleName());\n    }\n\n    private RuleSet parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        try (CheckedInputStream inputStream = new CheckedInputStream(\n                ruleSetReferenceId.getInputStream(resourceLoader), new Adler32())) {\n            if (!ruleSetReferenceId.isExternal()) {\n                throw new IllegalArgumentException(\n                        \"Cannot parse a RuleSet from a non-external reference: <\" + ruleSetReferenceId + \">.\");\n            }\n            \n            Document document = parsedDocuments.get(ruleSetReferenceId);\n            if (document == null) {\n                DocumentBuilder builder = getDocumentBuilder();\n                InputSource inputSource;\n                if (compatibilityFilter != null) {\n                    inputSource = new InputSource(compatibilityFilter.filterRuleSetFile(inputStream));\n                } else {\n                    inputSource = new InputSource(inputStream);\n                }\n                document = builder.parse(inputSource);\n                parsedDocuments.put(ruleSetReferenceId, document);\n            }\n            Element ruleSetElement = document.getDocumentElement();\n\n            RuleSetBuilder ruleSetBuilder = new RuleSetBuilder(inputStream.getChecksum().getValue())\n                    .withFileName(ruleSetReferenceId.getRuleSetFileName());\n\n            if (ruleSetElement.hasAttribute(\"name\")) {\n                ruleSetBuilder.withName(ruleSetElement.getAttribute(\"name\"));\n            } else {\n                LOG.warning(\"RuleSet name is missing. Future versions of PMD will require it.\");\n                ruleSetBuilder.withName(\"Missing RuleSet Name\");\n            }\n\n            Set<String> rulesetReferences = new HashSet<String>();\n\n            NodeList nodeList = ruleSetElement.getChildNodes();\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                Node node = nodeList.item(i);\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\n                    String nodeName = node.getNodeName();\n                    String text = DOMUtils.parseTextNode(node);\n                    if (DESCRIPTION.equals(nodeName)) {\n                        ruleSetBuilder.withDescription(text);\n                    } else if (\"include-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileInclusions(pattern);\n                    } else if (\"exclude-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileExclusions(pattern);\n                    } else if (\"rule\".equals(nodeName)) {\n                        parseRuleNode(ruleSetReferenceId, ruleSetBuilder, node, withDeprecatedRuleReferences, rulesetReferences);\n                    } else {\n                        throw new IllegalArgumentException(UNEXPECTED_ELEMENT + node.getNodeName()\n                                + \"> encountered as child of <ruleset> element.\");\n                    }\n                }\n            }\n\n            if (!ruleSetBuilder.hasDescription()) {\n                LOG.warning(\"RuleSet description is missing. Future versions of PMD will require it.\");\n                ruleSetBuilder.withDescription(\"Missing description\");\n            }\n\n            ruleSetBuilder.filterRulesByPriority(minimumPriority);\n\n            return ruleSetBuilder.build();\n        } catch (ParserConfigurationException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        } catch (SAXException ex) {\n            ex.printStackTrace();\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        }\n    }\n\n    \n    private DocumentBuilder getDocumentBuilder() throws ParserConfigurationException {\n        return (DocumentBuilder) DOCUMENT_BUILDER_THREAD_LOCAL.get();\n    }\n\n    private Pattern parseRegex(String text) {\n        final Pattern pattern;\n        try {\n            pattern = Pattern.compile(text);\n        } catch (PatternSyntaxException pse) {\n            LOG.warning(pse.getMessage());\n            return null;\n        }\n        return pattern;\n    }\n\n    @Deprecated \n    private DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {\n        return getDocumentBuilder();\n    }\n\n    private void parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n                               boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n        if (ruleElement.hasAttribute(\"ref\")) {\n            String ref = ruleElement.getAttribute(\"ref\");\n            RuleSetReferenceId refId = parseReferenceAndWarn(ruleSetBuilder, ref);\n            if (refId != null) {\n                if (refId.isAllRules()) {\n                    parseRuleSetReferenceNode(ruleSetBuilder, ruleElement, ref, refId, rulesetReferences);\n                } else {\n                    parseRuleReferenceNode(ruleSetReferenceId, ruleSetBuilder, ruleNode, ref, refId, withDeprecatedRuleReferences);\n                }\n                return;\n            }\n        }\n        parseSingleRuleNode(ruleSetReferenceId, ruleSetBuilder, ruleNode);\n    }\n\n    private void parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement,\n                                           String ref,\n                                           RuleSetReferenceId ruleSetReferenceId, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        String priority = null;\n        NodeList childNodes = ruleElement.getChildNodes();\n        Set<String> excludedRulesCheck = new HashSet<String>();\n        for (int i = 0; i < childNodes.getLength(); i++) {\n            Node child = childNodes.item(i);\n            if (isElementNode(child, \"exclude\")) {\n                Element excludeElement = (Element) child;\n                String excludedRuleName = excludeElement.getAttribute(\"name\");\n                excludedRulesCheck.add(excludedRuleName);\n            } else if (isElementNode(child, PRIORITY)) {\n                priority = DOMUtils.parseTextNode(child).trim();\n            }\n        }\n        final RuleSetReference ruleSetReference = new RuleSetReference(ref, true, excludedRulesCheck);\n\n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n        RuleSet otherRuleSet = ruleSetFactory.createRuleSet(ruleSetReferenceId);\n        List<RuleReference> potentialRules = new ArrayList<RuleReference>();\n        int countDeprecated = 0;\n        for (Rule rule : otherRuleSet.getRules()) {\n            excludedRulesCheck.remove(rule.getName());\n            if (!ruleSetReference.getExcludes().contains(rule.getName())) {\n                RuleReference ruleReference = new RuleReference(rule, ruleSetReference);\n                if (priority != null) {\n                    ruleReference.setPriority(RulePriority.valueOf(Integer.parseInt(priority)));\n                }\n                if (rule.isDeprecated()) {\n                    countDeprecated++;\n                }\n                potentialRules.add(ruleReference);\n            }\n        }\n        boolean rulesetDeprecated = false;\n        if (!potentialRules.isEmpty() && potentialRules.size() == countDeprecated) {\n            rulesetDeprecated = true;\n            LOG.warning(\"The RuleSet \" + ref + \" has been deprecated and will be removed in PMD \" + PMDVersion.getNextMajorRelease());\n        }\n        for (int i = 0; i < potentialRules.size(); i++) {\n            RuleReference r = potentialRules.get(i);\n            if (rulesetDeprecated || !r.getRule().isDeprecated()) {\n                ruleSetBuilder.addRuleIfNotExists(r);\n            }\n        }\n        if (!excludedRulesCheck.isEmpty()) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Unable to exclude rules \" + excludedRulesCheck + \" from ruleset reference \" + ref\n                    + \"; perhaps the rule name is misspelled or the rule doesn't exist anymore?\");\n            }\n        }\n        if (rulesetReferences.contains(ref)) {\n            LOG.warning(\"The ruleset \" + ref + \" is referenced multiple times in '\"\n                        + ruleSetBuilder.getName() + \"'.\");\n        }\n        rulesetReferences.add(ref);\n    }\n\n    private RuleSetReferenceId parseReferenceAndWarn(RuleSetBuilder ruleSetBuilder, String ref) {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(ref, warnDeprecated);\n        if (references.size() > 1 && warnDeprecated) {\n            LOG.warning(\"Using a comma separated list as a ref attribute is deprecated. \"\n                        + \"All references but the first are ignored. Reference: '\" + ref + \"'\");\n        } else if (references.isEmpty()) {\n            LOG.warning(\"Empty ref attribute in ruleset '\" + ruleSetBuilder.getName() + \"'\");\n            return null;\n        }\n        return references.get(0);\n    }\n\n    private void parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode) {\n        Element ruleElement = (Element) ruleNode;\n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n            && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n        Rule rule = new RuleFactory(resourceLoader).buildRule(ruleElement);\n        rule.setRuleSetName(ruleSetBuilder.getName());\n        if (warnDeprecated && StringUtils.isBlank(ruleElement.getAttribute(\"language\"))) {\n            LOG.warning(\"Rule \" + ruleSetReferenceId.getRuleSetFileName() + \"/\" + rule.getName() + \" does not mention attribute\"\n                            + \" language='\" + rule.getLanguage().getTerseName() + \"',\"\n                            + \" please mention it explicitly to be compatible with PMD 7\");\n        }\n        ruleSetBuilder.addRule(rule);\n    }\n\n    private void parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n                                        Node ruleNode, String ref,\n                                        RuleSetReferenceId otherRuleSetReferenceId,\n                                        boolean withDeprecatedRuleReferences) throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n                && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n        boolean isSameRuleSet = false;\n        if (!otherRuleSetReferenceId.isExternal()\n                && containsRule(ruleSetReferenceId, otherRuleSetReferenceId.getRuleName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(ref, ruleSetReferenceId);\n            isSameRuleSet = true;\n        } else if (otherRuleSetReferenceId.isExternal()\n                && otherRuleSetReferenceId.getRuleSetFileName().equals(ruleSetReferenceId.getRuleSetFileName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(otherRuleSetReferenceId.getRuleName(), ruleSetReferenceId);\n            isSameRuleSet = true;\n        }\n        Rule referencedRule = ruleSetFactory.createRule(otherRuleSetReferenceId, true);\n        if (referencedRule == null) {\n            throw new IllegalArgumentException(\"Unable to find referenced rule \" + otherRuleSetReferenceId.getRuleName()\n                    + \"; perhaps the rule name is misspelled?\");\n        }\n        if (warnDeprecated && referencedRule.isDeprecated()) {\n            if (referencedRule instanceof RuleReference) {\n                RuleReference ruleReference = (RuleReference) referencedRule;\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                            + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                            + otherRuleSetReferenceId\n                            + \". PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this deprecated Rule name usage.\");\n                }\n            } else if (referencedRule instanceof MockRule) {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it has been removed from PMD and no longer functions.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            } else {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it is scheduled for removal from PMD.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            }\n        }\n        RuleSetReference ruleSetReference = new RuleSetReference(otherRuleSetReferenceId.getRuleSetFileName(), false);\n        RuleReference ruleReference = new RuleFactory(resourceLoader).decorateRule(referencedRule, ruleSetReference, ruleElement);\n        if (warnDeprecated && ruleReference.isDeprecated() && !isSameRuleSet) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                        + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                        + ruleSetReferenceId.getRuleSetFileName() + '/' + ruleReference.getName()\n                        + \". PMD \" + PMDVersion.getNextMajorRelease()\n                        + \" will remove support for this deprecated Rule name usage.\");\n            }\n        }\n        if (withDeprecatedRuleReferences || !isSameRuleSet || !ruleReference.isDeprecated()) {\n            Rule existingRule = ruleSetBuilder.getExistingRule(ruleReference);\n            if (existingRule instanceof RuleReference) {\n                RuleReference existingRuleReference = (RuleReference) existingRule;\n                if (existingRuleReference.hasOverriddenAttributes() || !ruleReference.hasOverriddenAttributes()) {\n                    LOG.warning(\"The rule \" + ruleReference.getName() + \" is referenced multiple times in \"\n                            + '\"' + ruleSetBuilder.getName() + \"\\\". \"\n                            + \"Only the last rule configuration is used.\");\n                }\n            }\n            ruleSetBuilder.addRuleReplaceIfExists(ruleReference);\n        }\n    }\n\n    private boolean containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName) {\n        \n        RuleSet cached = parsedRulesets.get(ruleSetReferenceId);\n        if (cached != null) {\n            return cached.getRuleByName(ruleName) != null;\n        }\n        \n        Document document = parsedDocuments.get(ruleSetReferenceId);\n        try {\n            if (document == null) {\n                InputStream ruleSet = null;\n                try {\n                    ruleSet = ruleSetReferenceId.getInputStream(resourceLoader);\n                    DocumentBuilder builder = getDocumentBuilder();\n                    document = builder.parse(ruleSet);\n                    parsedDocuments.put(ruleSetReferenceId, document);\n                } finally {\n                    if (ruleSet != null) {\n                        try { ruleSet.close(); } catch (IOException ioe) {  }\n                    }\n                }\n            }\n            Element ruleSetElement = document.getDocumentElement();\n            NodeList rules = ruleSetElement.getElementsByTagName(\"rule\");\n            for (int i = 0; i < rules.getLength(); i++) {\n                Element rule = (Element) rules.item(i);\n                if (rule.hasAttribute(\"name\") && rule.getAttribute(\"name\").equals(ruleName)) {\n                    return true;\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return false;\n    }\n\n    private static boolean isElementNode(Node node, String name) {\n        return node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(name);\n    }\n\n    private boolean isRuleName(Element ruleElement, String ruleName) {\n        if (ruleElement.hasAttribute(\"name\")) {\n            return ruleElement.getAttribute(\"name\").equals(ruleName);\n        } else if (ruleElement.hasAttribute(\"ref\")) {\n            RuleSetReferenceId ruleSetReferenceId = RuleSetReferenceId.parse(ruleElement.getAttribute(\"ref\")).get(0);\n            return ruleSetReferenceId.getRuleName() != null && ruleSetReferenceId.getRuleName().equals(ruleName);\n        } else {\n            return false;\n        }\n    }\n\n    public RuleSetLoader toLoader() {\n        return new RuleSetLoader().loadResourcesWith(resourceLoader)\n                                  .filterAbovePriority(minimumPriority)\n                                  .warnDeprecated(warnDeprecated)\n                                  .enableCompatibility(compatibilityFilter != null)\n                                  .includeDeprecatedRuleReferences(includeDeprecatedRuleReferences);\n    }\n}\n"
    ],
    "2": [
        "package net.sourceforge.pmd;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.zip.Adler32;\nimport java.util.zip.CheckedInputStream;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\nimport net.sourceforge.pmd.RuleSet.RuleSetBuilder;\nimport net.sourceforge.pmd.internal.DOMUtils;\nimport net.sourceforge.pmd.lang.rule.MockRule;\nimport net.sourceforge.pmd.lang.rule.RuleReference;\nimport net.sourceforge.pmd.rules.RuleFactory;\nimport net.sourceforge.pmd.util.ResourceLoader;\n\n@Deprecated\npublic class RuleSetFactory {\n\n    private static final Logger LOG = Logger.getLogger(RuleSetFactory.class.getName());\n    private static final String DESCRIPTION = \"description\";\n    private static final String UNEXPECTED_ELEMENT = \"Unexpected element <\";\n    private static final String PRIORITY = \"priority\";\n    \n    private static final int CACHE_MAX_SIZE = 100;\n\n    private final ResourceLoader resourceLoader;\n    private final RulePriority minimumPriority;\n    private final boolean warnDeprecated;\n    private final RuleSetFactoryCompatibility compatibilityFilter;\n    private final boolean includeDeprecatedRuleReferences;\n\n    \n    private final Map<RuleSetReferenceId, RuleSet> parsedRulesets = Collections.synchronizedMap(\n        new LRUCache<RuleSetReferenceId, RuleSet>(CACHE_MAX_SIZE));\n    private final Map<RuleSetReferenceId, Document> parsedDocuments = Collections.synchronizedMap(\n        new LRUCache<RuleSetReferenceId, Document>(CACHE_MAX_SIZE));\n    \n    private final Map<String, Pattern> patternCache = Collections.synchronizedMap(\n        new LRUCache<String, Pattern>(64));\n    \n    private final RuleFactory ruleFactory;\n\n    private static final DocumentBuilderFactory SHARED_DBF = createSharedDocumentBuilderFactory();\n    private static final ThreadLocal<DocumentBuilder> DOCUMENT_BUILDER_THREAD_LOCAL = new ThreadLocal<DocumentBuilder>() {\n        @Override\n        protected DocumentBuilder initialValue() {\n            try {\n                return SHARED_DBF.newDocumentBuilder();\n            } catch (ParserConfigurationException e) {\n                throw new RuntimeException(\"Failed to create DocumentBuilder\", e);\n            }\n        }\n    };\n\n    private static DocumentBuilderFactory createSharedDocumentBuilderFactory() {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            dbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n            dbf.setXIncludeAware(false);\n            dbf.setExpandEntityReferences(false);\n        } catch (ParserConfigurationException e) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.log(Level.WARNING, \"Ignored unsupported XML Parser Feature for parsing rulesets\", e);\n            }\n        }\n        return dbf;\n    }\n\n    \n    private static class LRUCache<K, V> extends LinkedHashMap<K, V> {\n        private final int max;\n        public LRUCache(int max) {\n            super(max, 0.75f, true);\n            this.max = max;\n        }\n        protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n            return size() > max;\n        }\n    }\n\n    @Deprecated\n    public RuleSetFactory() {\n        this(new ResourceLoader(), RulePriority.LOW, false, true);\n    }\n\n    @Deprecated\n    public RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(new ResourceLoader(classLoader), minimumPriority, warnDeprecated, enableCompatibility);\n    }\n\n    @Deprecated\n    public RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility) {\n        this(resourceLoader, minimumPriority, warnDeprecated, enableCompatibility, false);\n    }\n\n    RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n            final boolean warnDeprecated, final boolean enableCompatibility, boolean includeDeprecatedRuleReferences) {\n        this.resourceLoader = resourceLoader;\n        this.minimumPriority = minimumPriority;\n        this.warnDeprecated = warnDeprecated;\n        this.includeDeprecatedRuleReferences = includeDeprecatedRuleReferences;\n        this.ruleFactory = new RuleFactory(resourceLoader);\n        if (enableCompatibility) {\n            this.compatibilityFilter = new RuleSetFactoryCompatibility();\n        } else {\n            this.compatibilityFilter = null;\n        }\n    }\n\n    @Deprecated\n    public RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated) {\n        this(factory.resourceLoader, factory.minimumPriority, warnDeprecated, factory.compatibilityFilter != null);\n    }\n\n    RuleSetFactoryCompatibility getCompatibilityFilter() {\n        return compatibilityFilter;\n    }\n\n    @Deprecated\n    public Iterator<RuleSet> getRegisteredRuleSets() throws RuleSetNotFoundException {\n        return toLoader().getStandardRuleSets().iterator();\n    }\n\n    @Deprecated\n    public RuleSets createRuleSets(String referenceString) throws RuleSetNotFoundException {\n        return createRuleSets(RuleSetReferenceId.parse(referenceString));\n    }\n\n    @Deprecated\n    public RuleSets createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds) throws RuleSetNotFoundException {\n        RuleSets ruleSets = new RuleSets();\n        for (RuleSetReferenceId ruleSetReferenceId : ruleSetReferenceIds) {\n            RuleSet ruleSet = createRuleSet(ruleSetReferenceId);\n            ruleSets.addRuleSet(ruleSet);\n        }\n        return ruleSets;\n    }\n\n    @Deprecated\n    public RuleSet createRuleSet(String referenceString) throws RuleSetNotFoundException {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(referenceString);\n        if (references.isEmpty()) {\n            throw new RuleSetNotFoundException(\n                    \"No RuleSetReferenceId can be parsed from the string: <\" + referenceString + '>'\n            );\n        }\n        return createRuleSet(references.get(0));\n    }\n\n    @Deprecated\n    public RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId) throws RuleSetNotFoundException {\n        return createRuleSet(ruleSetReferenceId, includeDeprecatedRuleReferences);\n    }\n\n    private RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        RuleSet cached;\n        synchronized (parsedRulesets) {\n            cached = parsedRulesets.get(ruleSetReferenceId);\n        }\n        if (cached != null) {\n            return cached;\n        }\n        RuleSet rs = parseRuleSetNode(ruleSetReferenceId, withDeprecatedRuleReferences);\n        synchronized (parsedRulesets) {\n            parsedRulesets.put(ruleSetReferenceId, rs);\n        }\n        return rs;\n    }\n\n    @Deprecated\n    public RuleSet createRuleSetCopy(RuleSet original) {\n        RuleSetBuilder builder = new RuleSetBuilder(original);\n        return builder.build();\n    }\n\n    @Deprecated\n    public RuleSet createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules) {\n        return RuleSet.create(name, description, fileName, toPatterns(excludePatterns), toPatterns(includePatterns), rules);\n    }\n\n    private Collection<Pattern> toPatterns(Collection<String> sources) {\n        List<Pattern> result = new ArrayList<Pattern>();\n        for (String s : sources) {\n            Pattern p = null;\n            synchronized (patternCache) {\n                p = patternCache.get(s);\n            }\n            if (p == null) {\n                try {\n                    p = Pattern.compile(s);\n                    synchronized (patternCache) {\n                        patternCache.put(s, p);\n                    }\n                } catch (PatternSyntaxException ignored) {\n                }\n            }\n            if (p != null) {\n                result.add(p);\n            }\n        }\n        return result;\n    }\n\n    @Deprecated\n    public RuleSet createSingleRuleRuleSet(final Rule rule) {\n        return RuleSet.forSingleRule(rule);\n    }\n\n    private Rule createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        if (ruleSetReferenceId.isAllRules()) {\n            throw new IllegalArgumentException(\n                    \"Cannot parse a single Rule from an all Rule RuleSet reference: <\" + ruleSetReferenceId + \">.\");\n        }\n        RuleSet ruleSet = createRuleSet(ruleSetReferenceId, withDeprecatedRuleReferences);\n        return ruleSet.getRuleByName(ruleSetReferenceId.getRuleName());\n    }\n\n    private RuleSet parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)\n            throws RuleSetNotFoundException {\n        CheckedInputStream inputStream = null;\n        try {\n            inputStream = new CheckedInputStream(\n                ruleSetReferenceId.getInputStream(resourceLoader), new Adler32());\n            if (!ruleSetReferenceId.isExternal()) {\n                throw new IllegalArgumentException(\n                        \"Cannot parse a RuleSet from a non-external reference: <\" + ruleSetReferenceId + \">.\");\n            }\n            Document document;\n            synchronized (parsedDocuments) {\n                document = parsedDocuments.get(ruleSetReferenceId);\n            }\n            if (document == null) {\n                DocumentBuilder builder = getDocumentBuilder();\n                InputSource inputSource;\n                if (compatibilityFilter != null) {\n                    inputSource = new InputSource(compatibilityFilter.filterRuleSetFile(inputStream));\n                } else {\n                    inputSource = new InputSource(inputStream);\n                }\n                document = builder.parse(inputSource);\n                synchronized (parsedDocuments) {\n                    parsedDocuments.put(ruleSetReferenceId, document);\n                }\n            }\n            Element ruleSetElement = document.getDocumentElement();\n\n            RuleSetBuilder ruleSetBuilder = new RuleSetBuilder(inputStream.getChecksum().getValue())\n                    .withFileName(ruleSetReferenceId.getRuleSetFileName());\n\n            if (ruleSetElement.hasAttribute(\"name\")) {\n                ruleSetBuilder.withName(ruleSetElement.getAttribute(\"name\"));\n            } else {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"RuleSet name is missing. Future versions of PMD will require it.\");\n                }\n                ruleSetBuilder.withName(\"Missing RuleSet Name\");\n            }\n\n            Set<String> rulesetReferences = new HashSet<String>();\n\n            NodeList nodeList = ruleSetElement.getChildNodes();\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                Node node = nodeList.item(i);\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\n                    String nodeName = node.getNodeName();\n                    String text = DOMUtils.parseTextNode(node);\n                    if (DESCRIPTION.equals(nodeName)) {\n                        ruleSetBuilder.withDescription(text);\n                    } else if (\"include-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileInclusions(pattern);\n                    } else if (\"exclude-pattern\".equals(nodeName)) {\n                        final Pattern pattern = parseRegex(text);\n                        if (pattern == null) {\n                            continue;\n                        }\n                        ruleSetBuilder.withFileExclusions(pattern);\n                    } else if (\"rule\".equals(nodeName)) {\n                        parseRuleNode(ruleSetReferenceId, ruleSetBuilder, node, withDeprecatedRuleReferences, rulesetReferences);\n                    } else {\n                        throw new IllegalArgumentException(UNEXPECTED_ELEMENT + node.getNodeName()\n                                + \"> encountered as child of <ruleset> element.\");\n                    }\n                }\n            }\n\n            if (!ruleSetBuilder.hasDescription()) {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"RuleSet description is missing. Future versions of PMD will require it.\");\n                }\n                ruleSetBuilder.withDescription(\"Missing description\");\n            }\n\n            ruleSetBuilder.filterRulesByPriority(minimumPriority);\n\n            return ruleSetBuilder.build();\n        } catch (ParserConfigurationException ex) {\n            if (LOG.isLoggable(Level.SEVERE)) {\n                ex.printStackTrace();\n            }\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        } catch (IOException ex) {\n            if (LOG.isLoggable(Level.SEVERE)) {\n                ex.printStackTrace();\n            }\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        } catch (SAXException ex) {\n            if (LOG.isLoggable(Level.SEVERE)) {\n                ex.printStackTrace();\n            }\n            throw new RuntimeException(\"Couldn't read the ruleset \" + ruleSetReferenceId + \": \" + ex.getMessage(), ex);\n        } finally {\n            if (inputStream != null) {\n                try { inputStream.close(); } catch (IOException ioe) { }\n            }\n        }\n    }\n\n    private DocumentBuilder getDocumentBuilder() throws ParserConfigurationException {\n        return DOCUMENT_BUILDER_THREAD_LOCAL.get();\n    }\n\n    private Pattern parseRegex(String text) {\n        Pattern pattern = null;\n        synchronized (patternCache) {\n            pattern = patternCache.get(text);\n        }\n        if (pattern != null) {\n            return pattern;\n        }\n        try {\n            pattern = Pattern.compile(text);\n            synchronized (patternCache) {\n                patternCache.put(text, pattern);\n            }\n        } catch (PatternSyntaxException pse) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(pse.getMessage());\n            }\n            return null;\n        }\n        return pattern;\n    }\n\n    @Deprecated\n    private DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {\n        return getDocumentBuilder();\n    }\n\n    private void parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n                               boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n        if (ruleElement.hasAttribute(\"ref\")) {\n            String ref = ruleElement.getAttribute(\"ref\");\n            RuleSetReferenceId refId = parseReferenceAndWarn(ruleSetBuilder, ref);\n            if (refId != null) {\n                if (refId.isAllRules()) {\n                    parseRuleSetReferenceNode(ruleSetBuilder, ruleElement, ref, refId, rulesetReferences);\n                } else {\n                    parseRuleReferenceNode(ruleSetReferenceId, ruleSetBuilder, ruleNode, ref, refId, withDeprecatedRuleReferences);\n                }\n                return;\n            }\n        }\n        parseSingleRuleNode(ruleSetReferenceId, ruleSetBuilder, ruleNode);\n    }\n\n    private void parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement,\n                                           String ref,\n                                           RuleSetReferenceId ruleSetReferenceId, Set<String> rulesetReferences)\n        throws RuleSetNotFoundException {\n        String priority = null;\n        NodeList childNodes = ruleElement.getChildNodes();\n        Set<String> excludedRulesCheck = new HashSet<String>();\n        for (int i = 0; i < childNodes.getLength(); i++) {\n            Node child = childNodes.item(i);\n            if (isElementNode(child, \"exclude\")) {\n                Element excludeElement = (Element) child;\n                String excludedRuleName = excludeElement.getAttribute(\"name\");\n                excludedRulesCheck.add(excludedRuleName);\n            } else if (isElementNode(child, PRIORITY)) {\n                priority = DOMUtils.parseTextNode(child).trim();\n            }\n        }\n        final RuleSetReference ruleSetReference = new RuleSetReference(ref, true, excludedRulesCheck);\n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n        RuleSet otherRuleSet = ruleSetFactory.createRuleSet(ruleSetReferenceId);\n        List<RuleReference> potentialRules = new ArrayList<RuleReference>();\n        int countDeprecated = 0;\n        for (Rule rule : otherRuleSet.getRules()) {\n            excludedRulesCheck.remove(rule.getName());\n            if (!ruleSetReference.getExcludes().contains(rule.getName())) {\n                RuleReference ruleReference = new RuleReference(rule, ruleSetReference);\n                if (priority != null) {\n                    ruleReference.setPriority(RulePriority.valueOf(Integer.parseInt(priority)));\n                }\n                if (rule.isDeprecated()) {\n                    countDeprecated++;\n                }\n                potentialRules.add(ruleReference);\n            }\n        }\n        boolean rulesetDeprecated = false;\n        if (!potentialRules.isEmpty() && potentialRules.size() == countDeprecated) {\n            rulesetDeprecated = true;\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"The RuleSet \" + ref + \" has been deprecated and will be removed in PMD \" + PMDVersion.getNextMajorRelease());\n            }\n        }\n        for (int i = 0; i < potentialRules.size(); i++) {\n            RuleReference r = potentialRules.get(i);\n            if (rulesetDeprecated || !r.getRule().isDeprecated()) {\n                ruleSetBuilder.addRuleIfNotExists(r);\n            }\n        }\n        if (!excludedRulesCheck.isEmpty()) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Unable to exclude rules \" + excludedRulesCheck + \" from ruleset reference \" + ref\n                    + \"; perhaps the rule name is misspelled or the rule doesn't exist anymore?\");\n            }\n        }\n        if (rulesetReferences.contains(ref)) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"The ruleset \" + ref + \" is referenced multiple times in '\"\n                        + ruleSetBuilder.getName() + \"'.\");\n            }\n        }\n        rulesetReferences.add(ref);\n    }\n\n    private RuleSetReferenceId parseReferenceAndWarn(RuleSetBuilder ruleSetBuilder, String ref) {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(ref, warnDeprecated);\n        if (references.size() > 1 && warnDeprecated) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Using a comma separated list as a ref attribute is deprecated. \"\n                        + \"All references but the first are ignored. Reference: '\" + ref + \"'\");\n            }\n        } else if (references.isEmpty()) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Empty ref attribute in ruleset '\" + ruleSetBuilder.getName() + \"'\");\n            }\n            return null;\n        }\n        return references.get(0);\n    }\n\n    private void parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode) {\n        Element ruleElement = (Element) ruleNode;\n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n            && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n        Rule rule = ruleFactory.buildRule(ruleElement);\n        rule.setRuleSetName(ruleSetBuilder.getName());\n        if (warnDeprecated && StringUtils.isBlank(ruleElement.getAttribute(\"language\"))) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Rule \" + ruleSetReferenceId.getRuleSetFileName() + \"/\" + rule.getName() + \" does not mention attribute\"\n                            + \" language='\" + rule.getLanguage().getTerseName() + \"',\"\n                            + \" please mention it explicitly to be compatible with PMD 7\");\n            }\n        }\n        ruleSetBuilder.addRule(rule);\n    }\n\n    private void parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n                                        Node ruleNode, String ref,\n                                        RuleSetReferenceId otherRuleSetReferenceId,\n                                        boolean withDeprecatedRuleReferences) throws RuleSetNotFoundException {\n        Element ruleElement = (Element) ruleNode;\n        if (StringUtils.isNotBlank(ruleSetReferenceId.getRuleName())\n                && !isRuleName(ruleElement, ruleSetReferenceId.getRuleName())) {\n            return;\n        }\n        RuleSetFactory ruleSetFactory = toLoader().filterAbovePriority(RulePriority.LOW).warnDeprecated(false).toFactory();\n        boolean isSameRuleSet = false;\n        if (!otherRuleSetReferenceId.isExternal()\n                && containsRule(ruleSetReferenceId, otherRuleSetReferenceId.getRuleName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(ref, ruleSetReferenceId);\n            isSameRuleSet = true;\n        } else if (otherRuleSetReferenceId.isExternal()\n                && otherRuleSetReferenceId.getRuleSetFileName().equals(ruleSetReferenceId.getRuleSetFileName())) {\n            otherRuleSetReferenceId = new RuleSetReferenceId(otherRuleSetReferenceId.getRuleName(), ruleSetReferenceId);\n            isSameRuleSet = true;\n        }\n        Rule referencedRule = ruleSetFactory.createRule(otherRuleSetReferenceId, true);\n        if (referencedRule == null) {\n            throw new IllegalArgumentException(\"Unable to find referenced rule \" + otherRuleSetReferenceId.getRuleName()\n                    + \"; perhaps the rule name is misspelled?\");\n        }\n        if (warnDeprecated && referencedRule.isDeprecated()) {\n            if (referencedRule instanceof RuleReference) {\n                RuleReference ruleReference = (RuleReference) referencedRule;\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                            + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                            + otherRuleSetReferenceId\n                            + \". PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this deprecated Rule name usage.\");\n                }\n            } else if (referencedRule instanceof MockRule) {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it has been removed from PMD and no longer functions.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            } else {\n                if (LOG.isLoggable(Level.WARNING)) {\n                    LOG.warning(\"Discontinue using Rule name \" + otherRuleSetReferenceId\n                            + \" as it is scheduled for removal from PMD.\"\n                            + \" PMD \" + PMDVersion.getNextMajorRelease()\n                            + \" will remove support for this Rule.\");\n                }\n            }\n        }\n        RuleSetReference ruleSetReference = new RuleSetReference(otherRuleSetReferenceId.getRuleSetFileName(), false);\n        RuleReference ruleReference = ruleFactory.decorateRule(referencedRule, ruleSetReference, ruleElement);\n        if (warnDeprecated && ruleReference.isDeprecated() && !isSameRuleSet) {\n            if (LOG.isLoggable(Level.WARNING)) {\n                LOG.warning(\"Use Rule name \" + ruleReference.getRuleSetReference().getRuleSetFileName() + '/'\n                        + ruleReference.getOriginalName() + \" instead of the deprecated Rule name \"\n                        + ruleSetReferenceId.getRuleSetFileName() + '/' + ruleReference.getName()\n                        + \". PMD \" + PMDVersion.getNextMajorRelease()\n                        + \" will remove support for this deprecated Rule name usage.\");\n            }\n        }\n        if (withDeprecatedRuleReferences || !isSameRuleSet || !ruleReference.isDeprecated()) {\n            Rule existingRule = ruleSetBuilder.getExistingRule(ruleReference);\n            if (existingRule instanceof RuleReference) {\n                RuleReference existingRuleReference = (RuleReference) existingRule;\n                if (existingRuleReference.hasOverriddenAttributes() || !ruleReference.hasOverriddenAttributes()) {\n                    if (LOG.isLoggable(Level.WARNING)) {\n                        LOG.warning(\"The rule \" + ruleReference.getName() + \" is referenced multiple times in \"\n                                + '\"' + ruleSetBuilder.getName() + \"\\\". \"\n                                + \"Only the last rule configuration is used.\");\n                    }\n                }\n            }\n            ruleSetBuilder.addRuleReplaceIfExists(ruleReference);\n        }\n    }\n\n    private boolean containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName) {\n        RuleSet cached;\n        synchronized (parsedRulesets) {\n            cached = parsedRulesets.get(ruleSetReferenceId);\n        }\n        if (cached != null) {\n            return cached.getRuleByName(ruleName) != null;\n        }\n        Document document;\n        synchronized (parsedDocuments) {\n            document = parsedDocuments.get(ruleSetReferenceId);\n        }\n        try {\n            if (document == null) {\n                InputStream ruleSet = null;\n                try {\n                    ruleSet = ruleSetReferenceId.getInputStream(resourceLoader);\n                    DocumentBuilder builder = getDocumentBuilder();\n                    document = builder.parse(ruleSet);\n                    synchronized (parsedDocuments) {\n                        parsedDocuments.put(ruleSetReferenceId, document);\n                    }\n                } finally {\n                    if (ruleSet != null) {\n                        try { ruleSet.close(); } catch (IOException ioe) {  }\n                    }\n                }\n            }\n            Element ruleSetElement = document.getDocumentElement();\n            NodeList rules = ruleSetElement.getElementsByTagName(\"rule\");\n            for (int i = 0; i < rules.getLength(); i++) {\n                Element rule = (Element) rules.item(i);\n                if (rule.hasAttribute(\"name\") && rule.getAttribute(\"name\").equals(ruleName)) {\n                    return true;\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return false;\n    }\n\n    private static boolean isElementNode(Node node, String name) {\n        return node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(name);\n    }\n\n    private boolean isRuleName(Element ruleElement, String ruleName) {\n        if (ruleElement.hasAttribute(\"name\")) {\n            return ruleElement.getAttribute(\"name\").equals(ruleName);\n        } else if (ruleElement.hasAttribute(\"ref\")) {\n            RuleSetReferenceId ruleSetReferenceId = RuleSetReferenceId.parse(ruleElement.getAttribute(\"ref\")).get(0);\n            return ruleSetReferenceId.getRuleName() != null && ruleSetReferenceId.getRuleName().equals(ruleName);\n        } else {\n            return false;\n        }\n    }\n\n    public RuleSetLoader toLoader() {\n        return new RuleSetLoader().loadResourcesWith(resourceLoader)\n                                  .filterAbovePriority(minimumPriority)\n                                  .warnDeprecated(warnDeprecated)\n                                  .enableCompatibility(compatibilityFilter != null)\n                                  .includeDeprecatedRuleReferences(includeDeprecatedRuleReferences);\n    }\n}\n"
    ]
}