{
    "0": [
        "\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n\tSequenceCreatorInterface<C> sequenceCreator;\n\tSequenceHeaderParserInterface<S,C> headerParser;\n\tBufferedReaderBytesRead br;\n\tInputStreamReader isr;\n\tFileInputStream fi = null;\n\tlong fileIndex = 0;\n\tlong sequenceIndex = 0;\n\tString line = \"\";\n\tString header= \"\";\n\n\t\n\tpublic FastaReader(InputStream is, SequenceHeaderParserInterface<S,C> headerParser,\n\t\t\t\t\t   SequenceCreatorInterface<C> sequenceCreator) {\n\t\tthis.headerParser = headerParser;\n\t\tisr = new InputStreamReader(is);\n\t\tthis.br = new BufferedReaderBytesRead(isr);\n\t\tthis.sequenceCreator = sequenceCreator;\n\t}\n\n\t\n\tpublic FastaReader(File file, SequenceHeaderParserInterface<S,C> headerParser,\n\t\t\t\t\t   SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n\t\tthis.headerParser = headerParser;\n\t\tfi = new FileInputStream(file);\n\t\tisr = new InputStreamReader(fi);\n\t\tthis.br = new BufferedReaderBytesRead(isr);\n\t\tthis.sequenceCreator = sequenceCreator;\n\t}\n\n\t\n\tpublic LinkedHashMap<String,S> process() throws IOException {\n\t\tLinkedHashMap<String,S> sequences = process(-1);\n\t\tclose();\n\n\t\treturn sequences;\n\t}\n\n\t\n\tpublic LinkedHashMap<String,S> process(int max) throws IOException {\n\n\n\t\tString line = \"\";\n\t\tif(this.line != null && this.line.length() > 0){\n\t\t\tline=this.line;\n\t\t}\n\t\tString header = \"\";\n\t\tif(this.header != null && this.header.length() > 0){\n\t\t\theader=this.header;\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint processedSequences=0;\n\t\tboolean keepGoing = true;\n\n\n\t\tLinkedHashMap<String,S> sequences = new LinkedHashMap<String,S>();\n\n\t\tdo {\n\t\t\tline = line.trim(); \n\t\t\tif (line.length() != 0) {\n\t\t\t\tif (line.startsWith(\">\")) {\n\n\t\t\t\t\tif (sb.length() > 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\tS sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n\t\t\t\t\t\t\theaderParser.parseHeader(header, sequence);\n\t\t\t\t\t\t\tsequences.put(sequence.getAccession().getID(),sequence);\n\t\t\t\t\t\t\tprocessedSequences++;\n\n\t\t\t\t\t\t} catch (CompoundNotFoundException e) {\n\t\t\t\t\t\t\tlogger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n\t\t\t\t\t\t\t\t\theader, e.getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsb.setLength(0); \n\t\t\t\t\t}\n\t\t\t\t\theader = line.substring(1);\n\t\t\t\t} else if (line.startsWith(\";\")) {\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tif(sb.length() == 0){\n\t\t\t\t\t\tsequenceIndex = fileIndex;\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(line);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfileIndex = br.getBytesRead();\n\n\t\t\tline = br.readLine();\n\n\t\t\tif (line == null) {\n\t\t\t\t\n\t\t\t\tif ( sb.length() == 0 && header.length() != 0 ) {\n\t\t\t\t\tlogger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n\t\t\t\t\tlogger.warn(\"header: {}\", header);\n\t\t\t\t\theader = null;\n\t\t\t\t} else if ( sb.length() > 0 ) {\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tS sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n\t\t\t\t\t\theaderParser.parseHeader(header, sequence);\n\t\t\t\t\t\tsequences.put(sequence.getAccession().getID(),sequence);\n\t\t\t\t\t\tprocessedSequences++;\n\t\t\t\t\t\theader = null;\n\t\t\t\t\t} catch (CompoundNotFoundException e) {\n\t\t\t\t\t\tlogger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n\t\t\t\t\t\t\t\theader, e.getMessage());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tkeepGoing = false;\n\t\t\t}\n\t\t\tif (max > -1 && processedSequences>=max) {\n\t\t\t\tkeepGoing=false;\n\t\t\t}\n\t\t} while (keepGoing);\n\n\t\tthis.line  = line;\n\t\tthis.header= header;\n\n\t\treturn max > -1 && sequences.isEmpty() ? null :  sequences;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tbr.close();\n\t\tisr.close();\n\t\t\n\t\tif (fi != null) {\n\t\t\tfi.close();\n\t\t}\n\t\tthis.line=this.header = null;\n\t}\n\t\n}\n"
    ],
    "1": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.LinkedHashMap;\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n\n    private final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    SequenceHeaderParserInterface<S, C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n    long fileIndex = 0;\n    long sequenceIndex = 0;\n    String line = \"\";\n    String header = \"\";\n\n    public FastaReader(InputStream is, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n        this.headerParser = headerParser;\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public LinkedHashMap<String, S> process() throws IOException {\n        LinkedHashMap<String, S> sequences = process(-1);\n        close();\n        return sequences;\n    }\n\n    public LinkedHashMap<String, S> process(int max) throws IOException {\n        String line = (this.line != null && !this.line.isEmpty()) ? this.line : null;\n        String header = (this.header != null && !this.header.isEmpty()) ? this.header : null;\n        StringBuilder sb = new StringBuilder(1024);\n        int processedSequences = 0;\n        LinkedHashMap<String, S> sequences = new LinkedHashMap<>();\n        boolean reachedMax = false;\n\n        while (true) {\n            if (line == null) {\n                line = br.readLine();\n                if (line == null) break; \n            }\n            \n            int len = line.length();\n            int i = 0;\n            while (i < len && Character.isWhitespace(line.charAt(i))) ++i;\n            if (i == len) { \n                line = null;\n                fileIndex = br.getBytesRead();\n                continue;\n            }\n            if (line.charAt(i) == '>') {\n                \n                if (sb.length() > 0 && header != null) {\n                    try {\n                        @SuppressWarnings(\"unchecked\")\n                        S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(header, sequence);\n                        sequences.put(sequence.getAccession().getID(), sequence);\n                        processedSequences++;\n                    } catch (CompoundNotFoundException e) {\n                        logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                header, e.getMessage());\n                    }\n                    sb.setLength(0);\n                    if (max > -1 && processedSequences >= max) {\n                        reachedMax = true;\n                        break;\n                    }\n                }\n                header = line.substring(i + 1); \n                sb.setLength(0);\n            } else if (line.charAt(i) == ';') {\n                \n            } else {\n                if (sb.length() == 0) {\n                    sequenceIndex = fileIndex;\n                }\n                sb.append(line, i, len); \n            }\n            fileIndex = br.getBytesRead();\n            line = null;\n        }\n\n        \n        if (!reachedMax && sb.length() > 0 && header != null) {\n            try {\n                @SuppressWarnings(\"unchecked\")\n                S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                headerParser.parseHeader(header, sequence);\n                sequences.put(sequence.getAccession().getID(), sequence);\n            } catch (CompoundNotFoundException e) {\n                logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                        header, e.getMessage());\n            }\n        } else if (!reachedMax && sb.length() == 0 && header != null) {\n            logger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n            logger.warn(\"header: {}\", header);\n        }\n\n        this.line = line;\n        this.header = header;\n\n        return (max > -1 && sequences.isEmpty()) ? null : sequences;\n    }\n\n    public void close() throws IOException {\n        br.close();\n        isr.close();\n        if (fi != null) {\n            fi.close();\n        }\n        this.line = this.header = null;\n    }\n}\n"
    ],
    "2": [
        "package org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.util.LinkedHashMap;\n\npublic class FastaReader<S extends Sequence<?>, C extends Compound> {\n\n    private final static Logger logger = LoggerFactory.getLogger(FastaReader.class);\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    SequenceHeaderParserInterface<S, C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n    long fileIndex = 0;\n    long sequenceIndex = 0;\n    String line = \"\";\n    String header = \"\";\n\n    public FastaReader(InputStream is, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, SequenceHeaderParserInterface<S, C> headerParser,\n                       SequenceCreatorInterface<C> sequenceCreator) throws FileNotFoundException {\n        this.headerParser = headerParser;\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public LinkedHashMap<String, S> process() throws IOException {\n        LinkedHashMap<String, S> sequences = process(-1);\n        close();\n        return sequences;\n    }\n\n    public LinkedHashMap<String, S> process(int max) throws IOException {\n        String line = (this.line != null && !this.line.isEmpty()) ? this.line : null;\n        String header = (this.header != null && !this.header.isEmpty()) ? this.header : null;\n        int sbCapacity = 1024;\n        StringBuilder sb = new StringBuilder(sbCapacity);\n        int processedSequences = 0;\n        LinkedHashMap<String, S> sequences = new LinkedHashMap<>();\n        boolean reachedMax = false;\n        int maxSequenceLengthSeen = sbCapacity;\n\n        while (true) {\n            if (line == null) {\n                line = br.readLine();\n                if (line == null) break; \n            }\n            \n            int len = line.length();\n            int i = 0;\n            while (i < len && Character.isWhitespace(line.charAt(i))) ++i;\n            if (i == len || line.charAt(i) == ';') {\n                fileIndex = br.getBytesRead();\n                line = null;\n                continue;\n            }\n            if (line.charAt(i) == '>') {\n                \n                if (sb.length() > 0 && header != null) {\n                    \n                    if (sb.length() > maxSequenceLengthSeen) {\n                        maxSequenceLengthSeen = sb.length();\n                        sbCapacity = Math.max(sbCapacity * 2, maxSequenceLengthSeen);\n                    }\n                    try {\n                        @SuppressWarnings(\"unchecked\")\n                        S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(header, sequence);\n                        sequences.put(sequence.getAccession().getID(), sequence);\n                        processedSequences++;\n                    } catch (CompoundNotFoundException e) {\n                        logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                                header, e.getMessage());\n                    }\n                    if (max > -1 && processedSequences >= max) {\n                        reachedMax = true;\n                        break;\n                    }\n                    \n                    if (sbCapacity > sb.capacity()) {\n                        sb = new StringBuilder(sbCapacity);\n                    } else {\n                        sb.setLength(0);\n                    }\n                } else {\n                    sb.setLength(0);\n                }\n                header = line.substring(i + 1); \n            } else {\n                if (sb.length() == 0) {\n                    sequenceIndex = fileIndex;\n                }\n                sb.append(line, i, len); \n            }\n            fileIndex = br.getBytesRead();\n            line = null;\n        }\n\n        \n        if (!reachedMax && sb.length() > 0 && header != null) {\n            try {\n                @SuppressWarnings(\"unchecked\")\n                S sequence = (S) sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                headerParser.parseHeader(header, sequence);\n                sequences.put(sequence.getAccession().getID(), sequence);\n            } catch (CompoundNotFoundException e) {\n                logger.warn(\"Sequence with header '{}' has unrecognised compounds ({}), it will be ignored\",\n                        header, e.getMessage());\n            }\n        } else if (!reachedMax && sb.length() == 0 && header != null) {\n            logger.warn(\"Can't parse sequence {}. Got sequence of length 0!\", sequenceIndex);\n            logger.warn(\"header: {}\", header);\n        }\n\n        this.line = line;\n        this.header = header;\n\n        return (max > -1 && sequences.isEmpty()) ? null : sequences;\n    }\n\n    public void close() throws IOException {\n        br.close();\n        isr.close();\n        if (fi != null) {\n            fi.close();\n        }\n        this.line = this.header = null;\n    }\n}\n"
    ]
}